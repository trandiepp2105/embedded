
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800e0f8  0800e0f8  0000f0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e560  0800e560  00010060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e560  0800e560  0000f560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e568  0800e568  00010060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e568  0800e568  0000f568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e56c  0800e56c  0000f56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800e570  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010060  2**0
                  CONTENTS
 10 .bss          00000b28  20000060  20000060  00010060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000b88  20000b88  00010060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177a3  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003afd  00000000  00000000  00027833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0002b330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b83  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d084  00000000  00000000  00050323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d124c  00000000  00000000  0006d3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e5f3  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000f8d  00000000  00000000  0013e636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b54  00000000  00000000  0013f5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00145118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e0e0 	.word	0x0800e0e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800e0e0 	.word	0x0800e0e0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b988 	b.w	8000eb4 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	468e      	mov	lr, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4688      	mov	r8, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d962      	bls.n	8000c98 <__udivmoddi4+0xdc>
 8000bd2:	fab2 f682 	clz	r6, r2
 8000bd6:	b14e      	cbz	r6, 8000bec <__udivmoddi4+0x30>
 8000bd8:	f1c6 0320 	rsb	r3, r6, #32
 8000bdc:	fa01 f806 	lsl.w	r8, r1, r6
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	40b7      	lsls	r7, r6
 8000be6:	ea43 0808 	orr.w	r8, r3, r8
 8000bea:	40b4      	lsls	r4, r6
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	fa1f fc87 	uxth.w	ip, r7
 8000bf4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf8:	0c23      	lsrs	r3, r4, #16
 8000bfa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fb01 f20c 	mul.w	r2, r1, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c10:	f080 80ea 	bcs.w	8000de8 <__udivmoddi4+0x22c>
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f240 80e7 	bls.w	8000de8 <__udivmoddi4+0x22c>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	443b      	add	r3, r7
 8000c1e:	1a9a      	subs	r2, r3, r2
 8000c20:	b2a3      	uxth	r3, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c32:	459c      	cmp	ip, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x8e>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3c:	f080 80d6 	bcs.w	8000dec <__udivmoddi4+0x230>
 8000c40:	459c      	cmp	ip, r3
 8000c42:	f240 80d3 	bls.w	8000dec <__udivmoddi4+0x230>
 8000c46:	443b      	add	r3, r7
 8000c48:	3802      	subs	r0, #2
 8000c4a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4e:	eba3 030c 	sub.w	r3, r3, ip
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40f3      	lsrs	r3, r6
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xb6>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb0>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x14c>
 8000c7a:	4573      	cmp	r3, lr
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xc8>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 8105 	bhi.w	8000e8e <__udivmoddi4+0x2d2>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e5      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c92:	e9c5 4800 	strd	r4, r8, [r5]
 8000c96:	e7e2      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f000 8090 	beq.w	8000dbe <__udivmoddi4+0x202>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f040 80a4 	bne.w	8000df0 <__udivmoddi4+0x234>
 8000ca8:	1a8a      	subs	r2, r1, r2
 8000caa:	0c03      	lsrs	r3, r0, #16
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	b280      	uxth	r0, r0
 8000cb2:	b2bc      	uxth	r4, r7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cba:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x11e>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x11c>
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	f200 80e0 	bhi.w	8000e98 <__udivmoddi4+0x2dc>
 8000cd8:	46c4      	mov	ip, r8
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ce0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce8:	fb02 f404 	mul.w	r4, r2, r4
 8000cec:	429c      	cmp	r4, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x144>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x142>
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f200 80ca 	bhi.w	8000e92 <__udivmoddi4+0x2d6>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	1b1b      	subs	r3, r3, r4
 8000d02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa0e f401 	lsl.w	r4, lr, r1
 8000d18:	fa20 f306 	lsr.w	r3, r0, r6
 8000d1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d24:	4323      	orrs	r3, r4
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	fa1f fc87 	uxth.w	ip, r7
 8000d2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d32:	0c1c      	lsrs	r4, r3, #16
 8000d34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x1a0>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d4e:	f080 809c 	bcs.w	8000e8a <__udivmoddi4+0x2ce>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f240 8099 	bls.w	8000e8a <__udivmoddi4+0x2ce>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	eba4 040e 	sub.w	r4, r4, lr
 8000d60:	fa1f fe83 	uxth.w	lr, r3
 8000d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d68:	fb09 4413 	mls	r4, r9, r3, r4
 8000d6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d74:	45a4      	cmp	ip, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1ce>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d7e:	f080 8082 	bcs.w	8000e86 <__udivmoddi4+0x2ca>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d97f      	bls.n	8000e86 <__udivmoddi4+0x2ca>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8e:	eba4 040c 	sub.w	r4, r4, ip
 8000d92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d96:	4564      	cmp	r4, ip
 8000d98:	4673      	mov	r3, lr
 8000d9a:	46e1      	mov	r9, ip
 8000d9c:	d362      	bcc.n	8000e64 <__udivmoddi4+0x2a8>
 8000d9e:	d05f      	beq.n	8000e60 <__udivmoddi4+0x2a4>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x1fe>
 8000da2:	ebb8 0203 	subs.w	r2, r8, r3
 8000da6:	eb64 0409 	sbc.w	r4, r4, r9
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	fa22 f301 	lsr.w	r3, r2, r1
 8000db2:	431e      	orrs	r6, r3
 8000db4:	40cc      	lsrs	r4, r1
 8000db6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e74f      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000dbe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dc2:	0c01      	lsrs	r1, r0, #16
 8000dc4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	463c      	mov	r4, r7
 8000dd4:	46b8      	mov	r8, r7
 8000dd6:	46be      	mov	lr, r7
 8000dd8:	2620      	movs	r6, #32
 8000dda:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dde:	eba2 0208 	sub.w	r2, r2, r8
 8000de2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de6:	e766      	b.n	8000cb6 <__udivmoddi4+0xfa>
 8000de8:	4601      	mov	r1, r0
 8000dea:	e718      	b.n	8000c1e <__udivmoddi4+0x62>
 8000dec:	4610      	mov	r0, r2
 8000dee:	e72c      	b.n	8000c4a <__udivmoddi4+0x8e>
 8000df0:	f1c6 0220 	rsb	r2, r6, #32
 8000df4:	fa2e f302 	lsr.w	r3, lr, r2
 8000df8:	40b7      	lsls	r7, r6
 8000dfa:	40b1      	lsls	r1, r6
 8000dfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000e00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e04:	430a      	orrs	r2, r1
 8000e06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e0a:	b2bc      	uxth	r4, r7
 8000e0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb08 f904 	mul.w	r9, r8, r4
 8000e1a:	40b0      	lsls	r0, r6
 8000e1c:	4589      	cmp	r9, r1
 8000e1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e22:	b280      	uxth	r0, r0
 8000e24:	d93e      	bls.n	8000ea4 <__udivmoddi4+0x2e8>
 8000e26:	1879      	adds	r1, r7, r1
 8000e28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e2c:	d201      	bcs.n	8000e32 <__udivmoddi4+0x276>
 8000e2e:	4589      	cmp	r9, r1
 8000e30:	d81f      	bhi.n	8000e72 <__udivmoddi4+0x2b6>
 8000e32:	eba1 0109 	sub.w	r1, r1, r9
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fb09 f804 	mul.w	r8, r9, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	b292      	uxth	r2, r2
 8000e44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e48:	4542      	cmp	r2, r8
 8000e4a:	d229      	bcs.n	8000ea0 <__udivmoddi4+0x2e4>
 8000e4c:	18ba      	adds	r2, r7, r2
 8000e4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e52:	d2c4      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d2c2      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e58:	f1a9 0102 	sub.w	r1, r9, #2
 8000e5c:	443a      	add	r2, r7
 8000e5e:	e7be      	b.n	8000dde <__udivmoddi4+0x222>
 8000e60:	45f0      	cmp	r8, lr
 8000e62:	d29d      	bcs.n	8000da0 <__udivmoddi4+0x1e4>
 8000e64:	ebbe 0302 	subs.w	r3, lr, r2
 8000e68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	46e1      	mov	r9, ip
 8000e70:	e796      	b.n	8000da0 <__udivmoddi4+0x1e4>
 8000e72:	eba7 0909 	sub.w	r9, r7, r9
 8000e76:	4449      	add	r1, r9
 8000e78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e80:	fb09 f804 	mul.w	r8, r9, r4
 8000e84:	e7db      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e86:	4673      	mov	r3, lr
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1ce>
 8000e8a:	4650      	mov	r0, sl
 8000e8c:	e766      	b.n	8000d5c <__udivmoddi4+0x1a0>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e6fd      	b.n	8000c8e <__udivmoddi4+0xd2>
 8000e92:	443b      	add	r3, r7
 8000e94:	3a02      	subs	r2, #2
 8000e96:	e733      	b.n	8000d00 <__udivmoddi4+0x144>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	443b      	add	r3, r7
 8000e9e:	e71c      	b.n	8000cda <__udivmoddi4+0x11e>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x222>
 8000ea4:	eba1 0109 	sub.w	r1, r1, r9
 8000ea8:	46c4      	mov	ip, r8
 8000eaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eae:	fb09 f804 	mul.w	r8, r9, r4
 8000eb2:	e7c4      	b.n	8000e3e <__udivmoddi4+0x282>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <FRAM_WriteBytes>:

/**
  * @brief Ghi một mảng byte vào FRAM từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_WriteBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	817b      	strh	r3, [r7, #10]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000ecc:	897a      	ldrh	r2, [r7, #10]
 8000ece:	893b      	ldrh	r3, [r7, #8]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ed6:	dd01      	ble.n	8000edc <FRAM_WriteBytes+0x24>
      return HAL_ERROR; // Ghi vượt quá giới hạn bộ nhớ
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e00c      	b.n	8000ef6 <FRAM_WriteBytes+0x3e>
  }
  return HAL_I2C_Mem_Write(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000edc:	897a      	ldrh	r2, [r7, #10]
 8000ede:	2364      	movs	r3, #100	@ 0x64
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	893b      	ldrh	r3, [r7, #8]
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2310      	movs	r3, #16
 8000eec:	21a0      	movs	r1, #160	@ 0xa0
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f004 fb52 	bl	8005598 <HAL_I2C_Mem_Write>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <FRAM_ReadBytes>:

/**
  * @brief Đọc một mảng byte từ FRAM bắt đầu từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_ReadBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b088      	sub	sp, #32
 8000f02:	af04      	add	r7, sp, #16
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	817b      	strh	r3, [r7, #10]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000f12:	897a      	ldrh	r2, [r7, #10]
 8000f14:	893b      	ldrh	r3, [r7, #8]
 8000f16:	4413      	add	r3, r2
 8000f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f1c:	dd01      	ble.n	8000f22 <FRAM_ReadBytes+0x24>
      return HAL_ERROR; // Đọc vượt quá giới hạn bộ nhớ
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00c      	b.n	8000f3c <FRAM_ReadBytes+0x3e>
  }
  return HAL_I2C_Mem_Read(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000f22:	897a      	ldrh	r2, [r7, #10]
 8000f24:	2364      	movs	r3, #100	@ 0x64
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	893b      	ldrh	r3, [r7, #8]
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2310      	movs	r3, #16
 8000f32:	21a0      	movs	r1, #160	@ 0xa0
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f004 fc29 	bl	800578c <HAL_I2C_Mem_Read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b0c1      	sub	sp, #260	@ 0x104
 8000f48:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  // Task Box Definitions
  uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8000f4a:	233c      	movs	r3, #60	@ 0x3c
 8000f4c:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
  uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8000f50:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8000f54:	3350      	adds	r3, #80	@ 0x50
 8000f56:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4

  // Initialize task boxes (now global)
  task_boxes[0] = (TaskBox_t){MARGIN, start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-1"};
 8000f5a:	4ba5      	ldr	r3, [pc, #660]	@ (80011f0 <main+0x2ac>)
 8000f5c:	220a      	movs	r2, #10
 8000f5e:	801a      	strh	r2, [r3, #0]
 8000f60:	4aa3      	ldr	r2, [pc, #652]	@ (80011f0 <main+0x2ac>)
 8000f62:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8000f66:	8053      	strh	r3, [r2, #2]
 8000f68:	4ba1      	ldr	r3, [pc, #644]	@ (80011f0 <main+0x2ac>)
 8000f6a:	2269      	movs	r2, #105	@ 0x69
 8000f6c:	809a      	strh	r2, [r3, #4]
 8000f6e:	4ba0      	ldr	r3, [pc, #640]	@ (80011f0 <main+0x2ac>)
 8000f70:	2246      	movs	r2, #70	@ 0x46
 8000f72:	80da      	strh	r2, [r3, #6]
 8000f74:	4b9e      	ldr	r3, [pc, #632]	@ (80011f0 <main+0x2ac>)
 8000f76:	4a9f      	ldr	r2, [pc, #636]	@ (80011f4 <main+0x2b0>)
 8000f78:	609a      	str	r2, [r3, #8]
  task_boxes[1] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-2"};
 8000f7a:	4b9d      	ldr	r3, [pc, #628]	@ (80011f0 <main+0x2ac>)
 8000f7c:	227d      	movs	r2, #125	@ 0x7d
 8000f7e:	819a      	strh	r2, [r3, #12]
 8000f80:	4a9b      	ldr	r2, [pc, #620]	@ (80011f0 <main+0x2ac>)
 8000f82:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8000f86:	81d3      	strh	r3, [r2, #14]
 8000f88:	4b99      	ldr	r3, [pc, #612]	@ (80011f0 <main+0x2ac>)
 8000f8a:	2269      	movs	r2, #105	@ 0x69
 8000f8c:	821a      	strh	r2, [r3, #16]
 8000f8e:	4b98      	ldr	r3, [pc, #608]	@ (80011f0 <main+0x2ac>)
 8000f90:	2246      	movs	r2, #70	@ 0x46
 8000f92:	825a      	strh	r2, [r3, #18]
 8000f94:	4b96      	ldr	r3, [pc, #600]	@ (80011f0 <main+0x2ac>)
 8000f96:	4a98      	ldr	r2, [pc, #608]	@ (80011f8 <main+0x2b4>)
 8000f98:	615a      	str	r2, [r3, #20]
  task_boxes[2] = (TaskBox_t){MARGIN, start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-3"};
 8000f9a:	4b95      	ldr	r3, [pc, #596]	@ (80011f0 <main+0x2ac>)
 8000f9c:	220a      	movs	r2, #10
 8000f9e:	831a      	strh	r2, [r3, #24]
 8000fa0:	4a93      	ldr	r2, [pc, #588]	@ (80011f0 <main+0x2ac>)
 8000fa2:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8000fa6:	8353      	strh	r3, [r2, #26]
 8000fa8:	4b91      	ldr	r3, [pc, #580]	@ (80011f0 <main+0x2ac>)
 8000faa:	2269      	movs	r2, #105	@ 0x69
 8000fac:	839a      	strh	r2, [r3, #28]
 8000fae:	4b90      	ldr	r3, [pc, #576]	@ (80011f0 <main+0x2ac>)
 8000fb0:	2246      	movs	r2, #70	@ 0x46
 8000fb2:	83da      	strh	r2, [r3, #30]
 8000fb4:	4b8e      	ldr	r3, [pc, #568]	@ (80011f0 <main+0x2ac>)
 8000fb6:	4a91      	ldr	r2, [pc, #580]	@ (80011fc <main+0x2b8>)
 8000fb8:	621a      	str	r2, [r3, #32]
  task_boxes[3] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-4"};
 8000fba:	4b8d      	ldr	r3, [pc, #564]	@ (80011f0 <main+0x2ac>)
 8000fbc:	227d      	movs	r2, #125	@ 0x7d
 8000fbe:	849a      	strh	r2, [r3, #36]	@ 0x24
 8000fc0:	4a8b      	ldr	r2, [pc, #556]	@ (80011f0 <main+0x2ac>)
 8000fc2:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8000fc6:	84d3      	strh	r3, [r2, #38]	@ 0x26
 8000fc8:	4b89      	ldr	r3, [pc, #548]	@ (80011f0 <main+0x2ac>)
 8000fca:	2269      	movs	r2, #105	@ 0x69
 8000fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000fce:	4b88      	ldr	r3, [pc, #544]	@ (80011f0 <main+0x2ac>)
 8000fd0:	2246      	movs	r2, #70	@ 0x46
 8000fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8000fd4:	4b86      	ldr	r3, [pc, #536]	@ (80011f0 <main+0x2ac>)
 8000fd6:	4a8a      	ldr	r2, [pc, #552]	@ (8001200 <main+0x2bc>)
 8000fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  num_tasks = 4; // Set global count
 8000fda:	4b8a      	ldr	r3, [pc, #552]	@ (8001204 <main+0x2c0>)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	601a      	str	r2, [r3, #0]
  Coordinate rawPoint, displayPoint;

  // Define the Back Button Box (now global)
  back_button_box = (TaskBox_t){
      (uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES),              // x: same margin as tasks
      (uint16_t)(start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING), // y: towards the bottom
 8000fe0:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8000fe4:	335a      	adds	r3, #90	@ 0x5a
 8000fe6:	b29a      	uxth	r2, r3
  back_button_box = (TaskBox_t){
 8000fe8:	4b87      	ldr	r3, [pc, #540]	@ (8001208 <main+0x2c4>)
 8000fea:	217d      	movs	r1, #125	@ 0x7d
 8000fec:	8019      	strh	r1, [r3, #0]
 8000fee:	4b86      	ldr	r3, [pc, #536]	@ (8001208 <main+0x2c4>)
 8000ff0:	805a      	strh	r2, [r3, #2]
 8000ff2:	4b85      	ldr	r3, [pc, #532]	@ (8001208 <main+0x2c4>)
 8000ff4:	225a      	movs	r2, #90	@ 0x5a
 8000ff6:	809a      	strh	r2, [r3, #4]
 8000ff8:	4b83      	ldr	r3, [pc, #524]	@ (8001208 <main+0x2c4>)
 8000ffa:	222d      	movs	r2, #45	@ 0x2d
 8000ffc:	80da      	strh	r2, [r3, #6]
 8000ffe:	4b82      	ldr	r3, [pc, #520]	@ (8001208 <main+0x2c4>)
 8001000:	4a82      	ldr	r2, [pc, #520]	@ (800120c <main+0x2c8>)
 8001002:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f002 fafe 	bl	8003604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f9e2 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f000 fb92 	bl	8001734 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001010:	f000 fb5a 	bl	80016c8 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001014:	f000 fb08 	bl	8001628 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001018:	f000 fb34 	bl	8001684 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800101c:	f009 fef6 	bl	800ae0c <MX_FATFS_Init>
  MX_ADC1_Init();
 8001020:	f000 fa3e 	bl	80014a0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001024:	f000 fa8e 	bl	8001544 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001028:	f000 fac2 	bl	80015b0 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  // Bật backlight trước khi khởi tạo LCD
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2140      	movs	r1, #64	@ 0x40
 8001030:	4877      	ldr	r0, [pc, #476]	@ (8001210 <main+0x2cc>)
 8001032:	f004 f90b 	bl	800524c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001036:	2064      	movs	r0, #100	@ 0x64
 8001038:	f002 fb56 	bl	80036e8 <HAL_Delay>
  //   Error_Handler();
  // }

  // Cấu hình filter cho CAN2
  CAN_FilterTypeDef sFilterConfig2;
  sFilterConfig2.FilterBank = 14; // CAN2 sử dụng từ bank 14-27
 800103c:	230e      	movs	r3, #14
 800103e:	653b      	str	r3, [r7, #80]	@ 0x50
  sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8001040:	2300      	movs	r3, #0
 8001042:	657b      	str	r3, [r7, #84]	@ 0x54
  sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001044:	2301      	movs	r3, #1
 8001046:	65bb      	str	r3, [r7, #88]	@ 0x58
  sFilterConfig2.FilterIdHigh = 0x0000;
 8001048:	2300      	movs	r3, #0
 800104a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sFilterConfig2.FilterIdLow = 0x0000;
 800104c:	2300      	movs	r3, #0
 800104e:	643b      	str	r3, [r7, #64]	@ 0x40
  sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8001050:	2300      	movs	r3, #0
 8001052:	647b      	str	r3, [r7, #68]	@ 0x44
  sFilterConfig2.FilterMaskIdLow = 0x0000;
 8001054:	2300      	movs	r3, #0
 8001056:	64bb      	str	r3, [r7, #72]	@ 0x48
  sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001058:	2300      	movs	r3, #0
 800105a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sFilterConfig2.FilterActivation = ENABLE;
 800105c:	2301      	movs	r3, #1
 800105e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // Không cần đặt SlaveStartFilterBank ở đây

  if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8001060:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001064:	4619      	mov	r1, r3
 8001066:	486b      	ldr	r0, [pc, #428]	@ (8001214 <main+0x2d0>)
 8001068:	f003 f85e 	bl	8004128 <HAL_CAN_ConfigFilter>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <main+0x132>
  {
    Error_Handler();
 8001072:	f000 fd59 	bl	8001b28 <Error_Handler>
  }

  // Khởi động CAN1 và CAN2
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001076:	4868      	ldr	r0, [pc, #416]	@ (8001218 <main+0x2d4>)
 8001078:	f003 f934 	bl	80042e4 <HAL_CAN_Start>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <main+0x142>
  {
    Error_Handler();
 8001082:	f000 fd51 	bl	8001b28 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8001086:	4863      	ldr	r0, [pc, #396]	@ (8001214 <main+0x2d0>)
 8001088:	f003 f92c 	bl	80042e4 <HAL_CAN_Start>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <main+0x152>
  {
    Error_Handler();
 8001092:	f000 fd49 	bl	8001b28 <Error_Handler>
  }

  // Kích hoạt thông báo ngắt cho CAN2 RX FIFO0
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001096:	2102      	movs	r1, #2
 8001098:	485e      	ldr	r0, [pc, #376]	@ (8001214 <main+0x2d0>)
 800109a:	f003 fb59 	bl	8004750 <HAL_CAN_ActivateNotification>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <main+0x164>
  {
    Error_Handler();
 80010a4:	f000 fd40 	bl	8001b28 <Error_Handler>
  }

  // Cấu hình thông điệp gửi từ CAN1
  TxHeader1.StdId = 0x124;
 80010a8:	4b5c      	ldr	r3, [pc, #368]	@ (800121c <main+0x2d8>)
 80010aa:	f44f 7292 	mov.w	r2, #292	@ 0x124
 80010ae:	601a      	str	r2, [r3, #0]
  TxHeader1.ExtId = 0x00;
 80010b0:	4b5a      	ldr	r3, [pc, #360]	@ (800121c <main+0x2d8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  TxHeader1.RTR = CAN_RTR_DATA;
 80010b6:	4b59      	ldr	r3, [pc, #356]	@ (800121c <main+0x2d8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  TxHeader1.IDE = CAN_ID_STD;
 80010bc:	4b57      	ldr	r3, [pc, #348]	@ (800121c <main+0x2d8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  TxHeader1.DLC = 2;
 80010c2:	4b56      	ldr	r3, [pc, #344]	@ (800121c <main+0x2d8>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	611a      	str	r2, [r3, #16]
  TxHeader1.TransmitGlobalTime = DISABLE;
 80010c8:	4b54      	ldr	r3, [pc, #336]	@ (800121c <main+0x2d8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	751a      	strb	r2, [r3, #20]

  // Khởi tạo LCD và Touch
  // disable touch interrupt
  HAL_NVIC_DisableIRQ(EXTI4_IRQn); // Tắt ngắt trước khi khởi tạo
 80010ce:	200a      	movs	r0, #10
 80010d0:	f003 febd 	bl	8004e4e <HAL_NVIC_DisableIRQ>

  Manual_LCD_Init();
 80010d4:	f000 fdfa 	bl	8001ccc <Manual_LCD_Init>
  Manual_Touch_Init(&hspi1);
 80010d8:	4851      	ldr	r0, [pc, #324]	@ (8001220 <main+0x2dc>)
 80010da:	f001 fcb5 	bl	8002a48 <Manual_Touch_Init>
  Manual_LCD_DrawLayout(); // This function should draw the tasks and the back button
 80010de:	f001 fa1f 	bl	8002520 <Manual_LCD_DrawLayout>

  if (SD_Init())
 80010e2:	f001 fdb3 	bl	8002c4c <SD_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d012      	beq.n	8001112 <main+0x1ce>
  {
    // Tạo file team9.txt
    if (SD_CreateTeamFile())
 80010ec:	f001 fe50 	bl	8002d90 <SD_CreateTeamFile>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <main+0x1c0>
    {
      sprintf(info_text_buffer, "SD OK, File created");
 80010f6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80010fa:	494a      	ldr	r1, [pc, #296]	@ (8001224 <main+0x2e0>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00c fb47 	bl	800d790 <siprintf>
 8001102:	e00c      	b.n	800111e <main+0x1da>
    }
    else
    {
      sprintf(info_text_buffer, "SD OK, File error");
 8001104:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001108:	4947      	ldr	r1, [pc, #284]	@ (8001228 <main+0x2e4>)
 800110a:	4618      	mov	r0, r3
 800110c:	f00c fb40 	bl	800d790 <siprintf>
 8001110:	e005      	b.n	800111e <main+0x1da>
    }
  }
  else
  {
    sprintf(info_text_buffer, "SD Init Failed");
 8001112:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001116:	4945      	ldr	r1, [pc, #276]	@ (800122c <main+0x2e8>)
 8001118:	4618      	mov	r0, r3
 800111a:	f00c fb39 	bl	800d790 <siprintf>
  }

  Manual_LCD_UpdateInfoText(info_text_buffer);
 800111e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fb90 	bl	8002848 <Manual_LCD_UpdateInfoText>

  __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 8001128:	4b41      	ldr	r3, [pc, #260]	@ (8001230 <main+0x2ec>)
 800112a:	2210      	movs	r2, #16
 800112c:	615a      	str	r2, [r3, #20]

  HAL_NVIC_EnableIRQ(EXTI4_IRQn); // Enable touch interrupt
 800112e:	200a      	movs	r0, #10
 8001130:	f003 fe7f 	bl	8004e32 <HAL_NVIC_EnableIRQ>
  //   }

  while (1)
  {
    /* USER CODE END WHILE */
    if (current_task == 0)
 8001134:	4b3f      	ldr	r3, [pc, #252]	@ (8001234 <main+0x2f0>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <main+0x208>
    {
      // Task 02-1: Blink LED
      Task2_LedBlink(GPIOB, GPIO_PIN_1, BLINK_SPEED_1000_MS);
 800113e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001142:	2102      	movs	r1, #2
 8001144:	4832      	ldr	r0, [pc, #200]	@ (8001210 <main+0x2cc>)
 8001146:	f002 f99d 	bl	8003484 <Task2_LedBlink>
 800114a:	e7f3      	b.n	8001134 <main+0x1f0>
    }
    else if (current_task == 1)
 800114c:	4b39      	ldr	r3, [pc, #228]	@ (8001234 <main+0x2f0>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d17c      	bne.n	8001250 <main+0x30c>
    {
      // Task 02-2: Blink LED
      char temp_display_str[50];
      uint8_t current_temp_c = (uint8_t)Read_Internal_Temperature();
 8001156:	f002 f9a9 	bl	80034ac <Read_Internal_Temperature>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001162:	edc7 7a01 	vstr	s15, [r7, #4]
 8001166:	793b      	ldrb	r3, [r7, #4]
 8001168:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
      uint8_t temp_to_send = current_temp_c;
 800116c:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
 8001170:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1
      TxData1[0] = GROUP_NUMBER;
 8001174:	4b30      	ldr	r3, [pc, #192]	@ (8001238 <main+0x2f4>)
 8001176:	2209      	movs	r2, #9
 8001178:	701a      	strb	r2, [r3, #0]
      TxData1[1] = temp_to_send;
 800117a:	4a2f      	ldr	r2, [pc, #188]	@ (8001238 <main+0x2f4>)
 800117c:	f897 30f1 	ldrb.w	r3, [r7, #241]	@ 0xf1
 8001180:	7053      	strb	r3, [r2, #1]
      HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox1);
 8001182:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <main+0x2f8>)
 8001184:	4a2c      	ldr	r2, [pc, #176]	@ (8001238 <main+0x2f4>)
 8001186:	4925      	ldr	r1, [pc, #148]	@ (800121c <main+0x2d8>)
 8001188:	4823      	ldr	r0, [pc, #140]	@ (8001218 <main+0x2d4>)
 800118a:	f003 f8ef 	bl	800436c <HAL_CAN_AddTxMessage>
      while (!can2_received_data_flag)
 800118e:	e002      	b.n	8001196 <main+0x252>
      {
        HAL_Delay(10);
 8001190:	200a      	movs	r0, #10
 8001192:	f002 faa9 	bl	80036e8 <HAL_Delay>
      while (!can2_received_data_flag)
 8001196:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <main+0x2fc>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f7      	beq.n	8001190 <main+0x24c>
      }
      can2_received_data_flag = 0; // Reset the flag for the next message
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <main+0x2fc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
      sprintf(temp_display_str, "Group: %d, temp: %d *C", can2_received_group, can2_received_temperature);
 80011a6:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <main+0x300>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461c      	mov	r4, r3
 80011ae:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <main+0x304>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9d8 	bl	8000568 <__aeabi_f2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	f107 0008 	add.w	r0, r7, #8
 80011c0:	e9cd 2300 	strd	r2, r3, [sp]
 80011c4:	4622      	mov	r2, r4
 80011c6:	4921      	ldr	r1, [pc, #132]	@ (800124c <main+0x308>)
 80011c8:	f00c fae2 	bl	800d790 <siprintf>
      // sprintf(temp_display_str, "Group: %d, temp: %d *C", GROUP_NUMBER, temp_to_send);
      strcpy(info_text_buffer, temp_display_str);
 80011cc:	f107 0208 	add.w	r2, r7, #8
 80011d0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00c fb30 	bl	800d83c <strcpy>
      Manual_LCD_UpdateInfoText(info_text_buffer);
 80011dc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fb31 	bl	8002848 <Manual_LCD_UpdateInfoText>
      HAL_Delay(500); // Delay to avoid flooding the CAN bus
 80011e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ea:	f002 fa7d 	bl	80036e8 <HAL_Delay>
 80011ee:	e7a1      	b.n	8001134 <main+0x1f0>
 80011f0:	2000047c 	.word	0x2000047c
 80011f4:	0800e0f8 	.word	0x0800e0f8
 80011f8:	0800e104 	.word	0x0800e104
 80011fc:	0800e110 	.word	0x0800e110
 8001200:	0800e11c 	.word	0x0800e11c
 8001204:	20000518 	.word	0x20000518
 8001208:	20000710 	.word	0x20000710
 800120c:	0800e128 	.word	0x0800e128
 8001210:	40020400 	.word	0x40020400
 8001214:	200005a4 	.word	0x200005a4
 8001218:	200006e8 	.word	0x200006e8
 800121c:	20000500 	.word	0x20000500
 8001220:	2000068c 	.word	0x2000068c
 8001224:	0800e130 	.word	0x0800e130
 8001228:	0800e144 	.word	0x0800e144
 800122c:	0800e158 	.word	0x0800e158
 8001230:	40013c00 	.word	0x40013c00
 8001234:	20000000 	.word	0x20000000
 8001238:	2000051c 	.word	0x2000051c
 800123c:	200006e4 	.word	0x200006e4
 8001240:	2000007c 	.word	0x2000007c
 8001244:	200005fe 	.word	0x200005fe
 8001248:	20000688 	.word	0x20000688
 800124c:	0800e168 	.word	0x0800e168
    }
    else if (current_task == 2)
 8001250:	4b53      	ldr	r3, [pc, #332]	@ (80013a0 <main+0x45c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d166      	bne.n	8001328 <main+0x3e4>
    {
      byte_read = SD_ReadTeamFile(read_data, sizeof(read_data));
 800125a:	2132      	movs	r1, #50	@ 0x32
 800125c:	4851      	ldr	r0, [pc, #324]	@ (80013a4 <main+0x460>)
 800125e:	f001 fe35 	bl	8002ecc <SD_ReadTeamFile>
 8001262:	4603      	mov	r3, r0
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b50      	ldr	r3, [pc, #320]	@ (80013a8 <main+0x464>)
 8001268:	701a      	strb	r2, [r3, #0]

      if (byte_read > 0)
 800126a:	4b4f      	ldr	r3, [pc, #316]	@ (80013a8 <main+0x464>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00c      	beq.n	800128c <main+0x348>
      {
        // Đọc thành công, hiển thị nội dung
        sprintf(info_text_buffer, "SD content: %s", read_data);
 8001272:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001276:	4a4b      	ldr	r2, [pc, #300]	@ (80013a4 <main+0x460>)
 8001278:	494c      	ldr	r1, [pc, #304]	@ (80013ac <main+0x468>)
 800127a:	4618      	mov	r0, r3
 800127c:	f00c fa88 	bl	800d790 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 8001280:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fadf 	bl	8002848 <Manual_LCD_UpdateInfoText>
 800128a:	e048      	b.n	800131e <main+0x3da>
      }
      else
      {
        // Đọc thất bại
        sprintf(info_text_buffer, "Read error (%d)", byte_read);
 800128c:	4b46      	ldr	r3, [pc, #280]	@ (80013a8 <main+0x464>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001296:	4946      	ldr	r1, [pc, #280]	@ (80013b0 <main+0x46c>)
 8001298:	4618      	mov	r0, r3
 800129a:	f00c fa79 	bl	800d790 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 800129e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fad0 	bl	8002848 <Manual_LCD_UpdateInfoText>

        // Thử khởi tạo lại SD trong trường hợp bị ngắt kết nối
        if (SD_Init())
 80012a8:	f001 fcd0 	bl	8002c4c <SD_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d035      	beq.n	800131e <main+0x3da>
        {
          sprintf(info_text_buffer, "SD reinitialized");
 80012b2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012b6:	493f      	ldr	r1, [pc, #252]	@ (80013b4 <main+0x470>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00c fa69 	bl	800d790 <siprintf>
          Manual_LCD_UpdateInfoText(info_text_buffer);
 80012be:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fac0 	bl	8002848 <Manual_LCD_UpdateInfoText>
          HAL_Delay(1000);
 80012c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012cc:	f002 fa0c 	bl	80036e8 <HAL_Delay>

          // Thử đọc lại
          byte_read = SD_ReadTeamFile(read_data, sizeof(read_data));
 80012d0:	2132      	movs	r1, #50	@ 0x32
 80012d2:	4834      	ldr	r0, [pc, #208]	@ (80013a4 <main+0x460>)
 80012d4:	f001 fdfa 	bl	8002ecc <SD_ReadTeamFile>
 80012d8:	4603      	mov	r3, r0
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <main+0x464>)
 80012de:	701a      	strb	r2, [r3, #0]
          if (byte_read > 0)
 80012e0:	4b31      	ldr	r3, [pc, #196]	@ (80013a8 <main+0x464>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00c      	beq.n	8001302 <main+0x3be>
          {
            sprintf(info_text_buffer, "Content: %s", read_data);
 80012e8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012ec:	4a2d      	ldr	r2, [pc, #180]	@ (80013a4 <main+0x460>)
 80012ee:	4932      	ldr	r1, [pc, #200]	@ (80013b8 <main+0x474>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00c fa4d 	bl	800d790 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer);
 80012f6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 faa4 	bl	8002848 <Manual_LCD_UpdateInfoText>
 8001300:	e00d      	b.n	800131e <main+0x3da>
          }
          else
          {
            sprintf(info_text_buffer, "Still error (%d)", byte_read);
 8001302:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <main+0x464>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800130c:	492b      	ldr	r1, [pc, #172]	@ (80013bc <main+0x478>)
 800130e:	4618      	mov	r0, r3
 8001310:	f00c fa3e 	bl	800d790 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer);
 8001314:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fa95 	bl	8002848 <Manual_LCD_UpdateInfoText>
          }
        }
      }

      HAL_Delay(500); // Delay to avoid flooding the LCD
 800131e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001322:	f002 f9e1 	bl	80036e8 <HAL_Delay>
 8001326:	e705      	b.n	8001134 <main+0x1f0>
    }
    else if (current_task == 3)
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <main+0x45c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b03      	cmp	r3, #3
 8001330:	f47f af00 	bne.w	8001134 <main+0x1f0>
    {
      // Task 02-4: Read temperature from FRAM
      uint8_t read_value = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      // Đọc nhiệt độ từ FRAM
      GPIO_PinState prev_btn_state = current_button_state;
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <main+0x47c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3

      CheckUserButtonAndSaveTemp(&current_button_state);
 8001342:	481f      	ldr	r0, [pc, #124]	@ (80013c0 <main+0x47c>)
 8001344:	f002 f8fa 	bl	800353c <CheckUserButtonAndSaveTemp>
      // Kiểm tra trạng thái nút và ghi nhiệt độ vào FRAM
      if (current_button_state == GPIO_PIN_SET && prev_btn_state == GPIO_PIN_RESET)
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <main+0x47c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d123      	bne.n	8001398 <main+0x454>
 8001350:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d11f      	bne.n	8001398 <main+0x454>
      {
        // Nút vừa được nhấn xuống
        if (FRAM_ReadBytes(&hi2c2, USER_TEMP_ADDR, &read_value, 1) == HAL_OK)
 8001358:	f107 023b 	add.w	r2, r7, #59	@ 0x3b
 800135c:	2301      	movs	r3, #1
 800135e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001362:	4818      	ldr	r0, [pc, #96]	@ (80013c4 <main+0x480>)
 8001364:	f7ff fdcb 	bl	8000efe <FRAM_ReadBytes>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <main+0x43e>
        {
          sprintf(info_text_buffer, "FRAM Read OK: %d", read_value);
 800136e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001372:	461a      	mov	r2, r3
 8001374:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001378:	4913      	ldr	r1, [pc, #76]	@ (80013c8 <main+0x484>)
 800137a:	4618      	mov	r0, r3
 800137c:	f00c fa08 	bl	800d790 <siprintf>
 8001380:	e005      	b.n	800138e <main+0x44a>
        }
        else
        {
          sprintf(info_text_buffer, "FRAM Read ERROR");
 8001382:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001386:	4911      	ldr	r1, [pc, #68]	@ (80013cc <main+0x488>)
 8001388:	4618      	mov	r0, r3
 800138a:	f00c fa01 	bl	800d790 <siprintf>
        }
        Manual_LCD_UpdateInfoText(info_text_buffer);
 800138e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fa58 	bl	8002848 <Manual_LCD_UpdateInfoText>
      }

      HAL_Delay(10); // Delay to avoid flooding the LCD
 8001398:	200a      	movs	r0, #10
 800139a:	f002 f9a5 	bl	80036e8 <HAL_Delay>
    if (current_task == 0)
 800139e:	e6c9      	b.n	8001134 <main+0x1f0>
 80013a0:	20000000 	.word	0x20000000
 80013a4:	200005cc 	.word	0x200005cc
 80013a8:	20000684 	.word	0x20000684
 80013ac:	0800e180 	.word	0x0800e180
 80013b0:	0800e190 	.word	0x0800e190
 80013b4:	0800e1a0 	.word	0x0800e1a0
 80013b8:	0800e1b4 	.word	0x0800e1b4
 80013bc:	0800e1c0 	.word	0x0800e1c0
 80013c0:	2000007d 	.word	0x2000007d
 80013c4:	200004ac 	.word	0x200004ac
 80013c8:	0800e1d4 	.word	0x0800e1d4
 80013cc:	0800e1e8 	.word	0x0800e1e8

080013d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	@ 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2230      	movs	r2, #48	@ 0x30
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f00c f9f8 	bl	800d7d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <SystemClock_Config+0xc8>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	4a26      	ldr	r2, [pc, #152]	@ (8001498 <SystemClock_Config+0xc8>)
 80013fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	@ 0x40
 8001404:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <SystemClock_Config+0xc8>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	4b21      	ldr	r3, [pc, #132]	@ (800149c <SystemClock_Config+0xcc>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a20      	ldr	r2, [pc, #128]	@ (800149c <SystemClock_Config+0xcc>)
 800141a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <SystemClock_Config+0xcc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800142c:	2301      	movs	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001440:	2319      	movs	r3, #25
 8001442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001444:	2390      	movs	r3, #144	@ 0x90
 8001446:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800144c:	2304      	movs	r3, #4
 800144e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	4618      	mov	r0, r3
 8001456:	f006 fb5d 	bl	8007b14 <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001460:	f000 fb62 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001464:	230f      	movs	r3, #15
 8001466:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001468:	2302      	movs	r3, #2
 800146a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001470:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001474:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2102      	movs	r1, #2
 8001480:	4618      	mov	r0, r3
 8001482:	f006 fdbf 	bl	8008004 <HAL_RCC_ClockConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800148c:	f000 fb4c 	bl	8001b28 <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	3750      	adds	r7, #80	@ 0x50
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014b4:	4a21      	ldr	r2, [pc, #132]	@ (800153c <MX_ADC1_Init+0x9c>)
 80014b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014be:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014da:	2200      	movs	r2, #0
 80014dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014e0:	4a17      	ldr	r2, [pc, #92]	@ (8001540 <MX_ADC1_Init+0xa0>)
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014ea:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014f0:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <MX_ADC1_Init+0x98>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014fe:	480e      	ldr	r0, [pc, #56]	@ (8001538 <MX_ADC1_Init+0x98>)
 8001500:	f002 f916 	bl	8003730 <HAL_ADC_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 fb0d 	bl	8001b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800150e:	2310      	movs	r3, #16
 8001510:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001512:	2301      	movs	r3, #1
 8001514:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	@ (8001538 <MX_ADC1_Init+0x98>)
 8001520:	f002 fae8 	bl	8003af4 <HAL_ADC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800152a:	f000 fafd 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000055c 	.word	0x2000055c
 800153c:	40012000 	.word	0x40012000
 8001540:	0f000001 	.word	0x0f000001

08001544 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <MX_CAN1_Init+0x64>)
 800154a:	4a18      	ldr	r2, [pc, #96]	@ (80015ac <MX_CAN1_Init+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 72;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_CAN1_Init+0x64>)
 8001550:	2248      	movs	r2, #72	@ 0x48
 8001552:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <MX_CAN1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <MX_CAN1_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_CAN1_Init+0x64>)
 8001562:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001566:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <MX_CAN1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_CAN1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_CAN1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <MX_CAN1_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_CAN1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <MX_CAN1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_CAN1_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_CAN1_Init+0x64>)
 8001594:	f002 fccc 	bl	8003f30 <HAL_CAN_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800159e:	f000 fac3 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200006e8 	.word	0x200006e8
 80015ac:	40006400 	.word	0x40006400

080015b0 <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <MX_CAN2_Init+0x74>)
 80015b8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015bc:	2210      	movs	r2, #16
 80015be:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80015c0:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015da:	2200      	movs	r2, #0
 80015dc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015fc:	4808      	ldr	r0, [pc, #32]	@ (8001620 <MX_CAN2_Init+0x70>)
 80015fe:	f002 fc97 	bl	8003f30 <HAL_CAN_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001608:	f000 fa8e 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2040      	movs	r0, #64	@ 0x40
 8001612:	f003 fbf2 	bl	8004dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001616:	2040      	movs	r0, #64	@ 0x40
 8001618:	f003 fc0b 	bl	8004e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN2_Init 2 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200005a4 	.word	0x200005a4
 8001624:	40006800 	.word	0x40006800

08001628 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <MX_I2C2_Init+0x50>)
 800162e:	4a13      	ldr	r2, [pc, #76]	@ (800167c <MX_I2C2_Init+0x54>)
 8001630:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_I2C2_Init+0x50>)
 8001634:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <MX_I2C2_Init+0x58>)
 8001636:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <MX_I2C2_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <MX_I2C2_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <MX_I2C2_Init+0x50>)
 8001646:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800164a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800164c:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <MX_I2C2_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <MX_I2C2_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001658:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <MX_I2C2_Init+0x50>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <MX_I2C2_Init+0x50>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	@ (8001678 <MX_I2C2_Init+0x50>)
 8001666:	f003 fe3d 	bl	80052e4 <HAL_I2C_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001670:	f000 fa5a 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200004ac 	.word	0x200004ac
 800167c:	40005800 	.word	0x40005800
 8001680:	000186a0 	.word	0x000186a0

08001684 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <MX_SDIO_SD_Init+0x3c>)
 800168a:	4a0e      	ldr	r2, [pc, #56]	@ (80016c4 <MX_SDIO_SD_Init+0x40>)
 800168c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_SDIO_SD_Init+0x3c>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <MX_SDIO_SD_Init+0x3c>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_SDIO_SD_Init+0x3c>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <MX_SDIO_SD_Init+0x3c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_SDIO_SD_Init+0x3c>)
 80016a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ac:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <MX_SDIO_SD_Init+0x3c>)
 80016b0:	2208      	movs	r2, #8
 80016b2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000600 	.word	0x20000600
 80016c4:	40012c00 	.word	0x40012c00

080016c8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <MX_SPI1_Init+0x64>)
 80016ce:	4a18      	ldr	r2, [pc, #96]	@ (8001730 <MX_SPI1_Init+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d2:	4b16      	ldr	r3, [pc, #88]	@ (800172c <MX_SPI1_Init+0x64>)
 80016d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016da:	4b14      	ldr	r3, [pc, #80]	@ (800172c <MX_SPI1_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <MX_SPI1_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_SPI1_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <MX_SPI1_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_SPI1_Init+0x64>)
 80016f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_SPI1_Init+0x64>)
 80016fc:	2210      	movs	r2, #16
 80016fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <MX_SPI1_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_SPI1_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <MX_SPI1_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_SPI1_Init+0x64>)
 8001714:	220a      	movs	r2, #10
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	@ (800172c <MX_SPI1_Init+0x64>)
 800171a:	f008 f873 	bl	8009804 <HAL_SPI_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001724:	f000 fa00 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000068c 	.word	0x2000068c
 8001730:	40013000 	.word	0x40013000

08001734 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b51      	ldr	r3, [pc, #324]	@ (8001894 <MX_GPIO_Init+0x160>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a50      	ldr	r2, [pc, #320]	@ (8001894 <MX_GPIO_Init+0x160>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b4e      	ldr	r3, [pc, #312]	@ (8001894 <MX_GPIO_Init+0x160>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b4a      	ldr	r3, [pc, #296]	@ (8001894 <MX_GPIO_Init+0x160>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a49      	ldr	r2, [pc, #292]	@ (8001894 <MX_GPIO_Init+0x160>)
 8001770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b47      	ldr	r3, [pc, #284]	@ (8001894 <MX_GPIO_Init+0x160>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b43      	ldr	r3, [pc, #268]	@ (8001894 <MX_GPIO_Init+0x160>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a42      	ldr	r2, [pc, #264]	@ (8001894 <MX_GPIO_Init+0x160>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b40      	ldr	r3, [pc, #256]	@ (8001894 <MX_GPIO_Init+0x160>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001894 <MX_GPIO_Init+0x160>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001894 <MX_GPIO_Init+0x160>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b39      	ldr	r3, [pc, #228]	@ (8001894 <MX_GPIO_Init+0x160>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4b35      	ldr	r3, [pc, #212]	@ (8001894 <MX_GPIO_Init+0x160>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a34      	ldr	r2, [pc, #208]	@ (8001894 <MX_GPIO_Init+0x160>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <MX_GPIO_Init+0x160>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 80017dc:	482e      	ldr	r0, [pc, #184]	@ (8001898 <MX_GPIO_Init+0x164>)
 80017de:	f003 fd35 	bl	800524c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017e8:	482c      	ldr	r0, [pc, #176]	@ (800189c <MX_GPIO_Init+0x168>)
 80017ea:	f003 fd2f 	bl	800524c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4826      	ldr	r0, [pc, #152]	@ (80018a0 <MX_GPIO_Init+0x16c>)
 8001808:	f003 fb6c 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800180c:	2302      	movs	r3, #2
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001814:	2301      	movs	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	481f      	ldr	r0, [pc, #124]	@ (800189c <MX_GPIO_Init+0x168>)
 8001820:	f003 fb60 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin;
 8001824:	f44f 73e3 	mov.w	r3, #454	@ 0x1c6
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4816      	ldr	r0, [pc, #88]	@ (8001898 <MX_GPIO_Init+0x164>)
 800183e:	f003 fb51 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 8001842:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4810      	ldr	r0, [pc, #64]	@ (800189c <MX_GPIO_Init+0x168>)
 800185c:	f003 fb42 	bl	8004ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001860:	2310      	movs	r3, #16
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001864:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4808      	ldr	r0, [pc, #32]	@ (8001898 <MX_GPIO_Init+0x164>)
 8001876:	f003 fb35 	bl	8004ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	200a      	movs	r0, #10
 8001880:	f003 fabb 	bl	8004dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001884:	200a      	movs	r0, #10
 8001886:	f003 fad4 	bl	8004e32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020400 	.word	0x40020400
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020800 	.word	0x40020800

080018a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TP_IRQ_Pin)
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	f040 80e5 	bne.w	8001a80 <HAL_GPIO_EXTI_Callback+0x1dc>
  {

    // Kiểm tra có phải là chạm không
    if (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET)
 80018b6:	2110      	movs	r1, #16
 80018b8:	4873      	ldr	r0, [pc, #460]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80018ba:	f003 fcaf 	bl	800521c <HAL_GPIO_ReadPin>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 80dd 	bne.w	8001a80 <HAL_GPIO_EXTI_Callback+0x1dc>
    {
      Coordinate rawPoint, displayPoint;
      uint8_t old_task = current_task; // Lưu task cũ
 80018c6:	4b71      	ldr	r3, [pc, #452]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x1e8>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	74fb      	strb	r3, [r7, #19]

      if (Manual_Touch_GetRawPoint(&rawPoint))
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 f8cf 	bl	8002a74 <Manual_Touch_GetRawPoint>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80d1 	beq.w	8001a80 <HAL_GPIO_EXTI_Callback+0x1dc>
      {
        Manual_Touch_ApplyCalibration(&displayPoint, &rawPoint);
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 f8db 	bl	8002aa4 <Manual_Touch_ApplyCalibration>

        // Kiểm tra xem có chạm vào task box nào không
        for (int i = 0; i < num_tasks; i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	e04d      	b.n	8001990 <HAL_GPIO_EXTI_Callback+0xec>
        {
          if (displayPoint.x >= task_boxes[i].x &&
 80018f4:	8939      	ldrh	r1, [r7, #8]
 80018f6:	4866      	ldr	r0, [pc, #408]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4403      	add	r3, r0
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	4299      	cmp	r1, r3
 8001908:	d33f      	bcc.n	800198a <HAL_GPIO_EXTI_Callback+0xe6>
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 800190a:	893b      	ldrh	r3, [r7, #8]
 800190c:	4618      	mov	r0, r3
 800190e:	4960      	ldr	r1, [pc, #384]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	461c      	mov	r4, r3
 8001920:	495b      	ldr	r1, [pc, #364]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3304      	adds	r3, #4
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	4423      	add	r3, r4
          if (displayPoint.x >= task_boxes[i].x &&
 8001934:	4298      	cmp	r0, r3
 8001936:	da28      	bge.n	800198a <HAL_GPIO_EXTI_Callback+0xe6>
              displayPoint.y >= task_boxes[i].y &&
 8001938:	8979      	ldrh	r1, [r7, #10]
 800193a:	4855      	ldr	r0, [pc, #340]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4403      	add	r3, r0
 8001948:	3302      	adds	r3, #2
 800194a:	881b      	ldrh	r3, [r3, #0]
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 800194c:	4299      	cmp	r1, r3
 800194e:	d31c      	bcc.n	800198a <HAL_GPIO_EXTI_Callback+0xe6>
              displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 8001950:	897b      	ldrh	r3, [r7, #10]
 8001952:	4618      	mov	r0, r3
 8001954:	494e      	ldr	r1, [pc, #312]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	3302      	adds	r3, #2
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	461c      	mov	r4, r3
 8001968:	4949      	ldr	r1, [pc, #292]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	3306      	adds	r3, #6
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	4423      	add	r3, r4
              displayPoint.y >= task_boxes[i].y &&
 800197c:	4298      	cmp	r0, r3
 800197e:	da04      	bge.n	800198a <HAL_GPIO_EXTI_Callback+0xe6>
          {
            current_task = i; // Đặt current_task thành index của task box
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b41      	ldr	r3, [pc, #260]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001986:	701a      	strb	r2, [r3, #0]
            break;
 8001988:	e007      	b.n	800199a <HAL_GPIO_EXTI_Callback+0xf6>
        for (int i = 0; i < num_tasks; i++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	4b40      	ldr	r3, [pc, #256]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	429a      	cmp	r2, r3
 8001998:	dbac      	blt.n	80018f4 <HAL_GPIO_EXTI_Callback+0x50>
          }
        }

        // Kiểm tra xem có chạm vào nút Back không
        if (displayPoint.x >= back_button_box.x &&
 800199a:	893a      	ldrh	r2, [r7, #8]
 800199c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d31b      	bcc.n	80019dc <HAL_GPIO_EXTI_Callback+0x138>
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 80019a4:	893b      	ldrh	r3, [r7, #8]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80019b0:	889b      	ldrh	r3, [r3, #4]
 80019b2:	440b      	add	r3, r1
        if (displayPoint.x >= back_button_box.x &&
 80019b4:	429a      	cmp	r2, r3
 80019b6:	da11      	bge.n	80019dc <HAL_GPIO_EXTI_Callback+0x138>
            displayPoint.y >= back_button_box.y &&
 80019b8:	897a      	ldrh	r2, [r7, #10]
 80019ba:	4b37      	ldr	r3, [pc, #220]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80019bc:	885b      	ldrh	r3, [r3, #2]
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 80019be:	429a      	cmp	r2, r3
 80019c0:	d30c      	bcc.n	80019dc <HAL_GPIO_EXTI_Callback+0x138>
            displayPoint.y < (back_button_box.y + back_button_box.h))
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80019c8:	885b      	ldrh	r3, [r3, #2]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80019ce:	88db      	ldrh	r3, [r3, #6]
 80019d0:	440b      	add	r3, r1
            displayPoint.y >= back_button_box.y &&
 80019d2:	429a      	cmp	r2, r3
 80019d4:	da02      	bge.n	80019dc <HAL_GPIO_EXTI_Callback+0x138>
        {
          current_task = 4; // Nút Back
 80019d6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x1e8>)
 80019d8:	2204      	movs	r2, #4
 80019da:	701a      	strb	r2, [r3, #0]
        }

        // Nếu task thay đổi, vẽ lại màn hình ngay
        if (old_task != current_task)
 80019dc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x1e8>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	7cfa      	ldrb	r2, [r7, #19]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d04b      	beq.n	8001a80 <HAL_GPIO_EXTI_Callback+0x1dc>
        {
          // Tắt ngắt trước khi vẽ
          HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80019e8:	200a      	movs	r0, #10
 80019ea:	f003 fa30 	bl	8004e4e <HAL_NVIC_DisableIRQ>

          // Xử lý riêng cho các task thông thường và nút back
          if (current_task >= 0 && current_task < num_tasks)
 80019ee:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x1e8>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x1e8>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	da23      	bge.n	8001a4a <HAL_GPIO_EXTI_Callback+0x1a6>
          {
            // Khôi phục màu của task cũ nếu có
            if (old_task >= 0 && old_task < num_tasks)
 8001a02:	7cfa      	ldrb	r2, [r7, #19]
 8001a04:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	da0c      	bge.n	8001a26 <HAL_GPIO_EXTI_Callback+0x182>
            {
              Manual_LCD_RefillTaskBox(task_boxes[old_task].name, COLOR_BLACK);
 8001a0c:	7cfa      	ldrb	r2, [r7, #19]
 8001a0e:	4920      	ldr	r1, [pc, #128]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 ff43 	bl	80028ac <Manual_LCD_RefillTaskBox>
            }

            // Tô màu task mới được chọn
            Manual_LCD_RefillTaskBox(task_boxes[current_task].name, COLOR_MAGENTA);
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4a18      	ldr	r2, [pc, #96]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001a30:	460b      	mov	r3, r1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	440b      	add	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 ff32 	bl	80028ac <Manual_LCD_RefillTaskBox>
 8001a48:	e014      	b.n	8001a74 <HAL_GPIO_EXTI_Callback+0x1d0>
          }
          else if (current_task == 4 && old_task != -1) // Back button
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d10f      	bne.n	8001a74 <HAL_GPIO_EXTI_Callback+0x1d0>
          {
            // Handle back button action here
            Manual_LCD_RefillTaskBox(task_boxes[old_task].name, COLOR_BLACK);
 8001a54:	7cfa      	ldrb	r2, [r7, #19]
 8001a56:	490e      	ldr	r1, [pc, #56]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	3308      	adds	r3, #8
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 ff1f 	bl	80028ac <Manual_LCD_RefillTaskBox>
            current_task = -1; // Reset current task value
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001a70:	22ff      	movs	r2, #255	@ 0xff
 8001a72:	701a      	strb	r2, [r3, #0]
          // hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
          // hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
          // HAL_SPI_Init(&hspi1);

          // Xóa cờ ngắt và bật lại
          __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001a76:	2210      	movs	r2, #16
 8001a78:	615a      	str	r2, [r3, #20]
          HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a7a:	200a      	movs	r0, #10
 8001a7c:	f003 f9d9 	bl	8004e32 <HAL_NVIC_EnableIRQ>
        }
      }
    }
    // __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
  }
}
 8001a80:	bf00      	nop
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	2000047c 	.word	0x2000047c
 8001a94:	20000518 	.word	0x20000518
 8001a98:	20000710 	.word	0x20000710
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if (hcan->Instance == CAN2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a17      	ldr	r2, [pc, #92]	@ (8001b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d127      	bne.n	8001b02 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4816      	ldr	r0, [pc, #88]	@ (8001b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001ab6:	f003 fbe2 	bl	800527e <HAL_GPIO_TogglePin>
    can2_received_data_flag = 1; // Đánh dấu đã nhận dữ liệu
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader2, RxData2) == HAL_OK)
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001ac2:	4a16      	ldr	r2, [pc, #88]	@ (8001b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f002 fd20 	bl	800450c <HAL_CAN_GetRxMessage>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d117      	bne.n	8001b02 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
    {
      // Giải mã dữ liệu nhận được (Tùy chọn, để debug)
      if (RxHeader2.DLC >= 2) // Đảm bảo có đủ dữ liệu
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d913      	bls.n	8001b02 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
      {
        uint8_t received_group = RxData2[0];
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	73fb      	strb	r3, [r7, #15]
        uint8_t received_temperature = RxData2[1];
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	73bb      	strb	r3, [r7, #14]

        // Cập nhật biến toàn cục
        can2_received_group = received_group;
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	7013      	strb	r3, [r2, #0]
        can2_received_temperature = (uint8_t)received_temperature;
 8001aec:	7bbb      	ldrb	r3, [r7, #14]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
        can2_received_data_flag = 1; // Đánh dấu đã nhận dữ liệu
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
        // In ra UART/SWO để kiểm tra (nếu đã cấu hình)
        // printf("CAN2 RX - ID: 0x%lX, Grp: %d, Temp: %.1f C\r\n", RxHeader2.StdId, received_group, received_temperature);
      }
    }
  }
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40006800 	.word	0x40006800
 8001b10:	40020400 	.word	0x40020400
 8001b14:	2000007c 	.word	0x2000007c
 8001b18:	20000478 	.word	0x20000478
 8001b1c:	20000540 	.word	0x20000540
 8001b20:	200005fe 	.word	0x200005fe
 8001b24:	20000688 	.word	0x20000688

08001b28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <Error_Handler+0x8>

08001b34 <LCD_SPI_Send>:
// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001b3e:	1df9      	adds	r1, r7, #7
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	2201      	movs	r2, #1
 8001b46:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <LCD_SPI_Send+0x20>)
 8001b48:	f007 fee5 	bl	8009916 <HAL_SPI_Transmit>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000068c 	.word	0x2000068c

08001b58 <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b68:	480a      	ldr	r0, [pc, #40]	@ (8001b94 <LCD_Write_Cmd+0x3c>)
 8001b6a:	f003 fb6f 	bl	800524c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2180      	movs	r1, #128	@ 0x80
 8001b72:	4808      	ldr	r0, [pc, #32]	@ (8001b94 <LCD_Write_Cmd+0x3c>)
 8001b74:	f003 fb6a 	bl	800524c <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ffda 	bl	8001b34 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001b80:	2201      	movs	r2, #1
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	4803      	ldr	r0, [pc, #12]	@ (8001b94 <LCD_Write_Cmd+0x3c>)
 8001b86:	f003 fb61 	bl	800524c <HAL_GPIO_WritePin>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40020400 	.word	0x40020400

08001b98 <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba8:	480a      	ldr	r0, [pc, #40]	@ (8001bd4 <LCD_Write_Data+0x3c>)
 8001baa:	f003 fb4f 	bl	800524c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2180      	movs	r1, #128	@ 0x80
 8001bb2:	4808      	ldr	r0, [pc, #32]	@ (8001bd4 <LCD_Write_Data+0x3c>)
 8001bb4:	f003 fb4a 	bl	800524c <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ffba 	bl	8001b34 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2180      	movs	r1, #128	@ 0x80
 8001bc4:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <LCD_Write_Data+0x3c>)
 8001bc6:	f003 fb41 	bl	800524c <HAL_GPIO_WritePin>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001be2:	2201      	movs	r2, #1
 8001be4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001be8:	4810      	ldr	r0, [pc, #64]	@ (8001c2c <LCD_Write_Data16+0x54>)
 8001bea:	f003 fb2f 	bl	800524c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2180      	movs	r1, #128	@ 0x80
 8001bf2:	480e      	ldr	r0, [pc, #56]	@ (8001c2c <LCD_Write_Data16+0x54>)
 8001bf4:	f003 fb2a 	bl	800524c <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 8001c08:	f107 010c 	add.w	r1, r7, #12
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	2202      	movs	r2, #2
 8001c12:	4807      	ldr	r0, [pc, #28]	@ (8001c30 <LCD_Write_Data16+0x58>)
 8001c14:	f007 fe7f 	bl	8009916 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2180      	movs	r1, #128	@ 0x80
 8001c1c:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <LCD_Write_Data16+0x54>)
 8001c1e:	f003 fb15 	bl	800524c <HAL_GPIO_WritePin>
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	2000068c 	.word	0x2000068c

08001c34 <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	80fb      	strh	r3, [r7, #6]
 8001c46:	4603      	mov	r3, r0
 8001c48:	80bb      	strh	r3, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	807b      	strh	r3, [r7, #2]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 8001c52:	202a      	movs	r0, #42	@ 0x2a
 8001c54:	f7ff ff80 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff99 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff94 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff8d 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff88 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 8001c88:	202b      	movs	r0, #43	@ 0x2b
 8001c8a:	f7ff ff65 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 8001c8e:	88bb      	ldrh	r3, [r7, #4]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff7e 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff79 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 8001ca6:	883b      	ldrh	r3, [r7, #0]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff72 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 8001cb4:	883b      	ldrh	r3, [r7, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff6d 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 8001cbe:	202c      	movs	r0, #44	@ 0x2c
 8001cc0:	f7ff ff4a 	bl	8001b58 <LCD_Write_Cmd>
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}

08001ccc <Manual_LCD_Init>:
        }
    }
}

void Manual_LCD_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	4889      	ldr	r0, [pc, #548]	@ (8001efc <Manual_LCD_Init+0x230>)
 8001cd6:	f003 fab9 	bl	800524c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001cda:	2064      	movs	r0, #100	@ 0x64
 8001cdc:	f001 fd04 	bl	80036e8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	4885      	ldr	r0, [pc, #532]	@ (8001efc <Manual_LCD_Init+0x230>)
 8001ce6:	f003 fab1 	bl	800524c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001cea:	2064      	movs	r0, #100	@ 0x64
 8001cec:	f001 fcfc 	bl	80036e8 <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2140      	movs	r1, #64	@ 0x40
 8001cf4:	4881      	ldr	r0, [pc, #516]	@ (8001efc <Manual_LCD_Init+0x230>)
 8001cf6:	f003 faa9 	bl	800524c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001cfa:	200a      	movs	r0, #10
 8001cfc:	f001 fcf4 	bl	80036e8 <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 8001d00:	20cf      	movs	r0, #207	@ 0xcf
 8001d02:	f7ff ff29 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff ff46 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001d0c:	20c1      	movs	r0, #193	@ 0xc1
 8001d0e:	f7ff ff43 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8001d12:	2030      	movs	r0, #48	@ 0x30
 8001d14:	f7ff ff40 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 8001d18:	20ed      	movs	r0, #237	@ 0xed
 8001d1a:	f7ff ff1d 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 8001d1e:	2064      	movs	r0, #100	@ 0x64
 8001d20:	f7ff ff3a 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f7ff ff37 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x12);
 8001d2a:	2012      	movs	r0, #18
 8001d2c:	f7ff ff34 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8001d30:	2081      	movs	r0, #129	@ 0x81
 8001d32:	f7ff ff31 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 8001d36:	20e8      	movs	r0, #232	@ 0xe8
 8001d38:	f7ff ff0e 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 8001d3c:	2085      	movs	r0, #133	@ 0x85
 8001d3e:	f7ff ff2b 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff ff28 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8001d48:	2078      	movs	r0, #120	@ 0x78
 8001d4a:	f7ff ff25 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 8001d4e:	20cb      	movs	r0, #203	@ 0xcb
 8001d50:	f7ff ff02 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8001d54:	2039      	movs	r0, #57	@ 0x39
 8001d56:	f7ff ff1f 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 8001d5a:	202c      	movs	r0, #44	@ 0x2c
 8001d5c:	f7ff ff1c 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff ff19 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x34);
 8001d66:	2034      	movs	r0, #52	@ 0x34
 8001d68:	f7ff ff16 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x02);
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f7ff ff13 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 8001d72:	20f7      	movs	r0, #247	@ 0xf7
 8001d74:	f7ff fef0 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 8001d78:	2020      	movs	r0, #32
 8001d7a:	f7ff ff0d 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 8001d7e:	20ea      	movs	r0, #234	@ 0xea
 8001d80:	f7ff feea 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff ff07 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff ff04 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xC0);  // Power Control 1
 8001d90:	20c0      	movs	r0, #192	@ 0xc0
 8001d92:	f7ff fee1 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 8001d96:	2023      	movs	r0, #35	@ 0x23
 8001d98:	f7ff fefe 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xC1);  // Power Control 2
 8001d9c:	20c1      	movs	r0, #193	@ 0xc1
 8001d9e:	f7ff fedb 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 8001da2:	2010      	movs	r0, #16
 8001da4:	f7ff fef8 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xC5);  // VCOM Control 1
 8001da8:	20c5      	movs	r0, #197	@ 0xc5
 8001daa:	f7ff fed5 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 8001dae:	203e      	movs	r0, #62	@ 0x3e
 8001db0:	f7ff fef2 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x28);
 8001db4:	2028      	movs	r0, #40	@ 0x28
 8001db6:	f7ff feef 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xC7);  // VCOM Control 2
 8001dba:	20c7      	movs	r0, #199	@ 0xc7
 8001dbc:	f7ff fecc 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 8001dc0:	2086      	movs	r0, #134	@ 0x86
 8001dc2:	f7ff fee9 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 8001dc6:	2036      	movs	r0, #54	@ 0x36
 8001dc8:	f7ff fec6 	bl	8001b58 <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 8001dcc:	2028      	movs	r0, #40	@ 0x28
 8001dce:	f7ff fee3 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0x3A);  // Pixel Format Set
 8001dd2:	203a      	movs	r0, #58	@ 0x3a
 8001dd4:	f7ff fec0 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 8001dd8:	2055      	movs	r0, #85	@ 0x55
 8001dda:	f7ff fedd 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 8001dde:	20b1      	movs	r0, #177	@ 0xb1
 8001de0:	f7ff feba 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fed7 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x18);
 8001dea:	2018      	movs	r0, #24
 8001dec:	f7ff fed4 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 8001df0:	20b6      	movs	r0, #182	@ 0xb6
 8001df2:	f7ff feb1 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 8001df6:	2008      	movs	r0, #8
 8001df8:	f7ff fece 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x82);
 8001dfc:	2082      	movs	r0, #130	@ 0x82
 8001dfe:	f7ff fecb 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x27);
 8001e02:	2027      	movs	r0, #39	@ 0x27
 8001e04:	f7ff fec8 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xF2);  // Enable 3G
 8001e08:	20f2      	movs	r0, #242	@ 0xf2
 8001e0a:	f7ff fea5 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff fec2 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0x26);  // Gamma Set
 8001e14:	2026      	movs	r0, #38	@ 0x26
 8001e16:	f7ff fe9f 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f7ff febc 	bl	8001b98 <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 8001e20:	20e0      	movs	r0, #224	@ 0xe0
 8001e22:	f7ff fe99 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 8001e26:	200f      	movs	r0, #15
 8001e28:	f7ff feb6 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001e2c:	2031      	movs	r0, #49	@ 0x31
 8001e2e:	f7ff feb3 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 8001e32:	202b      	movs	r0, #43	@ 0x2b
 8001e34:	f7ff feb0 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001e38:	200c      	movs	r0, #12
 8001e3a:	f7ff fead 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001e3e:	200e      	movs	r0, #14
 8001e40:	f7ff feaa 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001e44:	2008      	movs	r0, #8
 8001e46:	f7ff fea7 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 8001e4a:	204e      	movs	r0, #78	@ 0x4e
 8001e4c:	f7ff fea4 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 8001e50:	20f1      	movs	r0, #241	@ 0xf1
 8001e52:	f7ff fea1 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x37);
 8001e56:	2037      	movs	r0, #55	@ 0x37
 8001e58:	f7ff fe9e 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001e5c:	2007      	movs	r0, #7
 8001e5e:	f7ff fe9b 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8001e62:	2010      	movs	r0, #16
 8001e64:	f7ff fe98 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f7ff fe95 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001e6e:	200e      	movs	r0, #14
 8001e70:	f7ff fe92 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x09);
 8001e74:	2009      	movs	r0, #9
 8001e76:	f7ff fe8f 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fe8c 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 8001e80:	20e1      	movs	r0, #225	@ 0xe1
 8001e82:	f7ff fe69 	bl	8001b58 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff fe86 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001e8c:	200e      	movs	r0, #14
 8001e8e:	f7ff fe83 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x14);
 8001e92:	2014      	movs	r0, #20
 8001e94:	f7ff fe80 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f7ff fe7d 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x11);
 8001e9e:	2011      	movs	r0, #17
 8001ea0:	f7ff fe7a 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001ea4:	2007      	movs	r0, #7
 8001ea6:	f7ff fe77 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001eaa:	2031      	movs	r0, #49	@ 0x31
 8001eac:	f7ff fe74 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001eb0:	20c1      	movs	r0, #193	@ 0xc1
 8001eb2:	f7ff fe71 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x48);
 8001eb6:	2048      	movs	r0, #72	@ 0x48
 8001eb8:	f7ff fe6e 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001ebc:	2008      	movs	r0, #8
 8001ebe:	f7ff fe6b 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001ec2:	200f      	movs	r0, #15
 8001ec4:	f7ff fe68 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001ec8:	200c      	movs	r0, #12
 8001eca:	f7ff fe65 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001ece:	2031      	movs	r0, #49	@ 0x31
 8001ed0:	f7ff fe62 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x36);
 8001ed4:	2036      	movs	r0, #54	@ 0x36
 8001ed6:	f7ff fe5f 	bl	8001b98 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001eda:	200f      	movs	r0, #15
 8001edc:	f7ff fe5c 	bl	8001b98 <LCD_Write_Data>

    LCD_Write_Cmd(0x11); // Exit Sleep
 8001ee0:	2011      	movs	r0, #17
 8001ee2:	f7ff fe39 	bl	8001b58 <LCD_Write_Cmd>
    HAL_Delay(120);
 8001ee6:	2078      	movs	r0, #120	@ 0x78
 8001ee8:	f001 fbfe 	bl	80036e8 <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 8001eec:	2029      	movs	r0, #41	@ 0x29
 8001eee:	f7ff fe33 	bl	8001b58 <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f000 f804 	bl	8001f00 <Manual_LCD_Clear>

    // Enable touch interrupt
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40020400 	.word	0x40020400

08001f00 <Manual_LCD_Clear>:

void Manual_LCD_Clear(uint16_t color)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8001f0a:	f240 133f 	movw	r3, #319	@ 0x13f
 8001f0e:	22ef      	movs	r2, #239	@ 0xef
 8001f10:	2100      	movs	r1, #0
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7ff fe8e 	bl	8001c34 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f1e:	4815      	ldr	r0, [pc, #84]	@ (8001f74 <Manual_LCD_Clear+0x74>)
 8001f20:	f003 f994 	bl	800524c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001f24:	2200      	movs	r2, #0
 8001f26:	2180      	movs	r1, #128	@ 0x80
 8001f28:	4812      	ldr	r0, [pc, #72]	@ (8001f74 <Manual_LCD_Clear+0x74>)
 8001f2a:	f003 f98f 	bl	800524c <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	723b      	strb	r3, [r7, #8]
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e00a      	b.n	8001f5a <Manual_LCD_Clear+0x5a>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001f44:	f107 0108 	add.w	r1, r7, #8
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	480a      	ldr	r0, [pc, #40]	@ (8001f78 <Manual_LCD_Clear+0x78>)
 8001f50:	f007 fce1 	bl	8009916 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001f60:	d3f0      	bcc.n	8001f44 <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001f62:	2201      	movs	r2, #1
 8001f64:	2180      	movs	r1, #128	@ 0x80
 8001f66:	4803      	ldr	r0, [pc, #12]	@ (8001f74 <Manual_LCD_Clear+0x74>)
 8001f68:	f003 f970 	bl	800524c <HAL_GPIO_WritePin>
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40020400 	.word	0x40020400
 8001f78:	2000068c 	.word	0x2000068c

08001f7c <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
 8001f86:	460b      	mov	r3, r1
 8001f88:	80bb      	strh	r3, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	2bef      	cmp	r3, #239	@ 0xef
 8001f92:	d80e      	bhi.n	8001fb2 <Manual_LCD_DrawPixel+0x36>
 8001f94:	88bb      	ldrh	r3, [r7, #4]
 8001f96:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001f9a:	d20a      	bcs.n	8001fb2 <Manual_LCD_DrawPixel+0x36>
        return;
    LCD_Set_Address_Window(x, y, x, y);
 8001f9c:	88bb      	ldrh	r3, [r7, #4]
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	88b9      	ldrh	r1, [r7, #4]
 8001fa2:	88f8      	ldrh	r0, [r7, #6]
 8001fa4:	f7ff fe46 	bl	8001c34 <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fe14 	bl	8001bd8 <LCD_Write_Data16>
 8001fb0:	e000      	b.n	8001fb4 <Manual_LCD_DrawPixel+0x38>
        return;
 8001fb2:	bf00      	nop
}
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001fba:	b590      	push	{r4, r7, lr}
 8001fbc:	b087      	sub	sp, #28
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	4608      	mov	r0, r1
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4623      	mov	r3, r4
 8001fca:	80fb      	strh	r3, [r7, #6]
 8001fcc:	4603      	mov	r3, r0
 8001fce:	80bb      	strh	r3, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001fd8:	883a      	ldrh	r2, [r7, #0]
 8001fda:	88bb      	ldrh	r3, [r7, #4]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001fe2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001fe6:	8879      	ldrh	r1, [r7, #2]
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	1acb      	subs	r3, r1, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bfb8      	it	lt
 8001ff0:	425b      	neglt	r3, r3
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	bfcc      	ite	gt
 8001ff6:	2301      	movgt	r3, #1
 8001ff8:	2300      	movle	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	827b      	strh	r3, [r7, #18]
    if (steep)
 8001ffe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <Manual_LCD_DrawLine+0x64>
    {
        uint16_t temp;
        temp = x1;
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 800200a:	88bb      	ldrh	r3, [r7, #4]
 800200c:	80fb      	strh	r3, [r7, #6]
        y1 = temp;
 800200e:	8a3b      	ldrh	r3, [r7, #16]
 8002010:	80bb      	strh	r3, [r7, #4]
        temp = x2;
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	823b      	strh	r3, [r7, #16]
        x2 = y2;
 8002016:	883b      	ldrh	r3, [r7, #0]
 8002018:	807b      	strh	r3, [r7, #2]
        y2 = temp;
 800201a:	8a3b      	ldrh	r3, [r7, #16]
 800201c:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2)
 800201e:	88fa      	ldrh	r2, [r7, #6]
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	429a      	cmp	r2, r3
 8002024:	d90b      	bls.n	800203e <Manual_LCD_DrawLine+0x84>
    {
        uint16_t temp;
        temp = x1;
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	81fb      	strh	r3, [r7, #14]
        x1 = x2;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	80fb      	strh	r3, [r7, #6]
        x2 = temp;
 800202e:	89fb      	ldrh	r3, [r7, #14]
 8002030:	807b      	strh	r3, [r7, #2]
        temp = y1;
 8002032:	88bb      	ldrh	r3, [r7, #4]
 8002034:	81fb      	strh	r3, [r7, #14]
        y1 = y2;
 8002036:	883b      	ldrh	r3, [r7, #0]
 8002038:	80bb      	strh	r3, [r7, #4]
        y2 = temp;
 800203a:	89fb      	ldrh	r3, [r7, #14]
 800203c:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	b29b      	uxth	r3, r3
 8002046:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 8002048:	883a      	ldrh	r2, [r7, #0]
 800204a:	88bb      	ldrh	r3, [r7, #4]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	bfb8      	it	lt
 8002052:	425b      	neglt	r3, r3
 8002054:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 8002056:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800205a:	0fda      	lsrs	r2, r3, #31
 800205c:	4413      	add	r3, r2
 800205e:	105b      	asrs	r3, r3, #1
 8002060:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2)
 8002062:	88ba      	ldrh	r2, [r7, #4]
 8002064:	883b      	ldrh	r3, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d202      	bcs.n	8002070 <Manual_LCD_DrawLine+0xb6>
        ystep = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	82bb      	strh	r3, [r7, #20]
 800206e:	e029      	b.n	80020c4 <Manual_LCD_DrawLine+0x10a>
    else
        ystep = -1;
 8002070:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002074:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++)
 8002076:	e025      	b.n	80020c4 <Manual_LCD_DrawLine+0x10a>
    {
        if (steep)
 8002078:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <Manual_LCD_DrawLine+0xd4>
            Manual_LCD_DrawPixel(y1, x1, color);
 8002080:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002082:	88f9      	ldrh	r1, [r7, #6]
 8002084:	88bb      	ldrh	r3, [r7, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff78 	bl	8001f7c <Manual_LCD_DrawPixel>
 800208c:	e005      	b.n	800209a <Manual_LCD_DrawLine+0xe0>
        else
            Manual_LCD_DrawPixel(x1, y1, color);
 800208e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002090:	88b9      	ldrh	r1, [r7, #4]
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff71 	bl	8001f7c <Manual_LCD_DrawPixel>
        err -= dy;
 800209a:	8afa      	ldrh	r2, [r7, #22]
 800209c:	897b      	ldrh	r3, [r7, #10]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	82fb      	strh	r3, [r7, #22]
        if (err < 0)
 80020a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da08      	bge.n	80020be <Manual_LCD_DrawLine+0x104>
        {
            y1 += ystep;
 80020ac:	8aba      	ldrh	r2, [r7, #20]
 80020ae:	88bb      	ldrh	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80020b4:	8afa      	ldrh	r2, [r7, #22]
 80020b6:	89bb      	ldrh	r3, [r7, #12]
 80020b8:	4413      	add	r3, r2
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++)
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	3301      	adds	r3, #1
 80020c2:	80fb      	strh	r3, [r7, #6]
 80020c4:	88fa      	ldrh	r2, [r7, #6]
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d9d5      	bls.n	8002078 <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}

080020d6 <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b085      	sub	sp, #20
 80020da:	af02      	add	r7, sp, #8
 80020dc:	4604      	mov	r4, r0
 80020de:	4608      	mov	r0, r1
 80020e0:	4611      	mov	r1, r2
 80020e2:	461a      	mov	r2, r3
 80020e4:	4623      	mov	r3, r4
 80020e6:	80fb      	strh	r3, [r7, #6]
 80020e8:	4603      	mov	r3, r0
 80020ea:	80bb      	strh	r3, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	2bef      	cmp	r3, #239	@ 0xef
 80020f8:	d865      	bhi.n	80021c6 <Manual_LCD_DrawRectangle+0xf0>
 80020fa:	88bb      	ldrh	r3, [r7, #4]
 80020fc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002100:	d261      	bcs.n	80021c6 <Manual_LCD_DrawRectangle+0xf0>
        return;
    if ((x + width - 1) >= LCD_WIDTH)
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	4413      	add	r3, r2
 8002108:	2bf0      	cmp	r3, #240	@ 0xf0
 800210a:	dd03      	ble.n	8002114 <Manual_LCD_DrawRectangle+0x3e>
        width = LCD_WIDTH - x;
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002112:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT)
 8002114:	88ba      	ldrh	r2, [r7, #4]
 8002116:	883b      	ldrh	r3, [r7, #0]
 8002118:	4413      	add	r3, r2
 800211a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800211e:	dd03      	ble.n	8002128 <Manual_LCD_DrawRectangle+0x52>
        height = LCD_HEIGHT - y;
 8002120:	88bb      	ldrh	r3, [r7, #4]
 8002122:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002126:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 8002128:	88fa      	ldrh	r2, [r7, #6]
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	4413      	add	r3, r2
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	88bc      	ldrh	r4, [r7, #4]
 8002136:	88b9      	ldrh	r1, [r7, #4]
 8002138:	88f8      	ldrh	r0, [r7, #6]
 800213a:	8b3b      	ldrh	r3, [r7, #24]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4623      	mov	r3, r4
 8002140:	f7ff ff3b 	bl	8001fba <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 8002144:	88ba      	ldrh	r2, [r7, #4]
 8002146:	883b      	ldrh	r3, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b299      	uxth	r1, r3
 8002150:	88fa      	ldrh	r2, [r7, #6]
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	4413      	add	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29c      	uxth	r4, r3
 800215c:	88ba      	ldrh	r2, [r7, #4]
 800215e:	883b      	ldrh	r3, [r7, #0]
 8002160:	4413      	add	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	88f8      	ldrh	r0, [r7, #6]
 800216a:	8b3b      	ldrh	r3, [r7, #24]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	4622      	mov	r2, r4
 8002172:	f7ff ff22 	bl	8001fba <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 8002176:	88ba      	ldrh	r2, [r7, #4]
 8002178:	883b      	ldrh	r3, [r7, #0]
 800217a:	4413      	add	r3, r2
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29c      	uxth	r4, r3
 8002182:	88fa      	ldrh	r2, [r7, #6]
 8002184:	88b9      	ldrh	r1, [r7, #4]
 8002186:	88f8      	ldrh	r0, [r7, #6]
 8002188:	8b3b      	ldrh	r3, [r7, #24]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	4623      	mov	r3, r4
 800218e:	f7ff ff14 	bl	8001fba <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 8002192:	88fa      	ldrh	r2, [r7, #6]
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	4413      	add	r3, r2
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b298      	uxth	r0, r3
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	4413      	add	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29c      	uxth	r4, r3
 80021aa:	88ba      	ldrh	r2, [r7, #4]
 80021ac:	883b      	ldrh	r3, [r7, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	88b9      	ldrh	r1, [r7, #4]
 80021b8:	8b3b      	ldrh	r3, [r7, #24]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	4622      	mov	r2, r4
 80021c0:	f7ff fefb 	bl	8001fba <Manual_LCD_DrawLine>
 80021c4:	e000      	b.n	80021c8 <Manual_LCD_DrawRectangle+0xf2>
        return;
 80021c6:	bf00      	nop
}
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd90      	pop	{r4, r7, pc}
	...

080021d0 <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4604      	mov	r4, r0
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4623      	mov	r3, r4
 80021e0:	80fb      	strh	r3, [r7, #6]
 80021e2:	4603      	mov	r3, r0
 80021e4:	80bb      	strh	r3, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	807b      	strh	r3, [r7, #2]
 80021ea:	4613      	mov	r3, r2
 80021ec:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	2bef      	cmp	r3, #239	@ 0xef
 80021f2:	d855      	bhi.n	80022a0 <Manual_LCD_FillRectangle+0xd0>
 80021f4:	88bb      	ldrh	r3, [r7, #4]
 80021f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80021fa:	d251      	bcs.n	80022a0 <Manual_LCD_FillRectangle+0xd0>
        return;
    if ((x + width) > LCD_WIDTH)
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	4413      	add	r3, r2
 8002202:	2bf0      	cmp	r3, #240	@ 0xf0
 8002204:	dd03      	ble.n	800220e <Manual_LCD_FillRectangle+0x3e>
        width = LCD_WIDTH - x;
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800220c:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT)
 800220e:	88ba      	ldrh	r2, [r7, #4]
 8002210:	883b      	ldrh	r3, [r7, #0]
 8002212:	4413      	add	r3, r2
 8002214:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002218:	dd03      	ble.n	8002222 <Manual_LCD_FillRectangle+0x52>
        height = LCD_HEIGHT - y;
 800221a:	88bb      	ldrh	r3, [r7, #4]
 800221c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002220:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	4413      	add	r3, r2
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29c      	uxth	r4, r3
 800222e:	88ba      	ldrh	r2, [r7, #4]
 8002230:	883b      	ldrh	r3, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29b      	uxth	r3, r3
 800223a:	88b9      	ldrh	r1, [r7, #4]
 800223c:	88f8      	ldrh	r0, [r7, #6]
 800223e:	4622      	mov	r2, r4
 8002240:	f7ff fcf8 	bl	8001c34 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8002244:	2201      	movs	r2, #1
 8002246:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800224a:	4817      	ldr	r0, [pc, #92]	@ (80022a8 <Manual_LCD_FillRectangle+0xd8>)
 800224c:	f002 fffe 	bl	800524c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8002250:	2200      	movs	r2, #0
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	4814      	ldr	r0, [pc, #80]	@ (80022a8 <Manual_LCD_FillRectangle+0xd8>)
 8002256:	f002 fff9 	bl	800524c <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 800225a:	8c3b      	ldrh	r3, [r7, #32]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	b29b      	uxth	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	723b      	strb	r3, [r7, #8]
 8002264:	8c3b      	ldrh	r3, [r7, #32]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e00a      	b.n	8002286 <Manual_LCD_FillRectangle+0xb6>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8002270:	f107 0108 	add.w	r1, r7, #8
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	2202      	movs	r2, #2
 800227a:	480c      	ldr	r0, [pc, #48]	@ (80022ac <Manual_LCD_FillRectangle+0xdc>)
 800227c:	f007 fb4b 	bl	8009916 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	883a      	ldrh	r2, [r7, #0]
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d3ed      	bcc.n	8002270 <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8002294:	2201      	movs	r2, #1
 8002296:	2180      	movs	r1, #128	@ 0x80
 8002298:	4803      	ldr	r0, [pc, #12]	@ (80022a8 <Manual_LCD_FillRectangle+0xd8>)
 800229a:	f002 ffd7 	bl	800524c <HAL_GPIO_WritePin>
 800229e:	e000      	b.n	80022a2 <Manual_LCD_FillRectangle+0xd2>
        return;
 80022a0:	bf00      	nop
}
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd90      	pop	{r4, r7, pc}
 80022a8:	40020400 	.word	0x40020400
 80022ac:	2000068c 	.word	0x2000068c

080022b0 <Manual_LCD_DrawChar>:
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	80fb      	strh	r3, [r7, #6]
 80022c2:	4603      	mov	r3, r0
 80022c4:	80bb      	strh	r3, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	70fb      	strb	r3, [r7, #3]
 80022ca:	4613      	mov	r3, r2
 80022cc:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT)
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	2bef      	cmp	r3, #239	@ 0xef
 80022d2:	f200 80d1 	bhi.w	8002478 <Manual_LCD_DrawChar+0x1c8>
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80022dc:	f080 80cc 	bcs.w	8002478 <Manual_LCD_DrawChar+0x1c8>
 80022e0:	88f9      	ldrh	r1, [r7, #6]
 80022e2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80022f0:	f300 80c2 	bgt.w	8002478 <Manual_LCD_DrawChar+0x1c8>
 80022f4:	88b9      	ldrh	r1, [r7, #4]
 80022f6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	440b      	add	r3, r1
 8002302:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002306:	f300 80b7 	bgt.w	8002478 <Manual_LCD_DrawChar+0x1c8>
    {
        return; // Character won't fit
    }

    if (c < ' ' || c > '~')
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	2b1f      	cmp	r3, #31
 800230e:	d902      	bls.n	8002316 <Manual_LCD_DrawChar+0x66>
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b7e      	cmp	r3, #126	@ 0x7e
 8002314:	d901      	bls.n	800231a <Manual_LCD_DrawChar+0x6a>
        c = '?'; // Handle non-printable characters
 8002316:	233f      	movs	r3, #63	@ 0x3f
 8002318:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e088      	b.n	8002432 <Manual_LCD_DrawChar+0x182>
    { // Width of char
        uint8_t line = Font5x7[c - ' '][i];
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f1a3 0220 	sub.w	r2, r3, #32
 8002326:	7bf9      	ldrb	r1, [r7, #15]
 8002328:	4855      	ldr	r0, [pc, #340]	@ (8002480 <Manual_LCD_DrawChar+0x1d0>)
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	4403      	add	r3, r0
 8002332:	440b      	add	r3, r1
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8002338:	2300      	movs	r3, #0
 800233a:	737b      	strb	r3, [r7, #13]
 800233c:	e073      	b.n	8002426 <Manual_LCD_DrawChar+0x176>
        { // Height of char
            if (line & 0x01)
 800233e:	7bbb      	ldrb	r3, [r7, #14]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d034      	beq.n	80023b2 <Manual_LCD_DrawChar+0x102>
            { // Check bit
                if (size == 1)
 8002348:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800234c:	2b01      	cmp	r3, #1
 800234e:	d10e      	bne.n	800236e <Manual_LCD_DrawChar+0xbe>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	b29a      	uxth	r2, r3
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	4413      	add	r3, r2
 8002358:	b298      	uxth	r0, r3
 800235a:	7b7b      	ldrb	r3, [r7, #13]
 800235c:	b29a      	uxth	r2, r3
 800235e:	88bb      	ldrh	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	b29b      	uxth	r3, r3
 8002364:	883a      	ldrh	r2, [r7, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	f7ff fe08 	bl	8001f7c <Manual_LCD_DrawPixel>
 800236c:	e055      	b.n	800241a <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	b29a      	uxth	r2, r3
 8002372:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002376:	b29b      	uxth	r3, r3
 8002378:	fb12 f303 	smulbb	r3, r2, r3
 800237c:	b29a      	uxth	r2, r3
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	4413      	add	r3, r2
 8002382:	b298      	uxth	r0, r3
 8002384:	7b7b      	ldrb	r3, [r7, #13]
 8002386:	b29a      	uxth	r2, r3
 8002388:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800238c:	b29b      	uxth	r3, r3
 800238e:	fb12 f303 	smulbb	r3, r2, r3
 8002392:	b29a      	uxth	r2, r3
 8002394:	88bb      	ldrh	r3, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	b299      	uxth	r1, r3
 800239a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800239e:	b29a      	uxth	r2, r3
 80023a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023a4:	b29c      	uxth	r4, r3
 80023a6:	883b      	ldrh	r3, [r7, #0]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	4623      	mov	r3, r4
 80023ac:	f7ff ff10 	bl	80021d0 <Manual_LCD_FillRectangle>
 80023b0:	e033      	b.n	800241a <Manual_LCD_DrawChar+0x16a>
                }
            }
            else
            {
                if (size == 1)
 80023b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10e      	bne.n	80023d8 <Manual_LCD_DrawChar+0x128>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	4413      	add	r3, r2
 80023c2:	b298      	uxth	r0, r3
 80023c4:	7b7b      	ldrb	r3, [r7, #13]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	8c3a      	ldrh	r2, [r7, #32]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7ff fdd3 	bl	8001f7c <Manual_LCD_DrawPixel>
 80023d6:	e020      	b.n	800241a <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	fb12 f303 	smulbb	r3, r2, r3
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4413      	add	r3, r2
 80023ec:	b298      	uxth	r0, r3
 80023ee:	7b7b      	ldrb	r3, [r7, #13]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	fb12 f303 	smulbb	r3, r2, r3
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	88bb      	ldrh	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	b299      	uxth	r1, r3
 8002404:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002408:	b29a      	uxth	r2, r3
 800240a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800240e:	b29c      	uxth	r4, r3
 8002410:	8c3b      	ldrh	r3, [r7, #32]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	4623      	mov	r3, r4
 8002416:	f7ff fedb 	bl	80021d0 <Manual_LCD_FillRectangle>
                }
            }
            line >>= 1;
 800241a:	7bbb      	ldrb	r3, [r7, #14]
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8002420:	7b7b      	ldrb	r3, [r7, #13]
 8002422:	3301      	adds	r3, #1
 8002424:	737b      	strb	r3, [r7, #13]
 8002426:	7b7b      	ldrb	r3, [r7, #13]
 8002428:	2b06      	cmp	r3, #6
 800242a:	d988      	bls.n	800233e <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	3301      	adds	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b04      	cmp	r3, #4
 8002436:	f67f af73 	bls.w	8002320 <Manual_LCD_DrawChar+0x70>
        }
    }
    // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0)
 800243a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01b      	beq.n	800247a <Manual_LCD_DrawChar+0x1ca>
    { // Fill the column after the character (for spacing)
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 8002442:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4413      	add	r3, r2
 800244e:	b29a      	uxth	r2, r3
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	4413      	add	r3, r2
 8002454:	b298      	uxth	r0, r3
 8002456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800245a:	b29a      	uxth	r2, r3
 800245c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002460:	b29b      	uxth	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	00c9      	lsls	r1, r1, #3
 8002466:	1acb      	subs	r3, r1, r3
 8002468:	b29c      	uxth	r4, r3
 800246a:	88b9      	ldrh	r1, [r7, #4]
 800246c:	8c3b      	ldrh	r3, [r7, #32]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	4623      	mov	r3, r4
 8002472:	f7ff fead 	bl	80021d0 <Manual_LCD_FillRectangle>
 8002476:	e000      	b.n	800247a <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 8002478:	bf00      	nop
    }
}
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}
 8002480:	0800e2a4 	.word	0x0800e2a4

08002484 <Manual_LCD_DrawString>:

void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b087      	sub	sp, #28
 8002488:	af02      	add	r7, sp, #8
 800248a:	60ba      	str	r2, [r7, #8]
 800248c:	461a      	mov	r2, r3
 800248e:	4603      	mov	r3, r0
 8002490:	81fb      	strh	r3, [r7, #14]
 8002492:	460b      	mov	r3, r1
 8002494:	81bb      	strh	r3, [r7, #12]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
    while (*str)
 800249a:	e037      	b.n	800250c <Manual_LCD_DrawString+0x88>
    {
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	88fc      	ldrh	r4, [r7, #6]
 80024a2:	89b9      	ldrh	r1, [r7, #12]
 80024a4:	89f8      	ldrh	r0, [r7, #14]
 80024a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	8c3b      	ldrh	r3, [r7, #32]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4623      	mov	r3, r4
 80024b2:	f7ff fefd 	bl	80022b0 <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 80024b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	0052      	lsls	r2, r2, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	89fb      	ldrh	r3, [r7, #14]
 80024c8:	4413      	add	r3, r2
 80024ca:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH)
 80024cc:	89f9      	ldrh	r1, [r7, #14]
 80024ce:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	440b      	add	r3, r1
 80024da:	2bef      	cmp	r3, #239	@ 0xef
 80024dc:	dd09      	ble.n	80024f2 <Manual_LCD_DrawString+0x6e>
        { // Simple wrap
            x = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 80024e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	89bb      	ldrh	r3, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT)
 80024f2:	89b9      	ldrh	r1, [r7, #12]
 80024f4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	440b      	add	r3, r1
 8002500:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002504:	da07      	bge.n	8002516 <Manual_LCD_DrawString+0x92>
            break; // Out of screen
        str++;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3301      	adds	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
    while (*str)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1c3      	bne.n	800249c <Manual_LCD_DrawString+0x18>
    }
}
 8002514:	e000      	b.n	8002518 <Manual_LCD_DrawString+0x94>
            break; // Out of screen
 8002516:	bf00      	nop
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}

08002520 <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b09a      	sub	sp, #104	@ 0x68
 8002524:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 8002526:	201f      	movs	r0, #31
 8002528:	f7ff fcea 	bl	8001f00 <Manual_LCD_Clear>

    uint16_t text_color = COLOR_WHITE;
 800252c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002530:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint16_t box_fill_color = COLOR_BLACK;
 8002534:	2300      	movs	r3, #0
 8002536:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    uint16_t box_border_color = COLOR_WHITE;
 800253a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800253e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint8_t font_size = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002548:	2307      	movs	r3, #7
 800254a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    const char *info_text = "Nhom: [nhom 01]";
 800254e:	4bb8      	ldr	r3, [pc, #736]	@ (8002830 <Manual_LCD_DrawLayout+0x310>)
 8002550:	657b      	str	r3, [r7, #84]	@ 0x54
    uint16_t info_text_x = MARGIN + 5;
 8002552:	230f      	movs	r3, #15
 8002554:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 8002558:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800255c:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	f1c3 031e 	rsb	r3, r3, #30
 8002568:	0fda      	lsrs	r2, r3, #31
 800256a:	4413      	add	r3, r2
 800256c:	105b      	asrs	r3, r3, #1
 800256e:	b29b      	uxth	r3, r3
 8002570:	330a      	adds	r3, #10
 8002572:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

    Manual_LCD_FillRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_fill_color);
 8002576:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	231e      	movs	r3, #30
 800257e:	2296      	movs	r2, #150	@ 0x96
 8002580:	210a      	movs	r1, #10
 8002582:	200a      	movs	r0, #10
 8002584:	f7ff fe24 	bl	80021d0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_border_color);
 8002588:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	231e      	movs	r3, #30
 8002590:	2296      	movs	r2, #150	@ 0x96
 8002592:	210a      	movs	r1, #10
 8002594:	200a      	movs	r0, #10
 8002596:	f7ff fd9e 	bl	80020d6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 800259a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800259e:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 80025a2:	f8b7 0052 	ldrh.w	r0, [r7, #82]	@ 0x52
 80025a6:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025b6:	f7ff ff65 	bl	8002484 <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 80025ba:	233c      	movs	r3, #60	@ 0x3c
 80025bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 80025c0:	230a      	movs	r3, #10
 80025c2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 80025c6:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80025ca:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 80025d6:	0fda      	lsrs	r2, r3, #31
 80025d8:	4413      	add	r3, r2
 80025da:	105b      	asrs	r3, r3, #1
 80025dc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = MARGIN;
 80025e0:	230a      	movs	r3, #10
 80025e2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 80025e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 80025ee:	4b91      	ldr	r3, [pc, #580]	@ (8002834 <Manual_LCD_DrawLayout+0x314>)
 80025f0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 80025f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80025f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80025fa:	4413      	add	r3, r2
 80025fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 80025fe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002602:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002606:	4413      	add	r3, r2
 8002608:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 800260a:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800260e:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8002612:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2346      	movs	r3, #70	@ 0x46
 800261a:	2269      	movs	r2, #105	@ 0x69
 800261c:	f7ff fdd8 	bl	80021d0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002620:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8002624:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8002628:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2346      	movs	r3, #70	@ 0x46
 8002630:	2269      	movs	r2, #105	@ 0x69
 8002632:	f7ff fd50 	bl	80020d6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 8002636:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800263a:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800263c:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 800263e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800264e:	f7ff ff19 	bl	8002484 <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002652:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002656:	3373      	adds	r3, #115	@ 0x73
 8002658:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 800265a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800265e:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 8002660:	4b75      	ldr	r3, [pc, #468]	@ (8002838 <Manual_LCD_DrawLayout+0x318>)
 8002662:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 8002664:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002666:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800266a:	4413      	add	r3, r2
 800266c:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 800266e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002670:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002674:	4413      	add	r3, r2
 8002676:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002678:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800267a:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 800267c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2346      	movs	r3, #70	@ 0x46
 8002684:	2269      	movs	r2, #105	@ 0x69
 8002686:	f7ff fda3 	bl	80021d0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 800268a:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800268c:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 800268e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2346      	movs	r3, #70	@ 0x46
 8002696:	2269      	movs	r2, #105	@ 0x69
 8002698:	f7ff fd1d 	bl	80020d6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 800269c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80026a0:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80026a2:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 80026a4:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026b4:	f7ff fee6 	bl	8002484 <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 80026b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80026bc:	3350      	adds	r3, #80	@ 0x50
 80026be:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = MARGIN;
 80026c0:	230a      	movs	r3, #10
 80026c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 80026c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80026c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 80026c8:	4b5c      	ldr	r3, [pc, #368]	@ (800283c <Manual_LCD_DrawLayout+0x31c>)
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 80026cc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80026ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80026d2:	4413      	add	r3, r2
 80026d4:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 80026d6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80026d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026dc:	4413      	add	r3, r2
 80026de:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 80026e0:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80026e2:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 80026e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2346      	movs	r3, #70	@ 0x46
 80026ec:	2269      	movs	r2, #105	@ 0x69
 80026ee:	f7ff fd6f 	bl	80021d0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 80026f2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80026f4:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 80026f6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2346      	movs	r3, #70	@ 0x46
 80026fe:	2269      	movs	r2, #105	@ 0x69
 8002700:	f7ff fce9 	bl	80020d6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 8002704:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002708:	8c39      	ldrh	r1, [r7, #32]
 800270a:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 800270c:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271c:	f7ff feb2 	bl	8002484 <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002720:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002724:	3373      	adds	r3, #115	@ 0x73
 8002726:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 8002728:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800272a:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 800272c:	4b44      	ldr	r3, [pc, #272]	@ (8002840 <Manual_LCD_DrawLayout+0x320>)
 800272e:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 8002730:	8bfa      	ldrh	r2, [r7, #30]
 8002732:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002736:	4413      	add	r3, r2
 8002738:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 800273a:	8bba      	ldrh	r2, [r7, #28]
 800273c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002740:	4413      	add	r3, r2
 8002742:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002744:	8bb9      	ldrh	r1, [r7, #28]
 8002746:	8bf8      	ldrh	r0, [r7, #30]
 8002748:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2346      	movs	r3, #70	@ 0x46
 8002750:	2269      	movs	r2, #105	@ 0x69
 8002752:	f7ff fd3d 	bl	80021d0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002756:	8bb9      	ldrh	r1, [r7, #28]
 8002758:	8bf8      	ldrh	r0, [r7, #30]
 800275a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2346      	movs	r3, #70	@ 0x46
 8002762:	2269      	movs	r2, #105	@ 0x69
 8002764:	f7ff fcb7 	bl	80020d6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 8002768:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800276c:	8ab9      	ldrh	r1, [r7, #20]
 800276e:	8af8      	ldrh	r0, [r7, #22]
 8002770:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	f7ff fe80 	bl	8002484 <Manual_LCD_DrawString>

    // 3. Back Button
    const char *back_button_text = "<<Back";
 8002784:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <Manual_LCD_DrawLayout+0x324>)
 8002786:	613b      	str	r3, [r7, #16]
    uint16_t back_button_text_len = strlen(back_button_text);
 8002788:	6938      	ldr	r0, [r7, #16]
 800278a:	f7fd fd2b 	bl	80001e4 <strlen>
 800278e:	4603      	mov	r3, r0
 8002790:	81fb      	strh	r3, [r7, #14]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 8002792:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002796:	b29b      	uxth	r3, r3
 8002798:	89fa      	ldrh	r2, [r7, #14]
 800279a:	fb12 f303 	smulbb	r3, r2, r3
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	0052      	lsls	r2, r2, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	81bb      	strh	r3, [r7, #12]

    uint16_t back_button_y = start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING;
 80027aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80027ac:	335a      	adds	r3, #90	@ 0x5a
 80027ae:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80027b0:	237d      	movs	r3, #125	@ 0x7d
 80027b2:	813b      	strh	r3, [r7, #8]
    uint16_t text_button_x = back_button_x + (BACK_BUTTON_W - back_button_text_pixel_width) / 2;
 80027b4:	89bb      	ldrh	r3, [r7, #12]
 80027b6:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80027ba:	0fda      	lsrs	r2, r3, #31
 80027bc:	4413      	add	r3, r2
 80027be:	105b      	asrs	r3, r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	893b      	ldrh	r3, [r7, #8]
 80027c4:	4413      	add	r3, r2
 80027c6:	80fb      	strh	r3, [r7, #6]
    uint16_t text_button_y = back_button_y + (BACK_BUTTON_H - char_height * font_size) / 2;
 80027c8:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80027cc:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 80027d8:	0fda      	lsrs	r2, r3, #31
 80027da:	4413      	add	r3, r2
 80027dc:	105b      	asrs	r3, r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	897b      	ldrh	r3, [r7, #10]
 80027e2:	4413      	add	r3, r2
 80027e4:	80bb      	strh	r3, [r7, #4]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_fill_color);
 80027e6:	8979      	ldrh	r1, [r7, #10]
 80027e8:	8938      	ldrh	r0, [r7, #8]
 80027ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	232d      	movs	r3, #45	@ 0x2d
 80027f2:	225a      	movs	r2, #90	@ 0x5a
 80027f4:	f7ff fcec 	bl	80021d0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_border_color);
 80027f8:	8979      	ldrh	r1, [r7, #10]
 80027fa:	8938      	ldrh	r0, [r7, #8]
 80027fc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	232d      	movs	r3, #45	@ 0x2d
 8002804:	225a      	movs	r2, #90	@ 0x5a
 8002806:	f7ff fc66 	bl	80020d6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 800280a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800280e:	88b9      	ldrh	r1, [r7, #4]
 8002810:	88f8      	ldrh	r0, [r7, #6]
 8002812:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	f7ff fe2f 	bl	8002484 <Manual_LCD_DrawString>
}
 8002826:	bf00      	nop
 8002828:	3760      	adds	r7, #96	@ 0x60
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	0800e1f8 	.word	0x0800e1f8
 8002834:	0800e208 	.word	0x0800e208
 8002838:	0800e214 	.word	0x0800e214
 800283c:	0800e220 	.word	0x0800e220
 8002840:	0800e22c 	.word	0x0800e22c
 8002844:	0800e238 	.word	0x0800e238

08002848 <Manual_LCD_UpdateInfoText>:

// New function to update the info text
void Manual_LCD_UpdateInfoText(const char *new_text)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	6078      	str	r0, [r7, #4]
    uint8_t font_size = 1;
 8002850:	2301      	movs	r3, #1
 8002852:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002854:	2307      	movs	r3, #7
 8002856:	75bb      	strb	r3, [r7, #22]

    uint16_t text_color = COLOR_WHITE;     // Original text color from DrawLayout
 8002858:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800285c:	82bb      	strh	r3, [r7, #20]
    uint16_t box_fill_color = COLOR_BLACK; // Original box fill color from DrawLayout
 800285e:	2300      	movs	r3, #0
 8002860:	827b      	strh	r3, [r7, #18]

    uint16_t info_text_x = MARGIN + 5;
 8002862:	230f      	movs	r3, #15
 8002864:	823b      	strh	r3, [r7, #16]
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 8002866:	7dbb      	ldrb	r3, [r7, #22]
 8002868:	7dfa      	ldrb	r2, [r7, #23]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	f1c3 031e 	rsb	r3, r3, #30
 8002872:	0fda      	lsrs	r2, r3, #31
 8002874:	4413      	add	r3, r2
 8002876:	105b      	asrs	r3, r3, #1
 8002878:	b29b      	uxth	r3, r3
 800287a:	330a      	adds	r3, #10
 800287c:	81fb      	strh	r3, [r7, #14]

    // Clear the inner part of the info box where text resides
    // The border is 1px, so we fill from x+1, y+1 with width-2, height-2
    Manual_LCD_FillRectangle(MARGIN + 1, INFO_BOX_Y + 1, INFO_BOX_W - 2, INFO_BOX_H - 2, box_fill_color);
 800287e:	8a7b      	ldrh	r3, [r7, #18]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	231c      	movs	r3, #28
 8002884:	2294      	movs	r2, #148	@ 0x94
 8002886:	210b      	movs	r1, #11
 8002888:	200b      	movs	r0, #11
 800288a:	f7ff fca1 	bl	80021d0 <Manual_LCD_FillRectangle>

    // Draw the new string with original text color and original box fill as background
    Manual_LCD_DrawString(info_text_x, info_text_y, new_text, text_color, box_fill_color, font_size);
 800288e:	8aba      	ldrh	r2, [r7, #20]
 8002890:	89f9      	ldrh	r1, [r7, #14]
 8002892:	8a38      	ldrh	r0, [r7, #16]
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	8a7b      	ldrh	r3, [r7, #18]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	f7ff fdf0 	bl	8002484 <Manual_LCD_DrawString>
}
 80028a4:	bf00      	nop
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <Manual_LCD_RefillTaskBox>:

// New function to refill a task box and redraw its text
void Manual_LCD_RefillTaskBox(const char *task_name, uint16_t new_fill_color)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	@ 0x28
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
    uint16_t original_text_color = COLOR_WHITE;
 80028b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028bc:	82fb      	strh	r3, [r7, #22]
    uint16_t original_box_border_color = COLOR_WHITE;
 80028be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028c2:	82bb      	strh	r3, [r7, #20]
    uint8_t font_size = 1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	74fb      	strb	r3, [r7, #19]
    uint8_t char_height = 7; // For 5x7 font at size 1
 80028c8:	2307      	movs	r3, #7
 80028ca:	74bb      	strb	r3, [r7, #18]

    uint16_t text_task_x_padding = 10;
 80028cc:	230a      	movs	r3, #10
 80028ce:	823b      	strh	r3, [r7, #16]
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 80028d0:	7cbb      	ldrb	r3, [r7, #18]
 80028d2:	7cfa      	ldrb	r2, [r7, #19]
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 80028dc:	0fda      	lsrs	r2, r3, #31
 80028de:	4413      	add	r3, r2
 80028e0:	105b      	asrs	r3, r3, #1
 80028e2:	81fb      	strh	r3, [r7, #14]

    uint16_t current_task_x = 0, current_task_y = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	83fb      	strh	r3, [r7, #30]
 80028e8:	2300      	movs	r3, #0
 80028ea:	83bb      	strh	r3, [r7, #28]
    uint16_t text_draw_x = 0, text_draw_y = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	81bb      	strh	r3, [r7, #12]
 80028f0:	2300      	movs	r3, #0
 80028f2:	817b      	strh	r3, [r7, #10]
    const char *original_task_text_content = "";
 80028f4:	4b30      	ldr	r3, [pc, #192]	@ (80029b8 <Manual_LCD_RefillTaskBox+0x10c>)
 80028f6:	61bb      	str	r3, [r7, #24]

    if (strcmp(task_name, "Task 02-1") == 0)
 80028f8:	4930      	ldr	r1, [pc, #192]	@ (80029bc <Manual_LCD_RefillTaskBox+0x110>)
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fd fc68 	bl	80001d0 <strcmp>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <Manual_LCD_RefillTaskBox+0x68>
    {
        current_task_x = MARGIN;
 8002906:	230a      	movs	r3, #10
 8002908:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 800290a:	233c      	movs	r3, #60	@ 0x3c
 800290c:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-1";
 800290e:	4b2b      	ldr	r3, [pc, #172]	@ (80029bc <Manual_LCD_RefillTaskBox+0x110>)
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	e028      	b.n	8002966 <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-2") == 0)
 8002914:	492a      	ldr	r1, [pc, #168]	@ (80029c0 <Manual_LCD_RefillTaskBox+0x114>)
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fd fc5a 	bl	80001d0 <strcmp>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <Manual_LCD_RefillTaskBox+0x84>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002922:	237d      	movs	r3, #125	@ 0x7d
 8002924:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8002926:	233c      	movs	r3, #60	@ 0x3c
 8002928:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-2";
 800292a:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <Manual_LCD_RefillTaskBox+0x114>)
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	e01a      	b.n	8002966 <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-3") == 0)
 8002930:	4924      	ldr	r1, [pc, #144]	@ (80029c4 <Manual_LCD_RefillTaskBox+0x118>)
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fd fc4c 	bl	80001d0 <strcmp>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <Manual_LCD_RefillTaskBox+0xa0>
    {
        current_task_x = MARGIN;
 800293e:	230a      	movs	r3, #10
 8002940:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8002942:	238c      	movs	r3, #140	@ 0x8c
 8002944:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-3";
 8002946:	4b1f      	ldr	r3, [pc, #124]	@ (80029c4 <Manual_LCD_RefillTaskBox+0x118>)
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	e00c      	b.n	8002966 <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-4") == 0)
 800294c:	491e      	ldr	r1, [pc, #120]	@ (80029c8 <Manual_LCD_RefillTaskBox+0x11c>)
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fd fc3e 	bl	80001d0 <strcmp>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d129      	bne.n	80029ae <Manual_LCD_RefillTaskBox+0x102>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 800295a:	237d      	movs	r3, #125	@ 0x7d
 800295c:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 800295e:	238c      	movs	r3, #140	@ 0x8c
 8002960:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-4";
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <Manual_LCD_RefillTaskBox+0x11c>)
 8002964:	61bb      	str	r3, [r7, #24]
    else
    {
        return; // Unknown task name, do nothing
    }

    text_draw_x = current_task_x + text_task_x_padding;
 8002966:	8bfa      	ldrh	r2, [r7, #30]
 8002968:	8a3b      	ldrh	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	81bb      	strh	r3, [r7, #12]
    text_draw_y = current_task_y + text_task_y_offset;
 800296e:	8bba      	ldrh	r2, [r7, #28]
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	4413      	add	r3, r2
 8002974:	817b      	strh	r3, [r7, #10]

    // 1. Refill the entire task box with the new color
    Manual_LCD_FillRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, new_fill_color);
 8002976:	8bb9      	ldrh	r1, [r7, #28]
 8002978:	8bf8      	ldrh	r0, [r7, #30]
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2346      	movs	r3, #70	@ 0x46
 8002980:	2269      	movs	r2, #105	@ 0x69
 8002982:	f7ff fc25 	bl	80021d0 <Manual_LCD_FillRectangle>

    // 2. Redraw the border
    Manual_LCD_DrawRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, original_box_border_color);
 8002986:	8bb9      	ldrh	r1, [r7, #28]
 8002988:	8bf8      	ldrh	r0, [r7, #30]
 800298a:	8abb      	ldrh	r3, [r7, #20]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2346      	movs	r3, #70	@ 0x46
 8002990:	2269      	movs	r2, #105	@ 0x69
 8002992:	f7ff fba0 	bl	80020d6 <Manual_LCD_DrawRectangle>

    // 3. Redraw the original text using the original text color and the new_fill_color as background
    Manual_LCD_DrawString(text_draw_x, text_draw_y, original_task_text_content, original_text_color, new_fill_color, font_size);
 8002996:	8afa      	ldrh	r2, [r7, #22]
 8002998:	8979      	ldrh	r1, [r7, #10]
 800299a:	89b8      	ldrh	r0, [r7, #12]
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	f7ff fd6c 	bl	8002484 <Manual_LCD_DrawString>
 80029ac:	e000      	b.n	80029b0 <Manual_LCD_RefillTaskBox+0x104>
        return; // Unknown task name, do nothing
 80029ae:	bf00      	nop
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	0800e240 	.word	0x0800e240
 80029bc:	0800e208 	.word	0x0800e208
 80029c0:	0800e214 	.word	0x0800e214
 80029c4:	0800e220 	.word	0x0800e220
 80029c8:	0800e22c 	.word	0x0800e22c

080029cc <TP_Read_ADC_Raw>:
Coordinate CalScreenSample[3]; // Raw ADC values from touch panel for calibration points

// Low-level SPI communication for touch
// Sends 1 byte command, receives 2 bytes data (12-bit ADC value)
static uint16_t TP_Read_ADC_Raw(uint8_t cmd)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = cmd;
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buffer[2] = {0, 0};
 80029da:	2300      	movs	r3, #0
 80029dc:	813b      	strh	r3, [r7, #8]
    uint16_t adc_val = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET); // Select touch controller
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029e8:	4815      	ldr	r0, [pc, #84]	@ (8002a40 <TP_Read_ADC_Raw+0x74>)
 80029ea:	f002 fc2f 	bl	800524c <HAL_GPIO_WritePin>

    // Send command byte
    HAL_SPI_Transmit(g_hspi_touch_ptr, &tx_byte, 1, HAL_MAX_DELAY);
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <TP_Read_ADC_Raw+0x78>)
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f107 010d 	add.w	r1, r7, #13
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	2201      	movs	r2, #1
 80029fc:	f006 ff8b 	bl	8009916 <HAL_SPI_Transmit>

    // Receive 2 data bytes. Some controllers might need dummy clocks before data is valid.
    // For XPT2046/ADS7846, data usually follows directly.
    HAL_SPI_Receive(g_hspi_touch_ptr, rx_buffer, 2, HAL_MAX_DELAY);
 8002a00:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <TP_Read_ADC_Raw+0x78>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	f107 0108 	add.w	r1, r7, #8
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f007 f8c6 	bl	8009b9e <HAL_SPI_Receive>

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect
 8002a12:	2201      	movs	r2, #1
 8002a14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a18:	4809      	ldr	r0, [pc, #36]	@ (8002a40 <TP_Read_ADC_Raw+0x74>)
 8002a1a:	f002 fc17 	bl	800524c <HAL_GPIO_WritePin>

    adc_val = (rx_buffer[0] << 8) | rx_buffer[1];
 8002a1e:	7a3b      	ldrb	r3, [r7, #8]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	b21a      	sxth	r2, r3
 8002a26:	7a7b      	ldrb	r3, [r7, #9]
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	81fb      	strh	r3, [r7, #14]
    adc_val >>= 3; // Keep the most significant 12 bits (XPT2046 specific, D0 is at bit 3 of second byte)
 8002a30:	89fb      	ldrh	r3, [r7, #14]
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	81fb      	strh	r3, [r7, #14]
                   // Original code used >>4, which might be for a different ADC alignment or resolution.
                   // If raw values are consistently too low or high, this shift might need adjustment.
    return adc_val;
 8002a36:	89fb      	ldrh	r3, [r7, #14]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40020000 	.word	0x40020000
 8002a44:	20000080 	.word	0x20000080

08002a48 <Manual_Touch_Init>:

void Manual_Touch_Init(SPI_HandleTypeDef *hspi_touch)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
    g_hspi_touch_ptr = hspi_touch;
 8002a50:	4a06      	ldr	r2, [pc, #24]	@ (8002a6c <Manual_Touch_Init+0x24>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6013      	str	r3, [r2, #0]
    // GPIOs for TP_CS (PA9) and TP_IRQ (PB4) are assumed to be initialized
    // in main.c's MX_GPIO_Init() as Output PP and Input Pull-up respectively.
    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect touch controller initially
 8002a56:	2201      	movs	r2, #1
 8002a58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a5c:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <Manual_Touch_Init+0x28>)
 8002a5e:	f002 fbf5 	bl	800524c <HAL_GPIO_WritePin>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000080 	.word	0x20000080
 8002a70:	40020000 	.word	0x40020000

08002a74 <Manual_Touch_GetRawPoint>:
    // TP_IRQ_Pin is low when pressed (assuming pull-up resistor is enabled)
    return (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET);
}

uint8_t Manual_Touch_GetRawPoint(Coordinate *rawPoint)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    // Đọc một mẫu đơn giản để debug
    rawPoint->x = TP_Read_ADC_Raw(TP_CMD_READ_X);
 8002a7c:	20d0      	movs	r0, #208	@ 0xd0
 8002a7e:	f7ff ffa5 	bl	80029cc <TP_Read_ADC_Raw>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	801a      	strh	r2, [r3, #0]
    rawPoint->y = TP_Read_ADC_Raw(TP_CMD_READ_Y);
 8002a8a:	2090      	movs	r0, #144	@ 0x90
 8002a8c:	f7ff ff9e 	bl	80029cc <TP_Read_ADC_Raw>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	805a      	strh	r2, [r3, #2]

    // Trả về thành công mà không kiểm tra
    return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <Manual_Touch_ApplyCalibration>:
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    return 1; // Success
}

uint8_t Manual_Touch_ApplyCalibration(Coordinate *displayPoint, const Coordinate *screenPoint)
{
 8002aa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
    if (touchMatrix.Divider == 0)
 8002ab0:	4b64      	ldr	r3, [pc, #400]	@ (8002c44 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002ab2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	f7fe f813 	bl	8000ae8 <__aeabi_dcmpeq>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d023      	beq.n	8002b10 <Manual_Touch_ApplyCalibration+0x6c>
    { // Not calibrated or calibration failed
        // Fallback: direct scaling (highly inaccurate without calibration)
        displayPoint->x = (uint16_t)(((long)screenPoint->x * LCD_WIDTH) / 4095);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c48 <Manual_Touch_ApplyCalibration+0x1a4>)
 8002ad8:	fb82 1203 	smull	r1, r2, r2, r3
 8002adc:	441a      	add	r2, r3
 8002ade:	12d2      	asrs	r2, r2, #11
 8002ae0:	17db      	asrs	r3, r3, #31
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	801a      	strh	r2, [r3, #0]
        displayPoint->y = (uint16_t)(((long)screenPoint->y * LCD_HEIGHT) / 4095);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	885b      	ldrh	r3, [r3, #2]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	019b      	lsls	r3, r3, #6
 8002af8:	4a53      	ldr	r2, [pc, #332]	@ (8002c48 <Manual_Touch_ApplyCalibration+0x1a4>)
 8002afa:	fb82 1203 	smull	r1, r2, r2, r3
 8002afe:	441a      	add	r2, r3
 8002b00:	12d2      	asrs	r2, r2, #11
 8002b02:	17db      	asrs	r3, r3, #31
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	805a      	strh	r2, [r3, #2]
        return 0; // Indicated that calibration matrix was not used
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e094      	b.n	8002c3a <Manual_Touch_ApplyCalibration+0x196>
    }

    // Apply calibration matrix
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002b10:	4b4c      	ldr	r3, [pc, #304]	@ (8002c44 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fd12 	bl	8000544 <__aeabi_i2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4620      	mov	r0, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	f7fd fd76 	bl	8000618 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4690      	mov	r8, r2
 8002b32:	4699      	mov	r9, r3
                                  (touchMatrix.Bn * screenPoint->y) +
 8002b34:	4b43      	ldr	r3, [pc, #268]	@ (8002c44 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b36:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	885b      	ldrh	r3, [r3, #2]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fd00 	bl	8000544 <__aeabi_i2d>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4620      	mov	r0, r4
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	f7fd fd64 	bl	8000618 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002b54:	4640      	mov	r0, r8
 8002b56:	4649      	mov	r1, r9
 8002b58:	f7fd fba8 	bl	80002ac <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
                                  touchMatrix.Cn) /
 8002b64:	4b37      	ldr	r3, [pc, #220]	@ (8002c44 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                                  (touchMatrix.Bn * screenPoint->y) +
 8002b6a:	f7fd fb9f 	bl	80002ac <__adddf3>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002b76:	4b33      	ldr	r3, [pc, #204]	@ (8002c44 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b78:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Cn) /
 8002b7c:	f7fd fe76 	bl	800086c <__aeabi_ddiv>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7fd ffe0 	bl	8000b4c <__aeabi_d2uiz>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	801a      	strh	r2, [r3, #0]
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b94:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b96:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fcd0 	bl	8000544 <__aeabi_i2d>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4620      	mov	r0, r4
 8002baa:	4629      	mov	r1, r5
 8002bac:	f7fd fd34 	bl	8000618 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4690      	mov	r8, r2
 8002bb6:	4699      	mov	r9, r3
                                  (touchMatrix.En * screenPoint->y) +
 8002bb8:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002bba:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	885b      	ldrh	r3, [r3, #2]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fcbe 	bl	8000544 <__aeabi_i2d>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4620      	mov	r0, r4
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7fd fd22 	bl	8000618 <__aeabi_dmul>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002bd8:	4640      	mov	r0, r8
 8002bda:	4649      	mov	r1, r9
 8002bdc:	f7fd fb66 	bl	80002ac <__adddf3>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
                                  touchMatrix.Fn) /
 8002be8:	4b16      	ldr	r3, [pc, #88]	@ (8002c44 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002bea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                                  (touchMatrix.En * screenPoint->y) +
 8002bee:	f7fd fb5d 	bl	80002ac <__adddf3>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002bfc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Fn) /
 8002c00:	f7fd fe34 	bl	800086c <__aeabi_ddiv>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f7fd ff9e 	bl	8000b4c <__aeabi_d2uiz>
 8002c10:	4603      	mov	r3, r0
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	805a      	strh	r2, [r3, #2]

    // Constrain to LCD boundaries
    if (displayPoint->x >= LCD_WIDTH)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	2bef      	cmp	r3, #239	@ 0xef
 8002c1e:	d902      	bls.n	8002c26 <Manual_Touch_ApplyCalibration+0x182>
        displayPoint->x = LCD_WIDTH - 1;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	22ef      	movs	r2, #239	@ 0xef
 8002c24:	801a      	strh	r2, [r3, #0]
    if (displayPoint->y >= LCD_HEIGHT)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	885b      	ldrh	r3, [r3, #2]
 8002c2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002c2e:	d303      	bcc.n	8002c38 <Manual_Touch_ApplyCalibration+0x194>
        displayPoint->y = LCD_HEIGHT - 1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f240 123f 	movw	r2, #319	@ 0x13f
 8002c36:	805a      	strh	r2, [r3, #2]
    // Note: long double might produce negative intermediate results if raw values are way off.
    // Casting to uint16_t will wrap. Consider clamping if signed intermediates are possible.
    // For typical touch values, this should be fine.

    return 1; // Calibration matrix used
 8002c38:	2301      	movs	r3, #1
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c44:	20000088 	.word	0x20000088
 8002c48:	80080081 	.word	0x80080081

08002c4c <SD_Init>:
/**
 * @brief  Khởi tạo SD Card và file system
 * @retval uint8_t: 1 nếu thành công, 0 nếu thất bại
 */
uint8_t SD_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
    FRESULT fresult;

    // Nếu đã khởi tạo rồi thì không khởi tạo lại
    if (sd_initialized)
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <SD_Init+0x48>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <SD_Init+0x12>
    {
        return 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e016      	b.n	8002c8c <SD_Init+0x40>
    }

    // Khởi tạo SD Card qua giao diện SDIO
    if (BSP_SD_Init() != MSD_OK)
 8002c5e:	f008 f8ef 	bl	800ae40 <BSP_SD_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <SD_Init+0x20>
    {
        return 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e00f      	b.n	8002c8c <SD_Init+0x40>
    }

    // Mount file system
    fresult = f_mount(&sdFatFs, "", 1);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	490a      	ldr	r1, [pc, #40]	@ (8002c98 <SD_Init+0x4c>)
 8002c70:	480a      	ldr	r0, [pc, #40]	@ (8002c9c <SD_Init+0x50>)
 8002c72:	f009 ffd5 	bl	800cc20 <f_mount>
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
    if (fresult != FR_OK)
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <SD_Init+0x38>
    {
        return 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e003      	b.n	8002c8c <SD_Init+0x40>
    }

    sd_initialized = 1;
 8002c84:	4b03      	ldr	r3, [pc, #12]	@ (8002c94 <SD_Init+0x48>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
    return 1;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	200002f0 	.word	0x200002f0
 8002c98:	0800e244 	.word	0x0800e244
 8002c9c:	200000c0 	.word	0x200000c0

08002ca0 <SD_WriteFile>:
 * @param  content: Nội dung cần ghi vào file
 * @param  append: 1 = thêm vào cuối file, 0 = ghi đè file
 * @retval uint8_t: 1 nếu thành công, 0 nếu thất bại
 */
uint8_t SD_WriteFile(const char *filename, const char *content, uint8_t append)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002cac:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002cb0:	6018      	str	r0, [r3, #0]
 8002cb2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002cb6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002cba:	6019      	str	r1, [r3, #0]
 8002cbc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002cc0:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8002cc4:	701a      	strb	r2, [r3, #0]
    FRESULT fresult;
    UINT bytesWritten;
    BYTE mode;

    // Kiểm tra SD đã khởi tạo chưa
    if (!sd_initialized)
 8002cc6:	4b31      	ldr	r3, [pc, #196]	@ (8002d8c <SD_WriteFile+0xec>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <SD_WriteFile+0x3c>
    {
        if (!SD_Init())
 8002cce:	f7ff ffbd 	bl	8002c4c <SD_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <SD_WriteFile+0x3c>
        {
            return 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e052      	b.n	8002d82 <SD_WriteFile+0xe2>
        }
    }

    // Xác định chế độ mở file
    mode = append ? (FA_OPEN_APPEND | FA_WRITE) : (FA_CREATE_ALWAYS | FA_WRITE);
 8002cdc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002ce0:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <SD_WriteFile+0x4e>
 8002cea:	2332      	movs	r3, #50	@ 0x32
 8002cec:	e000      	b.n	8002cf0 <SD_WriteFile+0x50>
 8002cee:	230a      	movs	r3, #10
 8002cf0:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247

    // Mở file để ghi
    fresult = f_open(&file, filename, mode);
 8002cf4:	f897 2247 	ldrb.w	r2, [r7, #583]	@ 0x247
 8002cf8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002cfc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002d00:	f107 0014 	add.w	r0, r7, #20
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	f009 ffd1 	bl	800ccac <f_open>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
    if (fresult != FR_OK)
 8002d10:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <SD_WriteFile+0x7c>
    {
        return 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e032      	b.n	8002d82 <SD_WriteFile+0xe2>
    }

    // Ghi nội dung vào file
    fresult = f_write(&file, content, strlen(content), &bytesWritten);
 8002d1c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002d20:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	f7fd fa5d 	bl	80001e4 <strlen>
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	f107 0310 	add.w	r3, r7, #16
 8002d30:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8002d34:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8002d38:	f107 0014 	add.w	r0, r7, #20
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	6809      	ldr	r1, [r1, #0]
 8002d40:	f00a faad 	bl	800d29e <f_write>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246

    // Đóng file
    f_close(&file);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f00a fc98 	bl	800d684 <f_close>

    return (fresult == FR_OK && bytesWritten == strlen(content)) ? 1 : 0;
 8002d54:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d110      	bne.n	8002d7e <SD_WriteFile+0xde>
 8002d5c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002d60:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	f7fd fa3d 	bl	80001e4 <strlen>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002d70:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d101      	bne.n	8002d7e <SD_WriteFile+0xde>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <SD_WriteFile+0xe0>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	200002f0 	.word	0x200002f0

08002d90 <SD_CreateTeamFile>:
/**
 * @brief  Tạo file team9.txt với nội dung về nhóm
 * @retval uint8_t: 1 nếu thành công, 0 nếu thất bại
 */
uint8_t SD_CreateTeamFile(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	@ 0x38
 8002d94:	af00      	add	r7, sp, #0
    char content[50];
    sprintf(content, "Nhom: %d", GROUP_NUMBER);
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2209      	movs	r2, #9
 8002d9a:	4907      	ldr	r1, [pc, #28]	@ (8002db8 <SD_CreateTeamFile+0x28>)
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f00a fcf7 	bl	800d790 <siprintf>
    return SD_WriteFile(FILE_NAME, content, 0);
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	2200      	movs	r2, #0
 8002da6:	4619      	mov	r1, r3
 8002da8:	4804      	ldr	r0, [pc, #16]	@ (8002dbc <SD_CreateTeamFile+0x2c>)
 8002daa:	f7ff ff79 	bl	8002ca0 <SD_WriteFile>
 8002dae:	4603      	mov	r3, r0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3738      	adds	r7, #56	@ 0x38
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	0800e248 	.word	0x0800e248
 8002dbc:	0800e254 	.word	0x0800e254

08002dc0 <SD_ReadFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước của buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadFile(const char *filename, char *buffer, uint32_t buffer_size)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002dcc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002dd0:	6018      	str	r0, [r3, #0]
 8002dd2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002dd6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002dda:	6019      	str	r1, [r3, #0]
 8002ddc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002de0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002de4:	601a      	str	r2, [r3, #0]
    FIL file;
    FRESULT fresult;
    UINT bytesRead = 0;
 8002de6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002dea:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]

    // Kiểm tra SD đã khởi tạo chưa
    if (!sd_initialized)
 8002df2:	4b35      	ldr	r3, [pc, #212]	@ (8002ec8 <SD_ReadFile+0x108>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d107      	bne.n	8002e0a <SD_ReadFile+0x4a>
    {
        if (!SD_Init())
 8002dfa:	f7ff ff27 	bl	8002c4c <SD_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <SD_ReadFile+0x4a>
        {
            return -1;
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	e059      	b.n	8002ebe <SD_ReadFile+0xfe>
        }
    }

    // Mở file để đọc
    fresult = f_open(&file, filename, FA_READ);
 8002e0a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002e0e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002e12:	f107 0018 	add.w	r0, r7, #24
 8002e16:	2201      	movs	r2, #1
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	f009 ff47 	bl	800ccac <f_open>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    if (fresult != FR_OK)
 8002e24:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <SD_ReadFile+0x72>
    {
        return -1;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e30:	e045      	b.n	8002ebe <SD_ReadFile+0xfe>
    }

    // Xác định kích thước cần đọc
    UINT size_to_read = f_size(&file);
 8002e32:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002e36:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    if (size_to_read >= buffer_size)
 8002e40:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002e44:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002e48:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d307      	bcc.n	8002e62 <SD_ReadFile+0xa2>
    {
        size_to_read = buffer_size - 1;
 8002e52:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002e56:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    }

    // Đọc dữ liệu từ file
    fresult = f_read(&file, buffer, size_to_read, &bytesRead);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002e6a:	f5a2 7112 	sub.w	r1, r2, #584	@ 0x248
 8002e6e:	f107 0018 	add.w	r0, r7, #24
 8002e72:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002e76:	6809      	ldr	r1, [r1, #0]
 8002e78:	f00a f8d2 	bl	800d020 <f_read>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b

    // Đóng file
    f_close(&file);
 8002e82:	f107 0318 	add.w	r3, r7, #24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f00a fbfc 	bl	800d684 <f_close>

    if (fresult != FR_OK)
 8002e8c:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <SD_ReadFile+0xda>
    {
        return -1;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
 8002e98:	e011      	b.n	8002ebe <SD_ReadFile+0xfe>
    }

    // Thêm null terminator nếu đọc chuỗi
    buffer[bytesRead] = '\0';
 8002e9a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002e9e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002ea8:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]

    return bytesRead;
 8002eb4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002eb8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002ebc:	681b      	ldr	r3, [r3, #0]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200002f0 	.word	0x200002f0

08002ecc <SD_ReadTeamFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadTeamFile(char *buffer, uint32_t buffer_size)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
    return SD_ReadFile(FILE_NAME, buffer, buffer_size);
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4804      	ldr	r0, [pc, #16]	@ (8002eec <SD_ReadTeamFile+0x20>)
 8002edc:	f7ff ff70 	bl	8002dc0 <SD_ReadFile>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	0800e254 	.word	0x0800e254

08002ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	4a0f      	ldr	r2, [pc, #60]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a08      	ldr	r2, [pc, #32]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_ADC_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f7c <HAL_ADC_MspInit+0x3c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10d      	bne.n	8002f6e <HAL_ADC_MspInit+0x2e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b0a      	ldr	r3, [pc, #40]	@ (8002f80 <HAL_ADC_MspInit+0x40>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	4a09      	ldr	r2, [pc, #36]	@ (8002f80 <HAL_ADC_MspInit+0x40>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f62:	4b07      	ldr	r3, [pc, #28]	@ (8002f80 <HAL_ADC_MspInit+0x40>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40012000 	.word	0x40012000
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_CAN_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	@ 0x30
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if (hcan->Instance == CAN1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a47      	ldr	r2, [pc, #284]	@ (80030c0 <HAL_CAN_MspInit+0x13c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d13e      	bne.n	8003024 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002fa6:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <HAL_CAN_MspInit+0x140>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a45      	ldr	r2, [pc, #276]	@ (80030c4 <HAL_CAN_MspInit+0x140>)
 8002fae:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8002fb0:	4b44      	ldr	r3, [pc, #272]	@ (80030c4 <HAL_CAN_MspInit+0x140>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10d      	bne.n	8002fd4 <HAL_CAN_MspInit+0x50>
    {
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	4b42      	ldr	r3, [pc, #264]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	4a41      	ldr	r2, [pc, #260]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8002fc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe4:	4b38      	ldr	r3, [pc, #224]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8002ff0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003002:	2309      	movs	r3, #9
 8003004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003006:	f107 031c 	add.w	r3, r7, #28
 800300a:	4619      	mov	r1, r3
 800300c:	482f      	ldr	r0, [pc, #188]	@ (80030cc <HAL_CAN_MspInit+0x148>)
 800300e:	f001 ff69 	bl	8004ee4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	2013      	movs	r0, #19
 8003018:	f001 feef 	bl	8004dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800301c:	2013      	movs	r0, #19
 800301e:	f001 ff08 	bl	8004e32 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }
}
 8003022:	e048      	b.n	80030b6 <HAL_CAN_MspInit+0x132>
  else if (hcan->Instance == CAN2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a29      	ldr	r2, [pc, #164]	@ (80030d0 <HAL_CAN_MspInit+0x14c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d143      	bne.n	80030b6 <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	4a24      	ldr	r2, [pc, #144]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8003038:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800303c:	6413      	str	r3, [r2, #64]	@ 0x40
 800303e:	4b22      	ldr	r3, [pc, #136]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800304a:	4b1e      	ldr	r3, [pc, #120]	@ (80030c4 <HAL_CAN_MspInit+0x140>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a1c      	ldr	r2, [pc, #112]	@ (80030c4 <HAL_CAN_MspInit+0x140>)
 8003052:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <HAL_CAN_MspInit+0x140>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d10d      	bne.n	8003078 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	4a18      	ldr	r2, [pc, #96]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8003066:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800306a:	6413      	str	r3, [r2, #64]	@ 0x40
 800306c:	4b16      	ldr	r3, [pc, #88]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	4b12      	ldr	r3, [pc, #72]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	4a11      	ldr	r2, [pc, #68]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	6313      	str	r3, [r2, #48]	@ 0x30
 8003088:	4b0f      	ldr	r3, [pc, #60]	@ (80030c8 <HAL_CAN_MspInit+0x144>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_5;
 8003094:	f242 0320 	movw	r3, #8224	@ 0x2020
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a2:	2303      	movs	r3, #3
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80030a6:	2309      	movs	r3, #9
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030aa:	f107 031c 	add.w	r3, r7, #28
 80030ae:	4619      	mov	r1, r3
 80030b0:	4808      	ldr	r0, [pc, #32]	@ (80030d4 <HAL_CAN_MspInit+0x150>)
 80030b2:	f001 ff17 	bl	8004ee4 <HAL_GPIO_Init>
}
 80030b6:	bf00      	nop
 80030b8:	3730      	adds	r7, #48	@ 0x30
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40006400 	.word	0x40006400
 80030c4:	200002f4 	.word	0x200002f4
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40006800 	.word	0x40006800
 80030d4:	40020400 	.word	0x40020400

080030d8 <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	@ 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if (hi2c->Instance == I2C2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a26      	ldr	r2, [pc, #152]	@ (8003190 <HAL_I2C_MspInit+0xb8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d145      	bne.n	8003186 <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b25      	ldr	r3, [pc, #148]	@ (8003194 <HAL_I2C_MspInit+0xbc>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	4a24      	ldr	r2, [pc, #144]	@ (8003194 <HAL_I2C_MspInit+0xbc>)
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	6313      	str	r3, [r2, #48]	@ 0x30
 800310a:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <HAL_I2C_MspInit+0xbc>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8003116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800311a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800311c:	2312      	movs	r3, #18
 800311e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003120:	2301      	movs	r3, #1
 8003122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003124:	2303      	movs	r3, #3
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003128:	2304      	movs	r3, #4
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	4619      	mov	r1, r3
 8003132:	4819      	ldr	r0, [pc, #100]	@ (8003198 <HAL_I2C_MspInit+0xc0>)
 8003134:	f001 fed6 	bl	8004ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8003138:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800313c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800313e:	2312      	movs	r3, #18
 8003140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003146:	2303      	movs	r3, #3
 8003148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800314a:	2304      	movs	r3, #4
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	4619      	mov	r1, r3
 8003154:	4810      	ldr	r0, [pc, #64]	@ (8003198 <HAL_I2C_MspInit+0xc0>)
 8003156:	f001 fec5 	bl	8004ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <HAL_I2C_MspInit+0xbc>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a0c      	ldr	r2, [pc, #48]	@ (8003194 <HAL_I2C_MspInit+0xbc>)
 8003164:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_I2C_MspInit+0xbc>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	2021      	movs	r0, #33	@ 0x21
 800317c:	f001 fe3d 	bl	8004dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003180:	2021      	movs	r0, #33	@ 0x21
 8003182:	f001 fe56 	bl	8004e32 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003186:	bf00      	nop
 8003188:	3728      	adds	r7, #40	@ 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40005800 	.word	0x40005800
 8003194:	40023800 	.word	0x40023800
 8003198:	40020400 	.word	0x40020400

0800319c <HAL_SD_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hsd: SD handle pointer
 * @retval None
 */
void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if (hsd->Instance == SDIO)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2c      	ldr	r2, [pc, #176]	@ (800326c <HAL_SD_MspInit+0xd0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d152      	bne.n	8003264 <HAL_SD_MspInit+0xc8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003270 <HAL_SD_MspInit+0xd4>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003270 <HAL_SD_MspInit+0xd4>)
 80031c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ce:	4b28      	ldr	r3, [pc, #160]	@ (8003270 <HAL_SD_MspInit+0xd4>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b24      	ldr	r3, [pc, #144]	@ (8003270 <HAL_SD_MspInit+0xd4>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <HAL_SD_MspInit+0xd4>)
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ea:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <HAL_SD_MspInit+0xd4>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003270 <HAL_SD_MspInit+0xd4>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003270 <HAL_SD_MspInit+0xd4>)
 8003200:	f043 0308 	orr.w	r3, r3, #8
 8003204:	6313      	str	r3, [r2, #48]	@ 0x30
 8003206:	4b1a      	ldr	r3, [pc, #104]	@ (8003270 <HAL_SD_MspInit+0xd4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 8003212:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800321c:	2301      	movs	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003220:	2303      	movs	r3, #3
 8003222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003224:	230c      	movs	r3, #12
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	4619      	mov	r1, r3
 800322e:	4811      	ldr	r0, [pc, #68]	@ (8003274 <HAL_SD_MspInit+0xd8>)
 8003230:	f001 fe58 	bl	8004ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003234:	2304      	movs	r3, #4
 8003236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003238:	2302      	movs	r3, #2
 800323a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800323c:	2301      	movs	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003240:	2303      	movs	r3, #3
 8003242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003244:	230c      	movs	r3, #12
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4619      	mov	r1, r3
 800324e:	480a      	ldr	r0, [pc, #40]	@ (8003278 <HAL_SD_MspInit+0xdc>)
 8003250:	f001 fe48 	bl	8004ee4 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2100      	movs	r1, #0
 8003258:	2031      	movs	r0, #49	@ 0x31
 800325a:	f001 fdce 	bl	8004dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800325e:	2031      	movs	r0, #49	@ 0x31
 8003260:	f001 fde7 	bl	8004e32 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SDIO_MspInit 1 */

    /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003264:	bf00      	nop
 8003266:	3728      	adds	r7, #40	@ 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40023800 	.word	0x40023800
 8003274:	40020800 	.word	0x40020800
 8003278:	40020c00 	.word	0x40020c00

0800327c <HAL_SPI_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	@ 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if (hspi->Instance == SPI1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a28      	ldr	r2, [pc, #160]	@ (800333c <HAL_SPI_MspInit+0xc0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d149      	bne.n	8003332 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	4b27      	ldr	r3, [pc, #156]	@ (8003340 <HAL_SPI_MspInit+0xc4>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	4a26      	ldr	r2, [pc, #152]	@ (8003340 <HAL_SPI_MspInit+0xc4>)
 80032a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ae:	4b24      	ldr	r3, [pc, #144]	@ (8003340 <HAL_SPI_MspInit+0xc4>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <HAL_SPI_MspInit+0xc4>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003340 <HAL_SPI_MspInit+0xc4>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003340 <HAL_SPI_MspInit+0xc4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <HAL_SPI_MspInit+0xc4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	4a18      	ldr	r2, [pc, #96]	@ (8003340 <HAL_SPI_MspInit+0xc4>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e6:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <HAL_SPI_MspInit+0xc4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin | MOSI_Pin;
 80032f2:	23c0      	movs	r3, #192	@ 0xc0
 80032f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fe:	2303      	movs	r3, #3
 8003300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003302:	2305      	movs	r3, #5
 8003304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003306:	f107 0314 	add.w	r3, r7, #20
 800330a:	4619      	mov	r1, r3
 800330c:	480d      	ldr	r0, [pc, #52]	@ (8003344 <HAL_SPI_MspInit+0xc8>)
 800330e:	f001 fde9 	bl	8004ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8003312:	2308      	movs	r3, #8
 8003314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331e:	2303      	movs	r3, #3
 8003320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003322:	2305      	movs	r3, #5
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4619      	mov	r1, r3
 800332c:	4806      	ldr	r0, [pc, #24]	@ (8003348 <HAL_SPI_MspInit+0xcc>)
 800332e:	f001 fdd9 	bl	8004ee4 <HAL_GPIO_Init>

    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003332:	bf00      	nop
 8003334:	3728      	adds	r7, #40	@ 0x28
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40013000 	.word	0x40013000
 8003340:	40023800 	.word	0x40023800
 8003344:	40020000 	.word	0x40020000
 8003348:	40020400 	.word	0x40020400

0800334c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <NMI_Handler+0x4>

08003354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <HardFault_Handler+0x4>

0800335c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <MemManage_Handler+0x4>

08003364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <BusFault_Handler+0x4>

0800336c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003370:	bf00      	nop
 8003372:	e7fd      	b.n	8003370 <UsageFault_Handler+0x4>

08003374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a2:	f000 f981 	bl	80036a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}

080033aa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80033ae:	2010      	movs	r0, #16
 80033b0:	f001 ff80 	bl	80052b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80033bc:	4802      	ldr	r0, [pc, #8]	@ (80033c8 <CAN1_TX_IRQHandler+0x10>)
 80033be:	f001 f9ed 	bl	800479c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200006e8 	.word	0x200006e8

080033cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80033d0:	4802      	ldr	r0, [pc, #8]	@ (80033dc <I2C2_EV_IRQHandler+0x10>)
 80033d2:	f002 fc0d 	bl	8005bf0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200004ac 	.word	0x200004ac

080033e0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80033e4:	4802      	ldr	r0, [pc, #8]	@ (80033f0 <SDIO_IRQHandler+0x10>)
 80033e6:	f005 fbf5 	bl	8008bd4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000600 	.word	0x20000600

080033f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033fc:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <_sbrk+0x5c>)
 80033fe:	4b15      	ldr	r3, [pc, #84]	@ (8003454 <_sbrk+0x60>)
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003408:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <_sbrk+0x64>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003410:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <_sbrk+0x64>)
 8003412:	4a12      	ldr	r2, [pc, #72]	@ (800345c <_sbrk+0x68>)
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <_sbrk+0x64>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	429a      	cmp	r2, r3
 8003422:	d207      	bcs.n	8003434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003424:	f00a f9de 	bl	800d7e4 <__errno>
 8003428:	4603      	mov	r3, r0
 800342a:	220c      	movs	r2, #12
 800342c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	e009      	b.n	8003448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003434:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <_sbrk+0x64>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <_sbrk+0x64>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	4a05      	ldr	r2, [pc, #20]	@ (8003458 <_sbrk+0x64>)
 8003444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20020000 	.word	0x20020000
 8003454:	00000400 	.word	0x00000400
 8003458:	200002f8 	.word	0x200002f8
 800345c:	20000b88 	.word	0x20000b88

08003460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <SystemInit+0x20>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	4a05      	ldr	r2, [pc, #20]	@ (8003480 <SystemInit+0x20>)
 800346c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003470:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <Task2_LedBlink>:

/**
 * @brief Thực hiện một lần nháy (toggle) LED và delay cho Task 2.
 */
void Task2_LedBlink(GPIO_TypeDef *ledPort, uint16_t ledPin, uint32_t blinkSpeed_ms) // Sử dụng tên hàm mới (nếu đổi)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	460b      	mov	r3, r1
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_TogglePin(ledPort, ledPin);
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	4619      	mov	r1, r3
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f001 fef1 	bl	800527e <HAL_GPIO_TogglePin>
  HAL_Delay(blinkSpeed_ms);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f923 	bl	80036e8 <HAL_Delay>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <Read_Internal_Temperature>:

float Read_Internal_Temperature(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
  uint32_t adc_value = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  float temperature_celsius = 0.0f;
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]

  HAL_ADC_Start(&hadc1);                                // Khởi động ADC1
 80034bc:	481b      	ldr	r0, [pc, #108]	@ (800352c <Read_Internal_Temperature+0x80>)
 80034be:	f000 f97b 	bl	80037b8 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) // Chờ chuyển đổi, timeout 100ms
 80034c2:	2164      	movs	r1, #100	@ 0x64
 80034c4:	4819      	ldr	r0, [pc, #100]	@ (800352c <Read_Internal_Temperature+0x80>)
 80034c6:	f000 fa7c 	bl	80039c2 <HAL_ADC_PollForConversion>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <Read_Internal_Temperature+0x2c>
  {
    adc_value = HAL_ADC_GetValue(&hadc1); // Đọc giá trị ADC
 80034d0:	4816      	ldr	r0, [pc, #88]	@ (800352c <Read_Internal_Temperature+0x80>)
 80034d2:	f000 fb01 	bl	8003ad8 <HAL_ADC_GetValue>
 80034d6:	60f8      	str	r0, [r7, #12]
  }
  HAL_ADC_Stop(&hadc1); // Dừng ADC1
 80034d8:	4814      	ldr	r0, [pc, #80]	@ (800352c <Read_Internal_Temperature+0x80>)
 80034da:	f000 fa3f 	bl	800395c <HAL_ADC_Stop>

  // Công thức tính nhiệt độ từ datasheet (có thể cần điều chỉnh)
  // Temperature(in °C) = {(V SENSE – V 25 ) / Avg_Slope} + 25
  // V SENSE = adc_value * VREF_MV / ADC_MAX_VALUE
  float vsense_mv = ((float)adc_value * ADC_VREF_MV) / ADC_MAX_VALUE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003530 <Read_Internal_Temperature+0x84>
 80034ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034f0:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003534 <Read_Internal_Temperature+0x88>
 80034f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034f8:	edc7 7a01 	vstr	s15, [r7, #4]
  temperature_celsius = (vsense_mv - TEMP_SENSOR_V25_MV) / TEMP_SENSOR_AVG_SLOPE_MV_PER_C + 25.0f;
 80034fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003500:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003538 <Read_Internal_Temperature+0x8c>
 8003504:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003508:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 800350c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003510:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003514:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003518:	edc7 7a02 	vstr	s15, [r7, #8]

  return temperature_celsius;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	ee07 3a90 	vmov	s15, r3
}
 8003522:	eeb0 0a67 	vmov.f32	s0, s15
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	2000055c 	.word	0x2000055c
 8003530:	454e4000 	.word	0x454e4000
 8003534:	457ff000 	.word	0x457ff000
 8003538:	443e0000 	.word	0x443e0000

0800353c <CheckUserButtonAndSaveTemp>:
 * @brief Kiểm tra nút User Button và ghi nhiệt độ vào FRAM ngay lập tức khi nút được nhấn
 * @param previous_state Con trỏ đến biến lưu trạng thái nút trước đó
 * @retval None
 */
void CheckUserButtonAndSaveTemp(GPIO_PinState *previous_state)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  // Đọc trạng thái hiện tại của nút
  GPIO_PinState current_button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8003544:	2102      	movs	r1, #2
 8003546:	4817      	ldr	r0, [pc, #92]	@ (80035a4 <CheckUserButtonAndSaveTemp+0x68>)
 8003548:	f001 fe68 	bl	800521c <HAL_GPIO_ReadPin>
 800354c:	4603      	mov	r3, r0
 800354e:	73fb      	strb	r3, [r7, #15]

  // Kiểm tra xem nút vừa được nhấn xuống (phát hiện cạnh xuống)
  if (current_button_state == GPIO_PIN_SET && *previous_state == GPIO_PIN_RESET)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d11f      	bne.n	8003596 <CheckUserButtonAndSaveTemp+0x5a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11b      	bne.n	8003596 <CheckUserButtonAndSaveTemp+0x5a>
  {
    // Nút vừa được nhấn xuống
    // Đọc nhiệt độ từ cảm biến
    uint8_t current_temp = (uint8_t)Read_Internal_Temperature();
 800355e:	f7ff ffa5 	bl	80034ac <Read_Internal_Temperature>
 8003562:	eef0 7a40 	vmov.f32	s15, s0
 8003566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800356a:	edc7 7a00 	vstr	s15, [r7]
 800356e:	783b      	ldrb	r3, [r7, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	737b      	strb	r3, [r7, #13]

    // Ghi nhiệt độ vào FRAM tại địa chỉ cố định, ghi đè lên giá trị cũ
    HAL_StatusTypeDef status = FRAM_WriteBytes(&hi2c2, USER_TEMP_ADDR, &current_temp, 1);
 8003574:	f107 020d 	add.w	r2, r7, #13
 8003578:	2301      	movs	r3, #1
 800357a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800357e:	480a      	ldr	r0, [pc, #40]	@ (80035a8 <CheckUserButtonAndSaveTemp+0x6c>)
 8003580:	f7fd fc9a 	bl	8000eb8 <FRAM_WriteBytes>
 8003584:	4603      	mov	r3, r0
 8003586:	73bb      	strb	r3, [r7, #14]

    // Chớp LED để thông báo đã ghi
    if (status == HAL_OK)
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <CheckUserButtonAndSaveTemp+0x5a>
    {
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800358e:	2102      	movs	r1, #2
 8003590:	4806      	ldr	r0, [pc, #24]	@ (80035ac <CheckUserButtonAndSaveTemp+0x70>)
 8003592:	f001 fe74 	bl	800527e <HAL_GPIO_TogglePin>
    }
  }

  // Cập nhật trạng thái nút trước đó
  *previous_state = current_button_state;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40020000 	.word	0x40020000
 80035a8:	200004ac 	.word	0x200004ac
 80035ac:	40020400 	.word	0x40020400

080035b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035b4:	f7ff ff54 	bl	8003460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035b8:	480c      	ldr	r0, [pc, #48]	@ (80035ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035ba:	490d      	ldr	r1, [pc, #52]	@ (80035f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035bc:	4a0d      	ldr	r2, [pc, #52]	@ (80035f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c0:	e002      	b.n	80035c8 <LoopCopyDataInit>

080035c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035c6:	3304      	adds	r3, #4

080035c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035cc:	d3f9      	bcc.n	80035c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ce:	4a0a      	ldr	r2, [pc, #40]	@ (80035f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035d0:	4c0a      	ldr	r4, [pc, #40]	@ (80035fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80035d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035d4:	e001      	b.n	80035da <LoopFillZerobss>

080035d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035d8:	3204      	adds	r2, #4

080035da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035dc:	d3fb      	bcc.n	80035d6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80035de:	f00a f907 	bl	800d7f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035e2:	f7fd fcaf 	bl	8000f44 <main>
  bx  lr    
 80035e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80035f4:	0800e570 	.word	0x0800e570
  ldr r2, =_sbss
 80035f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80035fc:	20000b88 	.word	0x20000b88

08003600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003600:	e7fe      	b.n	8003600 <ADC_IRQHandler>
	...

08003604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003608:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <HAL_Init+0x40>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0d      	ldr	r2, [pc, #52]	@ (8003644 <HAL_Init+0x40>)
 800360e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003614:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <HAL_Init+0x40>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0a      	ldr	r2, [pc, #40]	@ (8003644 <HAL_Init+0x40>)
 800361a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800361e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003620:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <HAL_Init+0x40>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a07      	ldr	r2, [pc, #28]	@ (8003644 <HAL_Init+0x40>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800362a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800362c:	2003      	movs	r0, #3
 800362e:	f001 fbd9 	bl	8004de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003632:	200f      	movs	r0, #15
 8003634:	f000 f808 	bl	8003648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003638:	f7ff fc5a 	bl	8002ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023c00 	.word	0x40023c00

08003648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003650:	4b12      	ldr	r3, [pc, #72]	@ (800369c <HAL_InitTick+0x54>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <HAL_InitTick+0x58>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800365e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003662:	fbb2 f3f3 	udiv	r3, r2, r3
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fbff 	bl	8004e6a <HAL_SYSTICK_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e00e      	b.n	8003694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b0f      	cmp	r3, #15
 800367a:	d80a      	bhi.n	8003692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800367c:	2200      	movs	r2, #0
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f001 fbb9 	bl	8004dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003688:	4a06      	ldr	r2, [pc, #24]	@ (80036a4 <HAL_InitTick+0x5c>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20000004 	.word	0x20000004
 80036a0:	2000000c 	.word	0x2000000c
 80036a4:	20000008 	.word	0x20000008

080036a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036ac:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_IncTick+0x20>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <HAL_IncTick+0x24>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	4a04      	ldr	r2, [pc, #16]	@ (80036cc <HAL_IncTick+0x24>)
 80036ba:	6013      	str	r3, [r2, #0]
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	2000000c 	.word	0x2000000c
 80036cc:	2000071c 	.word	0x2000071c

080036d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return uwTick;
 80036d4:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <HAL_GetTick+0x14>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	2000071c 	.word	0x2000071c

080036e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036f0:	f7ff ffee 	bl	80036d0 <HAL_GetTick>
 80036f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d005      	beq.n	800370e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003702:	4b0a      	ldr	r3, [pc, #40]	@ (800372c <HAL_Delay+0x44>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800370e:	bf00      	nop
 8003710:	f7ff ffde 	bl	80036d0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d8f7      	bhi.n	8003710 <HAL_Delay+0x28>
  {
  }
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2000000c 	.word	0x2000000c

08003730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e033      	b.n	80037ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fbf6 	bl	8002f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003776:	f023 0302 	bic.w	r3, r3, #2
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fad8 	bl	8003d38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
 800379e:	e001      	b.n	80037a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_Start+0x1a>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e0b2      	b.n	8003938 <HAL_ADC_Start+0x180>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d018      	beq.n	800381a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037f8:	4b52      	ldr	r3, [pc, #328]	@ (8003944 <HAL_ADC_Start+0x18c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a52      	ldr	r2, [pc, #328]	@ (8003948 <HAL_ADC_Start+0x190>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	0c9a      	lsrs	r2, r3, #18
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800380c:	e002      	b.n	8003814 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3b01      	subs	r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f9      	bne.n	800380e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d17a      	bne.n	800391e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003852:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003866:	d106      	bne.n	8003876 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	f023 0206 	bic.w	r2, r3, #6
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	645a      	str	r2, [r3, #68]	@ 0x44
 8003874:	e002      	b.n	800387c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003884:	4b31      	ldr	r3, [pc, #196]	@ (800394c <HAL_ADC_Start+0x194>)
 8003886:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003890:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2b00      	cmp	r3, #0
 800389c:	d12a      	bne.n	80038f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003950 <HAL_ADC_Start+0x198>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d015      	beq.n	80038d4 <HAL_ADC_Start+0x11c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a29      	ldr	r2, [pc, #164]	@ (8003954 <HAL_ADC_Start+0x19c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d105      	bne.n	80038be <HAL_ADC_Start+0x106>
 80038b2:	4b26      	ldr	r3, [pc, #152]	@ (800394c <HAL_ADC_Start+0x194>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a25      	ldr	r2, [pc, #148]	@ (8003958 <HAL_ADC_Start+0x1a0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d136      	bne.n	8003936 <HAL_ADC_Start+0x17e>
 80038c8:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_ADC_Start+0x194>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d130      	bne.n	8003936 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d129      	bne.n	8003936 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	e020      	b.n	8003936 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a15      	ldr	r2, [pc, #84]	@ (8003950 <HAL_ADC_Start+0x198>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d11b      	bne.n	8003936 <HAL_ADC_Start+0x17e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d114      	bne.n	8003936 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	e00b      	b.n	8003936 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	f043 0210 	orr.w	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	20000004 	.word	0x20000004
 8003948:	431bde83 	.word	0x431bde83
 800394c:	40012300 	.word	0x40012300
 8003950:	40012000 	.word	0x40012000
 8003954:	40012100 	.word	0x40012100
 8003958:	40012200 	.word	0x40012200

0800395c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_ADC_Stop+0x16>
 800396e:	2302      	movs	r3, #2
 8003970:	e021      	b.n	80039b6 <HAL_ADC_Stop+0x5a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039de:	d113      	bne.n	8003a08 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ee:	d10b      	bne.n	8003a08 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e063      	b.n	8003ad0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a08:	f7ff fe62 	bl	80036d0 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a0e:	e021      	b.n	8003a54 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d01d      	beq.n	8003a54 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <HAL_ADC_PollForConversion+0x6c>
 8003a1e:	f7ff fe57 	bl	80036d0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d212      	bcs.n	8003a54 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d00b      	beq.n	8003a54 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e03d      	b.n	8003ad0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d1d6      	bne.n	8003a10 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f06f 0212 	mvn.w	r2, #18
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d123      	bne.n	8003ace <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d11f      	bne.n	8003ace <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d111      	bne.n	8003ace <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1c>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e105      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x228>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	d925      	bls.n	8003b6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68d9      	ldr	r1, [r3, #12]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	3b1e      	subs	r3, #30
 8003b36:	2207      	movs	r2, #7
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	400a      	ands	r2, r1
 8003b44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68d9      	ldr	r1, [r3, #12]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	4618      	mov	r0, r3
 8003b58:	4603      	mov	r3, r0
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4403      	add	r3, r0
 8003b5e:	3b1e      	subs	r3, #30
 8003b60:	409a      	lsls	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	e022      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6919      	ldr	r1, [r3, #16]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	2207      	movs	r2, #7
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6919      	ldr	r1, [r3, #16]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4403      	add	r3, r0
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d824      	bhi.n	8003c04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	3b05      	subs	r3, #5
 8003bcc:	221f      	movs	r2, #31
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	400a      	ands	r2, r1
 8003bda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4618      	mov	r0, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3b05      	subs	r3, #5
 8003bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c02:	e04c      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	d824      	bhi.n	8003c56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3b23      	subs	r3, #35	@ 0x23
 8003c1e:	221f      	movs	r2, #31
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43da      	mvns	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	3b23      	subs	r3, #35	@ 0x23
 8003c48:	fa00 f203 	lsl.w	r2, r0, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c54:	e023      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	3b41      	subs	r3, #65	@ 0x41
 8003c68:	221f      	movs	r2, #31
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	400a      	ands	r2, r1
 8003c76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	4618      	mov	r0, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	3b41      	subs	r3, #65	@ 0x41
 8003c92:	fa00 f203 	lsl.w	r2, r0, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c9e:	4b22      	ldr	r3, [pc, #136]	@ (8003d28 <HAL_ADC_ConfigChannel+0x234>)
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a21      	ldr	r2, [pc, #132]	@ (8003d2c <HAL_ADC_ConfigChannel+0x238>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d109      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x1cc>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b12      	cmp	r3, #18
 8003cb2:	d105      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a19      	ldr	r2, [pc, #100]	@ (8003d2c <HAL_ADC_ConfigChannel+0x238>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d123      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x21e>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	d003      	beq.n	8003cda <HAL_ADC_ConfigChannel+0x1e6>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b11      	cmp	r3, #17
 8003cd8:	d11b      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d111      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cee:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <HAL_ADC_ConfigChannel+0x23c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a10      	ldr	r2, [pc, #64]	@ (8003d34 <HAL_ADC_ConfigChannel+0x240>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	0c9a      	lsrs	r2, r3, #18
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003d04:	e002      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f9      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40012300 	.word	0x40012300
 8003d2c:	40012000 	.word	0x40012000
 8003d30:	20000004 	.word	0x20000004
 8003d34:	431bde83 	.word	0x431bde83

08003d38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d40:	4b79      	ldr	r3, [pc, #484]	@ (8003f28 <ADC_Init+0x1f0>)
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	021a      	lsls	r2, r3, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6899      	ldr	r1, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	4a58      	ldr	r2, [pc, #352]	@ (8003f2c <ADC_Init+0x1f4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d022      	beq.n	8003e16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003dde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6899      	ldr	r1, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6899      	ldr	r1, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	e00f      	b.n	8003e36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0202 	bic.w	r2, r2, #2
 8003e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6899      	ldr	r1, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7e1b      	ldrb	r3, [r3, #24]
 8003e50:	005a      	lsls	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01b      	beq.n	8003e9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003e82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	035a      	lsls	r2, r3, #13
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	e007      	b.n	8003eac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	051a      	lsls	r2, r3, #20
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6899      	ldr	r1, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003eee:	025a      	lsls	r2, r3, #9
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6899      	ldr	r1, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	029a      	lsls	r2, r3, #10
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	40012300 	.word	0x40012300
 8003f2c:	0f000001 	.word	0x0f000001

08003f30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0ed      	b.n	800411e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff f818 	bl	8002f84 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f64:	f7ff fbb4 	bl	80036d0 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f6a:	e012      	b.n	8003f92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f6c:	f7ff fbb0 	bl	80036d0 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b0a      	cmp	r3, #10
 8003f78:	d90b      	bls.n	8003f92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2205      	movs	r2, #5
 8003f8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e0c5      	b.n	800411e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0e5      	beq.n	8003f6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0202 	bic.w	r2, r2, #2
 8003fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb0:	f7ff fb8e 	bl	80036d0 <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fb6:	e012      	b.n	8003fde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fb8:	f7ff fb8a 	bl	80036d0 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b0a      	cmp	r3, #10
 8003fc4:	d90b      	bls.n	8003fde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2205      	movs	r2, #5
 8003fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e09f      	b.n	800411e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e5      	bne.n	8003fb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	7e1b      	ldrb	r3, [r3, #24]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d108      	bne.n	8004006 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e007      	b.n	8004016 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004014:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7e5b      	ldrb	r3, [r3, #25]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d108      	bne.n	8004030 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e007      	b.n	8004040 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7e9b      	ldrb	r3, [r3, #26]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d108      	bne.n	800405a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0220 	orr.w	r2, r2, #32
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e007      	b.n	800406a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0220 	bic.w	r2, r2, #32
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7edb      	ldrb	r3, [r3, #27]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d108      	bne.n	8004084 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0210 	bic.w	r2, r2, #16
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e007      	b.n	8004094 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0210 	orr.w	r2, r2, #16
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7f1b      	ldrb	r3, [r3, #28]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d108      	bne.n	80040ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0208 	orr.w	r2, r2, #8
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e007      	b.n	80040be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0208 	bic.w	r2, r2, #8
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	7f5b      	ldrb	r3, [r3, #29]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d108      	bne.n	80040d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0204 	orr.w	r2, r2, #4
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e007      	b.n	80040e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0204 	bic.w	r2, r2, #4
 80040e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	ea42 0103 	orr.w	r1, r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	1e5a      	subs	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004138:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d003      	beq.n	8004148 <HAL_CAN_ConfigFilter+0x20>
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b02      	cmp	r3, #2
 8004144:	f040 80be 	bne.w	80042c4 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004148:	4b65      	ldr	r3, [pc, #404]	@ (80042e0 <HAL_CAN_ConfigFilter+0x1b8>)
 800414a:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004162:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	431a      	orrs	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2201      	movs	r2, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	43db      	mvns	r3, r3
 800419a:	401a      	ands	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d123      	bne.n	80041f2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	401a      	ands	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3248      	adds	r2, #72	@ 0x48
 80041d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041e8:	6939      	ldr	r1, [r7, #16]
 80041ea:	3348      	adds	r3, #72	@ 0x48
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d122      	bne.n	8004240 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	431a      	orrs	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800421a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3248      	adds	r2, #72	@ 0x48
 8004220:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004234:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004236:	6939      	ldr	r1, [r7, #16]
 8004238:	3348      	adds	r3, #72	@ 0x48
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	440b      	add	r3, r1
 800423e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800425a:	e007      	b.n	800426c <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	431a      	orrs	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	43db      	mvns	r3, r3
 800427e:	401a      	ands	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004286:	e007      	b.n	8004298 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	431a      	orrs	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80042b6:	f023 0201 	bic.w	r2, r3, #1
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e006      	b.n	80042d2 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40006400 	.word	0x40006400

080042e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d12e      	bne.n	8004356 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004310:	f7ff f9de 	bl	80036d0 <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004316:	e012      	b.n	800433e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004318:	f7ff f9da 	bl	80036d0 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b0a      	cmp	r3, #10
 8004324:	d90b      	bls.n	800433e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2205      	movs	r2, #5
 8004336:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e012      	b.n	8004364 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e5      	bne.n	8004318 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e006      	b.n	8004364 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
  }
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	@ 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004380:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800438a:	7ffb      	ldrb	r3, [r7, #31]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d003      	beq.n	8004398 <HAL_CAN_AddTxMessage+0x2c>
 8004390:	7ffb      	ldrb	r3, [r7, #31]
 8004392:	2b02      	cmp	r3, #2
 8004394:	f040 80ad 	bne.w	80044f2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8095 	beq.w	80044e2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	0e1b      	lsrs	r3, r3, #24
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80043c2:	2201      	movs	r2, #1
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	409a      	lsls	r2, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	6809      	ldr	r1, [r1, #0]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3318      	adds	r3, #24
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	440b      	add	r3, r1
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	e00f      	b.n	8004410 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80043fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004404:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3318      	adds	r3, #24
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	440b      	add	r3, r1
 800440e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	3318      	adds	r3, #24
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	440b      	add	r3, r1
 8004420:	3304      	adds	r3, #4
 8004422:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	7d1b      	ldrb	r3, [r3, #20]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d111      	bne.n	8004450 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	3318      	adds	r3, #24
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	4413      	add	r3, r2
 8004438:	3304      	adds	r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6811      	ldr	r1, [r2, #0]
 8004440:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	3318      	adds	r3, #24
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	440b      	add	r3, r1
 800444c:	3304      	adds	r3, #4
 800444e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3307      	adds	r3, #7
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	061a      	lsls	r2, r3, #24
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3306      	adds	r3, #6
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3305      	adds	r3, #5
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	4313      	orrs	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	3204      	adds	r2, #4
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	4610      	mov	r0, r2
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	6811      	ldr	r1, [r2, #0]
 8004478:	ea43 0200 	orr.w	r2, r3, r0
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	440b      	add	r3, r1
 8004482:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004486:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3303      	adds	r3, #3
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	061a      	lsls	r2, r3, #24
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3302      	adds	r3, #2
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3301      	adds	r3, #1
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	4313      	orrs	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	4610      	mov	r0, r2
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	6811      	ldr	r1, [r2, #0]
 80044ae:	ea43 0200 	orr.w	r2, r3, r0
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	440b      	add	r3, r1
 80044b8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80044bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	3318      	adds	r3, #24
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	4413      	add	r3, r2
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	6811      	ldr	r1, [r2, #0]
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3318      	adds	r3, #24
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	440b      	add	r3, r1
 80044dc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e00e      	b.n	8004500 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e006      	b.n	8004500 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
  }
}
 8004500:	4618      	mov	r0, r3
 8004502:	3724      	adds	r7, #36	@ 0x24
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004520:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d003      	beq.n	8004530 <HAL_CAN_GetRxMessage+0x24>
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	2b02      	cmp	r3, #2
 800452c:	f040 8103 	bne.w	8004736 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10e      	bne.n	8004554 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d116      	bne.n	8004572 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0f7      	b.n	8004744 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d107      	bne.n	8004572 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004566:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0e8      	b.n	8004744 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	331b      	adds	r3, #27
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	4413      	add	r3, r2
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0204 	and.w	r2, r3, #4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10c      	bne.n	80045aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	331b      	adds	r3, #27
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	4413      	add	r3, r2
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	0d5b      	lsrs	r3, r3, #21
 80045a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e00b      	b.n	80045c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	331b      	adds	r3, #27
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	4413      	add	r3, r2
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	08db      	lsrs	r3, r3, #3
 80045ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	331b      	adds	r3, #27
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	4413      	add	r3, r2
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0202 	and.w	r2, r3, #2
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	331b      	adds	r3, #27
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	4413      	add	r3, r2
 80045e4:	3304      	adds	r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2208      	movs	r2, #8
 80045f4:	611a      	str	r2, [r3, #16]
 80045f6:	e00b      	b.n	8004610 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	331b      	adds	r3, #27
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	4413      	add	r3, r2
 8004604:	3304      	adds	r3, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 020f 	and.w	r2, r3, #15
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	331b      	adds	r3, #27
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	4413      	add	r3, r2
 800461c:	3304      	adds	r3, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	b2da      	uxtb	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	331b      	adds	r3, #27
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	4413      	add	r3, r2
 8004634:	3304      	adds	r3, #4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	4413      	add	r3, r2
 800464a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	4413      	add	r3, r2
 8004660:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	0a1a      	lsrs	r2, r3, #8
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	3301      	adds	r3, #1
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	4413      	add	r3, r2
 800467a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	0c1a      	lsrs	r2, r3, #16
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	3302      	adds	r3, #2
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	4413      	add	r3, r2
 8004694:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	0e1a      	lsrs	r2, r3, #24
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	3303      	adds	r3, #3
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	3304      	adds	r3, #4
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	0a1a      	lsrs	r2, r3, #8
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	3305      	adds	r3, #5
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	4413      	add	r3, r2
 80046e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	0c1a      	lsrs	r2, r3, #16
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	3306      	adds	r3, #6
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0e1a      	lsrs	r2, r3, #24
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	3307      	adds	r3, #7
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d108      	bne.n	8004722 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0220 	orr.w	r2, r2, #32
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	e007      	b.n	8004732 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0220 	orr.w	r2, r2, #32
 8004730:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e006      	b.n	8004744 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004760:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d002      	beq.n	800476e <HAL_CAN_ActivateNotification+0x1e>
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d109      	bne.n	8004782 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6959      	ldr	r1, [r3, #20]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e006      	b.n	8004790 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	@ 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d07c      	beq.n	80048dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d023      	beq.n	8004834 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2201      	movs	r2, #1
 80047f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f983 	bl	8004b0a <HAL_CAN_TxMailbox0CompleteCallback>
 8004804:	e016      	b.n	8004834 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004816:	627b      	str	r3, [r7, #36]	@ 0x24
 8004818:	e00c      	b.n	8004834 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
 800482c:	e002      	b.n	8004834 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f989 	bl	8004b46 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d024      	beq.n	8004888 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004846:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f963 	bl	8004b1e <HAL_CAN_TxMailbox1CompleteCallback>
 8004858:	e016      	b.n	8004888 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
 800486c:	e00c      	b.n	8004888 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004880:	e002      	b.n	8004888 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f969 	bl	8004b5a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d024      	beq.n	80048dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800489a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f943 	bl	8004b32 <HAL_CAN_TxMailbox2CompleteCallback>
 80048ac:	e016      	b.n	80048dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d004      	beq.n	80048c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c0:	e00c      	b.n	80048dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048d4:	e002      	b.n	80048dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f949 	bl	8004b6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00c      	beq.n	8004900 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2210      	movs	r2, #16
 80048fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00b      	beq.n	8004922 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d006      	beq.n	8004922 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2208      	movs	r2, #8
 800491a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f930 	bl	8004b82 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fd f8b0 	bl	8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800495a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2210      	movs	r2, #16
 8004962:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d006      	beq.n	8004986 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2208      	movs	r2, #8
 800497e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f912 	bl	8004baa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f8f9 	bl	8004b96 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d006      	beq.n	80049c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2210      	movs	r2, #16
 80049be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8fc 	bl	8004bbe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00b      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d006      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2208      	movs	r2, #8
 80049e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8f5 	bl	8004bd2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d07b      	beq.n	8004aea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d072      	beq.n	8004ae2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d008      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	f043 0302 	orr.w	r3, r3, #2
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	f043 0304 	orr.w	r3, r3, #4
 8004a4e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d043      	beq.n	8004ae2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d03e      	beq.n	8004ae2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a6a:	2b60      	cmp	r3, #96	@ 0x60
 8004a6c:	d02b      	beq.n	8004ac6 <HAL_CAN_IRQHandler+0x32a>
 8004a6e:	2b60      	cmp	r3, #96	@ 0x60
 8004a70:	d82e      	bhi.n	8004ad0 <HAL_CAN_IRQHandler+0x334>
 8004a72:	2b50      	cmp	r3, #80	@ 0x50
 8004a74:	d022      	beq.n	8004abc <HAL_CAN_IRQHandler+0x320>
 8004a76:	2b50      	cmp	r3, #80	@ 0x50
 8004a78:	d82a      	bhi.n	8004ad0 <HAL_CAN_IRQHandler+0x334>
 8004a7a:	2b40      	cmp	r3, #64	@ 0x40
 8004a7c:	d019      	beq.n	8004ab2 <HAL_CAN_IRQHandler+0x316>
 8004a7e:	2b40      	cmp	r3, #64	@ 0x40
 8004a80:	d826      	bhi.n	8004ad0 <HAL_CAN_IRQHandler+0x334>
 8004a82:	2b30      	cmp	r3, #48	@ 0x30
 8004a84:	d010      	beq.n	8004aa8 <HAL_CAN_IRQHandler+0x30c>
 8004a86:	2b30      	cmp	r3, #48	@ 0x30
 8004a88:	d822      	bhi.n	8004ad0 <HAL_CAN_IRQHandler+0x334>
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d002      	beq.n	8004a94 <HAL_CAN_IRQHandler+0x2f8>
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d005      	beq.n	8004a9e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004a92:	e01d      	b.n	8004ad0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	f043 0308 	orr.w	r3, r3, #8
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004a9c:	e019      	b.n	8004ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	f043 0310 	orr.w	r3, r3, #16
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004aa6:	e014      	b.n	8004ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	f043 0320 	orr.w	r3, r3, #32
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ab0:	e00f      	b.n	8004ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004aba:	e00a      	b.n	8004ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ac4:	e005      	b.n	8004ad2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ace:	e000      	b.n	8004ad2 <HAL_CAN_IRQHandler+0x336>
            break;
 8004ad0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ae0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f872 	bl	8004be6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004b02:	bf00      	nop
 8004b04:	3728      	adds	r7, #40	@ 0x28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c40 <__NVIC_SetPriorityGrouping+0x44>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c2e:	4a04      	ldr	r2, [pc, #16]	@ (8004c40 <__NVIC_SetPriorityGrouping+0x44>)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	60d3      	str	r3, [r2, #12]
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c48:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <__NVIC_GetPriorityGrouping+0x18>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	f003 0307 	and.w	r3, r3, #7
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	db0b      	blt.n	8004c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	f003 021f 	and.w	r2, r3, #31
 8004c78:	4907      	ldr	r1, [pc, #28]	@ (8004c98 <__NVIC_EnableIRQ+0x38>)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	2001      	movs	r0, #1
 8004c82:	fa00 f202 	lsl.w	r2, r0, r2
 8004c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	e000e100 	.word	0xe000e100

08004c9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	db12      	blt.n	8004cd4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	f003 021f 	and.w	r2, r3, #31
 8004cb4:	490a      	ldr	r1, [pc, #40]	@ (8004ce0 <__NVIC_DisableIRQ+0x44>)
 8004cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004cc2:	3320      	adds	r3, #32
 8004cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cc8:	f3bf 8f4f 	dsb	sy
}
 8004ccc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cce:	f3bf 8f6f 	isb	sy
}
 8004cd2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000e100 	.word	0xe000e100

08004ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	6039      	str	r1, [r7, #0]
 8004cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	db0a      	blt.n	8004d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	490c      	ldr	r1, [pc, #48]	@ (8004d30 <__NVIC_SetPriority+0x4c>)
 8004cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d02:	0112      	lsls	r2, r2, #4
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	440b      	add	r3, r1
 8004d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d0c:	e00a      	b.n	8004d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	4908      	ldr	r1, [pc, #32]	@ (8004d34 <__NVIC_SetPriority+0x50>)
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	3b04      	subs	r3, #4
 8004d1c:	0112      	lsls	r2, r2, #4
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	440b      	add	r3, r1
 8004d22:	761a      	strb	r2, [r3, #24]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	e000e100 	.word	0xe000e100
 8004d34:	e000ed00 	.word	0xe000ed00

08004d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	@ 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f1c3 0307 	rsb	r3, r3, #7
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	bf28      	it	cs
 8004d56:	2304      	movcs	r3, #4
 8004d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	2b06      	cmp	r3, #6
 8004d60:	d902      	bls.n	8004d68 <NVIC_EncodePriority+0x30>
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3b03      	subs	r3, #3
 8004d66:	e000      	b.n	8004d6a <NVIC_EncodePriority+0x32>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43da      	mvns	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	401a      	ands	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d80:	f04f 31ff 	mov.w	r1, #4294967295
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	43d9      	mvns	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d90:	4313      	orrs	r3, r2
         );
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3724      	adds	r7, #36	@ 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004db0:	d301      	bcc.n	8004db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004db2:	2301      	movs	r3, #1
 8004db4:	e00f      	b.n	8004dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004db6:	4a0a      	ldr	r2, [pc, #40]	@ (8004de0 <SysTick_Config+0x40>)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dbe:	210f      	movs	r1, #15
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	f7ff ff8e 	bl	8004ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <SysTick_Config+0x40>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dce:	4b04      	ldr	r3, [pc, #16]	@ (8004de0 <SysTick_Config+0x40>)
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	e000e010 	.word	0xe000e010

08004de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff ff05 	bl	8004bfc <__NVIC_SetPriorityGrouping>
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b086      	sub	sp, #24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	4603      	mov	r3, r0
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e0c:	f7ff ff1a 	bl	8004c44 <__NVIC_GetPriorityGrouping>
 8004e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	6978      	ldr	r0, [r7, #20]
 8004e18:	f7ff ff8e 	bl	8004d38 <NVIC_EncodePriority>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e22:	4611      	mov	r1, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff ff5d 	bl	8004ce4 <__NVIC_SetPriority>
}
 8004e2a:	bf00      	nop
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	4603      	mov	r3, r0
 8004e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff ff0d 	bl	8004c60 <__NVIC_EnableIRQ>
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	4603      	mov	r3, r0
 8004e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff ff1d 	bl	8004c9c <__NVIC_DisableIRQ>
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff ff94 	bl	8004da0 <SysTick_Config>
 8004e78:	4603      	mov	r3, r0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d004      	beq.n	8004ea0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2280      	movs	r2, #128	@ 0x80
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e00c      	b.n	8004eba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0201 	bic.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ed4:	b2db      	uxtb	r3, r3
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	@ 0x24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e16b      	b.n	80051d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f00:	2201      	movs	r2, #1
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4013      	ands	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	f040 815a 	bne.w	80051d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d005      	beq.n	8004f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d130      	bne.n	8004f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	2203      	movs	r2, #3
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 0201 	and.w	r2, r3, #1
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d017      	beq.n	8004fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	2203      	movs	r2, #3
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d123      	bne.n	8005028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	08da      	lsrs	r2, r3, #3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3208      	adds	r2, #8
 8004fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	220f      	movs	r2, #15
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4013      	ands	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	08da      	lsrs	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3208      	adds	r2, #8
 8005022:	69b9      	ldr	r1, [r7, #24]
 8005024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	2203      	movs	r2, #3
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4013      	ands	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 0203 	and.w	r2, r3, #3
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4313      	orrs	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80b4 	beq.w	80051d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	4b60      	ldr	r3, [pc, #384]	@ (80051f0 <HAL_GPIO_Init+0x30c>)
 8005070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005072:	4a5f      	ldr	r2, [pc, #380]	@ (80051f0 <HAL_GPIO_Init+0x30c>)
 8005074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005078:	6453      	str	r3, [r2, #68]	@ 0x44
 800507a:	4b5d      	ldr	r3, [pc, #372]	@ (80051f0 <HAL_GPIO_Init+0x30c>)
 800507c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005086:	4a5b      	ldr	r2, [pc, #364]	@ (80051f4 <HAL_GPIO_Init+0x310>)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	089b      	lsrs	r3, r3, #2
 800508c:	3302      	adds	r3, #2
 800508e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	220f      	movs	r2, #15
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43db      	mvns	r3, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4013      	ands	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a52      	ldr	r2, [pc, #328]	@ (80051f8 <HAL_GPIO_Init+0x314>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d02b      	beq.n	800510a <HAL_GPIO_Init+0x226>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a51      	ldr	r2, [pc, #324]	@ (80051fc <HAL_GPIO_Init+0x318>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d025      	beq.n	8005106 <HAL_GPIO_Init+0x222>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a50      	ldr	r2, [pc, #320]	@ (8005200 <HAL_GPIO_Init+0x31c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01f      	beq.n	8005102 <HAL_GPIO_Init+0x21e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a4f      	ldr	r2, [pc, #316]	@ (8005204 <HAL_GPIO_Init+0x320>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d019      	beq.n	80050fe <HAL_GPIO_Init+0x21a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a4e      	ldr	r2, [pc, #312]	@ (8005208 <HAL_GPIO_Init+0x324>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_GPIO_Init+0x216>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a4d      	ldr	r2, [pc, #308]	@ (800520c <HAL_GPIO_Init+0x328>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00d      	beq.n	80050f6 <HAL_GPIO_Init+0x212>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a4c      	ldr	r2, [pc, #304]	@ (8005210 <HAL_GPIO_Init+0x32c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <HAL_GPIO_Init+0x20e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005214 <HAL_GPIO_Init+0x330>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d101      	bne.n	80050ee <HAL_GPIO_Init+0x20a>
 80050ea:	2307      	movs	r3, #7
 80050ec:	e00e      	b.n	800510c <HAL_GPIO_Init+0x228>
 80050ee:	2308      	movs	r3, #8
 80050f0:	e00c      	b.n	800510c <HAL_GPIO_Init+0x228>
 80050f2:	2306      	movs	r3, #6
 80050f4:	e00a      	b.n	800510c <HAL_GPIO_Init+0x228>
 80050f6:	2305      	movs	r3, #5
 80050f8:	e008      	b.n	800510c <HAL_GPIO_Init+0x228>
 80050fa:	2304      	movs	r3, #4
 80050fc:	e006      	b.n	800510c <HAL_GPIO_Init+0x228>
 80050fe:	2303      	movs	r3, #3
 8005100:	e004      	b.n	800510c <HAL_GPIO_Init+0x228>
 8005102:	2302      	movs	r3, #2
 8005104:	e002      	b.n	800510c <HAL_GPIO_Init+0x228>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <HAL_GPIO_Init+0x228>
 800510a:	2300      	movs	r3, #0
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	f002 0203 	and.w	r2, r2, #3
 8005112:	0092      	lsls	r2, r2, #2
 8005114:	4093      	lsls	r3, r2
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4313      	orrs	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800511c:	4935      	ldr	r1, [pc, #212]	@ (80051f4 <HAL_GPIO_Init+0x310>)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	089b      	lsrs	r3, r3, #2
 8005122:	3302      	adds	r3, #2
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800512a:	4b3b      	ldr	r3, [pc, #236]	@ (8005218 <HAL_GPIO_Init+0x334>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800514e:	4a32      	ldr	r2, [pc, #200]	@ (8005218 <HAL_GPIO_Init+0x334>)
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005154:	4b30      	ldr	r3, [pc, #192]	@ (8005218 <HAL_GPIO_Init+0x334>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005178:	4a27      	ldr	r2, [pc, #156]	@ (8005218 <HAL_GPIO_Init+0x334>)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800517e:	4b26      	ldr	r3, [pc, #152]	@ (8005218 <HAL_GPIO_Init+0x334>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005218 <HAL_GPIO_Init+0x334>)
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005218 <HAL_GPIO_Init+0x334>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051cc:	4a12      	ldr	r2, [pc, #72]	@ (8005218 <HAL_GPIO_Init+0x334>)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	f67f ae90 	bls.w	8004f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	3724      	adds	r7, #36	@ 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40013800 	.word	0x40013800
 80051f8:	40020000 	.word	0x40020000
 80051fc:	40020400 	.word	0x40020400
 8005200:	40020800 	.word	0x40020800
 8005204:	40020c00 	.word	0x40020c00
 8005208:	40021000 	.word	0x40021000
 800520c:	40021400 	.word	0x40021400
 8005210:	40021800 	.word	0x40021800
 8005214:	40021c00 	.word	0x40021c00
 8005218:	40013c00 	.word	0x40013c00

0800521c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	887b      	ldrh	r3, [r7, #2]
 800522e:	4013      	ands	r3, r2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	e001      	b.n	800523e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	807b      	strh	r3, [r7, #2]
 8005258:	4613      	mov	r3, r2
 800525a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800525c:	787b      	ldrb	r3, [r7, #1]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005262:	887a      	ldrh	r2, [r7, #2]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005268:	e003      	b.n	8005272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800526a:	887b      	ldrh	r3, [r7, #2]
 800526c:	041a      	lsls	r2, r3, #16
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	619a      	str	r2, [r3, #24]
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	460b      	mov	r3, r1
 8005288:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005290:	887a      	ldrh	r2, [r7, #2]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4013      	ands	r3, r2
 8005296:	041a      	lsls	r2, r3, #16
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	43d9      	mvns	r1, r3
 800529c:	887b      	ldrh	r3, [r7, #2]
 800529e:	400b      	ands	r3, r1
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	619a      	str	r2, [r3, #24]
}
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80052be:	4b08      	ldr	r3, [pc, #32]	@ (80052e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d006      	beq.n	80052d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052ca:	4a05      	ldr	r2, [pc, #20]	@ (80052e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fc fae6 	bl	80018a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40013c00 	.word	0x40013c00

080052e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e12b      	b.n	800554e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd fee4 	bl	80030d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2224      	movs	r2, #36	@ 0x24
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0201 	bic.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005336:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005346:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005348:	f003 f814 	bl	8008374 <HAL_RCC_GetPCLK1Freq>
 800534c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a81      	ldr	r2, [pc, #516]	@ (8005558 <HAL_I2C_Init+0x274>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d807      	bhi.n	8005368 <HAL_I2C_Init+0x84>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a80      	ldr	r2, [pc, #512]	@ (800555c <HAL_I2C_Init+0x278>)
 800535c:	4293      	cmp	r3, r2
 800535e:	bf94      	ite	ls
 8005360:	2301      	movls	r3, #1
 8005362:	2300      	movhi	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e006      	b.n	8005376 <HAL_I2C_Init+0x92>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4a7d      	ldr	r2, [pc, #500]	@ (8005560 <HAL_I2C_Init+0x27c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	bf94      	ite	ls
 8005370:	2301      	movls	r3, #1
 8005372:	2300      	movhi	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e0e7      	b.n	800554e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a78      	ldr	r2, [pc, #480]	@ (8005564 <HAL_I2C_Init+0x280>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	0c9b      	lsrs	r3, r3, #18
 8005388:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a6a      	ldr	r2, [pc, #424]	@ (8005558 <HAL_I2C_Init+0x274>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d802      	bhi.n	80053b8 <HAL_I2C_Init+0xd4>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	3301      	adds	r3, #1
 80053b6:	e009      	b.n	80053cc <HAL_I2C_Init+0xe8>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	4a69      	ldr	r2, [pc, #420]	@ (8005568 <HAL_I2C_Init+0x284>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	099b      	lsrs	r3, r3, #6
 80053ca:	3301      	adds	r3, #1
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80053de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	495c      	ldr	r1, [pc, #368]	@ (8005558 <HAL_I2C_Init+0x274>)
 80053e8:	428b      	cmp	r3, r1
 80053ea:	d819      	bhi.n	8005420 <HAL_I2C_Init+0x13c>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1e59      	subs	r1, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005400:	400b      	ands	r3, r1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_I2C_Init+0x138>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1e59      	subs	r1, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fbb1 f3f3 	udiv	r3, r1, r3
 8005414:	3301      	adds	r3, #1
 8005416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541a:	e051      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 800541c:	2304      	movs	r3, #4
 800541e:	e04f      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d111      	bne.n	800544c <HAL_I2C_Init+0x168>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1e58      	subs	r0, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6859      	ldr	r1, [r3, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	440b      	add	r3, r1
 8005436:	fbb0 f3f3 	udiv	r3, r0, r3
 800543a:	3301      	adds	r3, #1
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	2b00      	cmp	r3, #0
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e012      	b.n	8005472 <HAL_I2C_Init+0x18e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1e58      	subs	r0, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	0099      	lsls	r1, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005462:	3301      	adds	r3, #1
 8005464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_I2C_Init+0x196>
 8005476:	2301      	movs	r3, #1
 8005478:	e022      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10e      	bne.n	80054a0 <HAL_I2C_Init+0x1bc>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1e58      	subs	r0, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6859      	ldr	r1, [r3, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	440b      	add	r3, r1
 8005490:	fbb0 f3f3 	udiv	r3, r0, r3
 8005494:	3301      	adds	r3, #1
 8005496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800549a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800549e:	e00f      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1e58      	subs	r0, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	0099      	lsls	r1, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054b6:	3301      	adds	r3, #1
 80054b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	6809      	ldr	r1, [r1, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69da      	ldr	r2, [r3, #28]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80054ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6911      	ldr	r1, [r2, #16]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68d2      	ldr	r2, [r2, #12]
 80054fa:	4311      	orrs	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	430b      	orrs	r3, r1
 8005502:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	000186a0 	.word	0x000186a0
 800555c:	001e847f 	.word	0x001e847f
 8005560:	003d08ff 	.word	0x003d08ff
 8005564:	431bde83 	.word	0x431bde83
 8005568:	10624dd3 	.word	0x10624dd3

0800556c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557e:	2b80      	cmp	r3, #128	@ 0x80
 8005580:	d103      	bne.n	800558a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	611a      	str	r2, [r3, #16]
  }
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	4608      	mov	r0, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	461a      	mov	r2, r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	817b      	strh	r3, [r7, #10]
 80055aa:	460b      	mov	r3, r1
 80055ac:	813b      	strh	r3, [r7, #8]
 80055ae:	4613      	mov	r3, r2
 80055b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055b2:	f7fe f88d 	bl	80036d0 <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	f040 80d9 	bne.w	8005778 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	2319      	movs	r3, #25
 80055cc:	2201      	movs	r2, #1
 80055ce:	496d      	ldr	r1, [pc, #436]	@ (8005784 <HAL_I2C_Mem_Write+0x1ec>)
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f002 f81b 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
 80055de:	e0cc      	b.n	800577a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_I2C_Mem_Write+0x56>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e0c5      	b.n	800577a <HAL_I2C_Mem_Write+0x1e2>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d007      	beq.n	8005614 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005622:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2221      	movs	r2, #33	@ 0x21
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2240      	movs	r2, #64	@ 0x40
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005644:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a4d      	ldr	r2, [pc, #308]	@ (8005788 <HAL_I2C_Mem_Write+0x1f0>)
 8005654:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005656:	88f8      	ldrh	r0, [r7, #6]
 8005658:	893a      	ldrh	r2, [r7, #8]
 800565a:	8979      	ldrh	r1, [r7, #10]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	4603      	mov	r3, r0
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f001 fdaa 	bl	80071c0 <I2C_RequestMemoryWrite>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d052      	beq.n	8005718 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e081      	b.n	800577a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f002 f8e0 	bl	8007840 <I2C_WaitOnTXEFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00d      	beq.n	80056a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	2b04      	cmp	r3, #4
 800568c:	d107      	bne.n	800569e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800569c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e06b      	b.n	800577a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a6:	781a      	ldrb	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d11b      	bne.n	8005718 <HAL_I2C_Mem_Write+0x180>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d017      	beq.n	8005718 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1aa      	bne.n	8005676 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f002 f8d3 	bl	80078d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00d      	beq.n	800574c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005734:	2b04      	cmp	r3, #4
 8005736:	d107      	bne.n	8005748 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005746:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e016      	b.n	800577a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800575a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e000      	b.n	800577a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005778:	2302      	movs	r3, #2
  }
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	00100002 	.word	0x00100002
 8005788:	ffff0000 	.word	0xffff0000

0800578c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08c      	sub	sp, #48	@ 0x30
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	4608      	mov	r0, r1
 8005796:	4611      	mov	r1, r2
 8005798:	461a      	mov	r2, r3
 800579a:	4603      	mov	r3, r0
 800579c:	817b      	strh	r3, [r7, #10]
 800579e:	460b      	mov	r3, r1
 80057a0:	813b      	strh	r3, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057a6:	f7fd ff93 	bl	80036d0 <HAL_GetTick>
 80057aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	f040 8214 	bne.w	8005be2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	2319      	movs	r3, #25
 80057c0:	2201      	movs	r2, #1
 80057c2:	497b      	ldr	r1, [pc, #492]	@ (80059b0 <HAL_I2C_Mem_Read+0x224>)
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f001 ff21 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80057d0:	2302      	movs	r3, #2
 80057d2:	e207      	b.n	8005be4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_I2C_Mem_Read+0x56>
 80057de:	2302      	movs	r3, #2
 80057e0:	e200      	b.n	8005be4 <HAL_I2C_Mem_Read+0x458>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d007      	beq.n	8005808 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005816:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2222      	movs	r2, #34	@ 0x22
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2240      	movs	r2, #64	@ 0x40
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005832:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005838:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4a5b      	ldr	r2, [pc, #364]	@ (80059b4 <HAL_I2C_Mem_Read+0x228>)
 8005848:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800584a:	88f8      	ldrh	r0, [r7, #6]
 800584c:	893a      	ldrh	r2, [r7, #8]
 800584e:	8979      	ldrh	r1, [r7, #10]
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	4603      	mov	r3, r0
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f001 fd46 	bl	80072ec <I2C_RequestMemoryRead>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e1bc      	b.n	8005be4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	d113      	bne.n	800589a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005872:	2300      	movs	r3, #0
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	623b      	str	r3, [r7, #32]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	623b      	str	r3, [r7, #32]
 8005886:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e190      	b.n	8005bbc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d11b      	bne.n	80058da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e170      	b.n	8005bbc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d11b      	bne.n	800591a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005902:	2300      	movs	r3, #0
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	e150      	b.n	8005bbc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005930:	e144      	b.n	8005bbc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005936:	2b03      	cmp	r3, #3
 8005938:	f200 80f1 	bhi.w	8005b1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005940:	2b01      	cmp	r3, #1
 8005942:	d123      	bne.n	800598c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005946:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f002 f83b 	bl	80079c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e145      	b.n	8005be4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800598a:	e117      	b.n	8005bbc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005990:	2b02      	cmp	r3, #2
 8005992:	d14e      	bne.n	8005a32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	2200      	movs	r2, #0
 800599c:	4906      	ldr	r1, [pc, #24]	@ (80059b8 <HAL_I2C_Mem_Read+0x22c>)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f001 fe34 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e11a      	b.n	8005be4 <HAL_I2C_Mem_Read+0x458>
 80059ae:	bf00      	nop
 80059b0:	00100002 	.word	0x00100002
 80059b4:	ffff0000 	.word	0xffff0000
 80059b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a30:	e0c4      	b.n	8005bbc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a38:	2200      	movs	r2, #0
 8005a3a:	496c      	ldr	r1, [pc, #432]	@ (8005bec <HAL_I2C_Mem_Read+0x460>)
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f001 fde5 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0cb      	b.n	8005be4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	2200      	movs	r2, #0
 8005a96:	4955      	ldr	r1, [pc, #340]	@ (8005bec <HAL_I2C_Mem_Read+0x460>)
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f001 fdb7 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e09d      	b.n	8005be4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b1c:	e04e      	b.n	8005bbc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f001 ff4e 	bl	80079c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e058      	b.n	8005be4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d124      	bne.n	8005bbc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d107      	bne.n	8005b8a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b88:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f47f aeb6 	bne.w	8005932 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3728      	adds	r7, #40	@ 0x28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	00010004 	.word	0x00010004

08005bf0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c08:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c18:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d003      	beq.n	8005c28 <HAL_I2C_EV_IRQHandler+0x38>
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b40      	cmp	r3, #64	@ 0x40
 8005c24:	f040 80c1 	bne.w	8005daa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10d      	bne.n	8005c5e <HAL_I2C_EV_IRQHandler+0x6e>
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005c48:	d003      	beq.n	8005c52 <HAL_I2C_EV_IRQHandler+0x62>
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005c50:	d101      	bne.n	8005c56 <HAL_I2C_EV_IRQHandler+0x66>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <HAL_I2C_EV_IRQHandler+0x68>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	f000 8132 	beq.w	8005ec2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00c      	beq.n	8005c82 <HAL_I2C_EV_IRQHandler+0x92>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	0a5b      	lsrs	r3, r3, #9
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d006      	beq.n	8005c82 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 ff31 	bl	8007adc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fcf4 	bl	8006668 <I2C_Master_SB>
 8005c80:	e092      	b.n	8005da8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	08db      	lsrs	r3, r3, #3
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_I2C_EV_IRQHandler+0xb2>
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	0a5b      	lsrs	r3, r3, #9
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fd6a 	bl	8006774 <I2C_Master_ADD10>
 8005ca0:	e082      	b.n	8005da8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <HAL_I2C_EV_IRQHandler+0xd2>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	0a5b      	lsrs	r3, r3, #9
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fd84 	bl	80067c8 <I2C_Master_ADDR>
 8005cc0:	e072      	b.n	8005da8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	089b      	lsrs	r3, r3, #2
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d03b      	beq.n	8005d46 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cdc:	f000 80f3 	beq.w	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	09db      	lsrs	r3, r3, #7
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00f      	beq.n	8005d0c <HAL_I2C_EV_IRQHandler+0x11c>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	0a9b      	lsrs	r3, r3, #10
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <HAL_I2C_EV_IRQHandler+0x11c>
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f94c 	bl	8005fa2 <I2C_MasterTransmit_TXE>
 8005d0a:	e04d      	b.n	8005da8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	089b      	lsrs	r3, r3, #2
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80d6 	beq.w	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	0a5b      	lsrs	r3, r3, #9
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80cf 	beq.w	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d28:	7bbb      	ldrb	r3, [r7, #14]
 8005d2a:	2b21      	cmp	r3, #33	@ 0x21
 8005d2c:	d103      	bne.n	8005d36 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f9d3 	bl	80060da <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d34:	e0c7      	b.n	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b40      	cmp	r3, #64	@ 0x40
 8005d3a:	f040 80c4 	bne.w	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa41 	bl	80061c6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d44:	e0bf      	b.n	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d54:	f000 80b7 	beq.w	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	099b      	lsrs	r3, r3, #6
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00f      	beq.n	8005d84 <HAL_I2C_EV_IRQHandler+0x194>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	0a9b      	lsrs	r3, r3, #10
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <HAL_I2C_EV_IRQHandler+0x194>
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d103      	bne.n	8005d84 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 faba 	bl	80062f6 <I2C_MasterReceive_RXNE>
 8005d82:	e011      	b.n	8005da8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	089b      	lsrs	r3, r3, #2
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 809a 	beq.w	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	0a5b      	lsrs	r3, r3, #9
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 8093 	beq.w	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fb70 	bl	8006486 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005da6:	e08e      	b.n	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005da8:	e08d      	b.n	8005ec6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	e007      	b.n	8005dcc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <HAL_I2C_EV_IRQHandler+0x20e>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	0a5b      	lsrs	r3, r3, #9
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00c      	beq.n	8005dfe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005df4:	69b9      	ldr	r1, [r7, #24]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 ff35 	bl	8006c66 <I2C_Slave_ADDR>
 8005dfc:	e066      	b.n	8005ecc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_I2C_EV_IRQHandler+0x22e>
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	0a5b      	lsrs	r3, r3, #9
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 ff70 	bl	8006cfc <I2C_Slave_STOPF>
 8005e1c:	e056      	b.n	8005ecc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b21      	cmp	r3, #33	@ 0x21
 8005e22:	d002      	beq.n	8005e2a <HAL_I2C_EV_IRQHandler+0x23a>
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	2b29      	cmp	r3, #41	@ 0x29
 8005e28:	d125      	bne.n	8005e76 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	09db      	lsrs	r3, r3, #7
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00f      	beq.n	8005e56 <HAL_I2C_EV_IRQHandler+0x266>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	0a9b      	lsrs	r3, r3, #10
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_I2C_EV_IRQHandler+0x266>
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	089b      	lsrs	r3, r3, #2
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d103      	bne.n	8005e56 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fe4b 	bl	8006aea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e54:	e039      	b.n	8005eca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	089b      	lsrs	r3, r3, #2
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d033      	beq.n	8005eca <HAL_I2C_EV_IRQHandler+0x2da>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	0a5b      	lsrs	r3, r3, #9
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d02d      	beq.n	8005eca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fe78 	bl	8006b64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e74:	e029      	b.n	8005eca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	099b      	lsrs	r3, r3, #6
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00f      	beq.n	8005ea2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	0a9b      	lsrs	r3, r3, #10
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	089b      	lsrs	r3, r3, #2
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fe83 	bl	8006ba6 <I2C_SlaveReceive_RXNE>
 8005ea0:	e014      	b.n	8005ecc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	089b      	lsrs	r3, r3, #2
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00e      	beq.n	8005ecc <HAL_I2C_EV_IRQHandler+0x2dc>
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	0a5b      	lsrs	r3, r3, #9
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d008      	beq.n	8005ecc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 feb1 	bl	8006c22 <I2C_SlaveReceive_BTF>
 8005ec0:	e004      	b.n	8005ecc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005ec2:	bf00      	nop
 8005ec4:	e002      	b.n	8005ecc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ec6:	bf00      	nop
 8005ec8:	e000      	b.n	8005ecc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	70fb      	strb	r3, [r7, #3]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fb8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d150      	bne.n	800606a <I2C_MasterTransmit_TXE+0xc8>
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b21      	cmp	r3, #33	@ 0x21
 8005fcc:	d14d      	bne.n	800606a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d01d      	beq.n	8006010 <I2C_MasterTransmit_TXE+0x6e>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d01a      	beq.n	8006010 <I2C_MasterTransmit_TXE+0x6e>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fe0:	d016      	beq.n	8006010 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ff0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2211      	movs	r2, #17
 8005ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff ff62 	bl	8005ed2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800600e:	e060      	b.n	80060d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800601e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800602e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d107      	bne.n	800605a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ff7d 	bl	8005f52 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006058:	e03b      	b.n	80060d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff ff35 	bl	8005ed2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006068:	e033      	b.n	80060d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b21      	cmp	r3, #33	@ 0x21
 800606e:	d005      	beq.n	800607c <I2C_MasterTransmit_TXE+0xda>
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	2b40      	cmp	r3, #64	@ 0x40
 8006074:	d12d      	bne.n	80060d2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	2b22      	cmp	r3, #34	@ 0x22
 800607a:	d12a      	bne.n	80060d2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d108      	bne.n	8006098 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006094:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006096:	e01c      	b.n	80060d2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b40      	cmp	r3, #64	@ 0x40
 80060a2:	d103      	bne.n	80060ac <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f88e 	bl	80061c6 <I2C_MemoryTransmit_TXE_BTF>
}
 80060aa:	e012      	b.n	80060d2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80060d0:	e7ff      	b.n	80060d2 <I2C_MasterTransmit_TXE+0x130>
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b21      	cmp	r3, #33	@ 0x21
 80060f2:	d164      	bne.n	80061be <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d012      	beq.n	8006124 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006122:	e04c      	b.n	80061be <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b08      	cmp	r3, #8
 8006128:	d01d      	beq.n	8006166 <I2C_MasterTransmit_BTF+0x8c>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b20      	cmp	r3, #32
 800612e:	d01a      	beq.n	8006166 <I2C_MasterTransmit_BTF+0x8c>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006136:	d016      	beq.n	8006166 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006146:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2211      	movs	r2, #17
 800614c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff feb7 	bl	8005ed2 <HAL_I2C_MasterTxCpltCallback>
}
 8006164:	e02b      	b.n	80061be <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006174:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006184:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b40      	cmp	r3, #64	@ 0x40
 800619e:	d107      	bne.n	80061b0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff fed2 	bl	8005f52 <HAL_I2C_MemTxCpltCallback>
}
 80061ae:	e006      	b.n	80061be <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fe8a 	bl	8005ed2 <HAL_I2C_MasterTxCpltCallback>
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d11d      	bne.n	800621a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d10b      	bne.n	80061fe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f6:	1c9a      	adds	r2, r3, #2
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80061fc:	e077      	b.n	80062ee <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006202:	b29b      	uxth	r3, r3
 8006204:	121b      	asrs	r3, r3, #8
 8006206:	b2da      	uxtb	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006218:	e069      	b.n	80062ee <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800621e:	2b01      	cmp	r3, #1
 8006220:	d10b      	bne.n	800623a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006226:	b2da      	uxtb	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006238:	e059      	b.n	80062ee <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800623e:	2b02      	cmp	r3, #2
 8006240:	d152      	bne.n	80062e8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	2b22      	cmp	r3, #34	@ 0x22
 8006246:	d10d      	bne.n	8006264 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006256:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006262:	e044      	b.n	80062ee <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d015      	beq.n	800629a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b21      	cmp	r3, #33	@ 0x21
 8006272:	d112      	bne.n	800629a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006298:	e029      	b.n	80062ee <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d124      	bne.n	80062ee <I2C_MemoryTransmit_TXE_BTF+0x128>
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2b21      	cmp	r3, #33	@ 0x21
 80062a8:	d121      	bne.n	80062ee <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062b8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062c8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff fe36 	bl	8005f52 <HAL_I2C_MemTxCpltCallback>
}
 80062e6:	e002      	b.n	80062ee <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff f93f 	bl	800556c <I2C_Flush_DR>
}
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b22      	cmp	r3, #34	@ 0x22
 8006308:	f040 80b9 	bne.w	800647e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b03      	cmp	r3, #3
 800631e:	d921      	bls.n	8006364 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b03      	cmp	r3, #3
 800634e:	f040 8096 	bne.w	800647e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006360:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006362:	e08c      	b.n	800647e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	2b02      	cmp	r3, #2
 800636a:	d07f      	beq.n	800646c <I2C_MasterReceive_RXNE+0x176>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d002      	beq.n	8006378 <I2C_MasterReceive_RXNE+0x82>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d179      	bne.n	800646c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 faf1 	bl	8007960 <I2C_WaitOnSTOPRequestThroughIT>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d14c      	bne.n	800641e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006392:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80063a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b40      	cmp	r3, #64	@ 0x40
 80063dc:	d10a      	bne.n	80063f4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff fdba 	bl	8005f66 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063f2:	e044      	b.n	800647e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d002      	beq.n	8006408 <I2C_MasterReceive_RXNE+0x112>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b20      	cmp	r3, #32
 8006406:	d103      	bne.n	8006410 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	@ 0x30
 800640e:	e002      	b.n	8006416 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2212      	movs	r2, #18
 8006414:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fd65 	bl	8005ee6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800641c:	e02f      	b.n	800647e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800642c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff fd88 	bl	8005f7a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800646a:	e008      	b.n	800647e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647a:	605a      	str	r2, [r3, #4]
}
 800647c:	e7ff      	b.n	800647e <I2C_MasterReceive_RXNE+0x188>
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006492:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b04      	cmp	r3, #4
 800649c:	d11b      	bne.n	80064d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80064d4:	e0c4      	b.n	8006660 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d129      	bne.n	8006534 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d00a      	beq.n	800650c <I2C_MasterReceive_BTF+0x86>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d007      	beq.n	800650c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800650a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006532:	e095      	b.n	8006660 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d17d      	bne.n	800663a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d002      	beq.n	800654a <I2C_MasterReceive_BTF+0xc4>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b10      	cmp	r3, #16
 8006548:	d108      	bne.n	800655c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	e016      	b.n	800658a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b04      	cmp	r3, #4
 8006560:	d002      	beq.n	8006568 <I2C_MasterReceive_BTF+0xe2>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d108      	bne.n	800657a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e007      	b.n	800658a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006588:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80065e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b40      	cmp	r3, #64	@ 0x40
 80065f8:	d10a      	bne.n	8006610 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff fcac 	bl	8005f66 <HAL_I2C_MemRxCpltCallback>
}
 800660e:	e027      	b.n	8006660 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b08      	cmp	r3, #8
 800661c:	d002      	beq.n	8006624 <I2C_MasterReceive_BTF+0x19e>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b20      	cmp	r3, #32
 8006622:	d103      	bne.n	800662c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	@ 0x30
 800662a:	e002      	b.n	8006632 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2212      	movs	r2, #18
 8006630:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff fc57 	bl	8005ee6 <HAL_I2C_MasterRxCpltCallback>
}
 8006638:	e012      	b.n	8006660 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b40      	cmp	r3, #64	@ 0x40
 800667a:	d117      	bne.n	80066ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006680:	2b00      	cmp	r3, #0
 8006682:	d109      	bne.n	8006698 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006694:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006696:	e067      	b.n	8006768 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	611a      	str	r2, [r3, #16]
}
 80066aa:	e05d      	b.n	8006768 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066b4:	d133      	bne.n	800671e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b21      	cmp	r3, #33	@ 0x21
 80066c0:	d109      	bne.n	80066d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066d2:	611a      	str	r2, [r3, #16]
 80066d4:	e008      	b.n	80066e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <I2C_Master_SB+0x92>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d032      	beq.n	8006768 <I2C_Master_SB+0x100>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d02d      	beq.n	8006768 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800671a:	605a      	str	r2, [r3, #4]
}
 800671c:	e024      	b.n	8006768 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10e      	bne.n	8006744 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672a:	b29b      	uxth	r3, r3
 800672c:	11db      	asrs	r3, r3, #7
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f003 0306 	and.w	r3, r3, #6
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f063 030f 	orn	r3, r3, #15
 800673a:	b2da      	uxtb	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	611a      	str	r2, [r3, #16]
}
 8006742:	e011      	b.n	8006768 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006748:	2b01      	cmp	r3, #1
 800674a:	d10d      	bne.n	8006768 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006750:	b29b      	uxth	r3, r3
 8006752:	11db      	asrs	r3, r3, #7
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f003 0306 	and.w	r3, r3, #6
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f063 030e 	orn	r3, r3, #14
 8006760:	b2da      	uxtb	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	611a      	str	r2, [r3, #16]
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006780:	b2da      	uxtb	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d004      	beq.n	800679a <I2C_Master_ADD10+0x26>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d108      	bne.n	80067ac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <I2C_Master_ADD10+0x48>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067ba:	605a      	str	r2, [r3, #4]
  }
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b091      	sub	sp, #68	@ 0x44
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067de:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b22      	cmp	r3, #34	@ 0x22
 80067f0:	f040 8169 	bne.w	8006ac6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10f      	bne.n	800681c <I2C_Master_ADDR+0x54>
 80067fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006800:	2b40      	cmp	r3, #64	@ 0x40
 8006802:	d10b      	bne.n	800681c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006804:	2300      	movs	r3, #0
 8006806:	633b      	str	r3, [r7, #48]	@ 0x30
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	633b      	str	r3, [r7, #48]	@ 0x30
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	e160      	b.n	8006ade <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11d      	bne.n	8006860 <I2C_Master_ADDR+0x98>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800682c:	d118      	bne.n	8006860 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800682e:	2300      	movs	r3, #0
 8006830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006852:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	651a      	str	r2, [r3, #80]	@ 0x50
 800685e:	e13e      	b.n	8006ade <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d113      	bne.n	8006892 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686a:	2300      	movs	r3, #0
 800686c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	e115      	b.n	8006abe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	f040 808a 	bne.w	80069b2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068a4:	d137      	bne.n	8006916 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068b4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068c4:	d113      	bne.n	80068ee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068d4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d6:	2300      	movs	r3, #0
 80068d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	e0e7      	b.n	8006abe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ee:	2300      	movs	r3, #0
 80068f0:	623b      	str	r3, [r7, #32]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	623b      	str	r3, [r7, #32]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	623b      	str	r3, [r7, #32]
 8006902:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e0d3      	b.n	8006abe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006918:	2b08      	cmp	r3, #8
 800691a:	d02e      	beq.n	800697a <I2C_Master_ADDR+0x1b2>
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	2b20      	cmp	r3, #32
 8006920:	d02b      	beq.n	800697a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006924:	2b12      	cmp	r3, #18
 8006926:	d102      	bne.n	800692e <I2C_Master_ADDR+0x166>
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	2b01      	cmp	r3, #1
 800692c:	d125      	bne.n	800697a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006930:	2b04      	cmp	r3, #4
 8006932:	d00e      	beq.n	8006952 <I2C_Master_ADDR+0x18a>
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	2b02      	cmp	r3, #2
 8006938:	d00b      	beq.n	8006952 <I2C_Master_ADDR+0x18a>
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	2b10      	cmp	r3, #16
 800693e:	d008      	beq.n	8006952 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e007      	b.n	8006962 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006960:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	e0a1      	b.n	8006abe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006988:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800698a:	2300      	movs	r3, #0
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e085      	b.n	8006abe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d14d      	bne.n	8006a58 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80069bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d016      	beq.n	80069f0 <I2C_Master_ADDR+0x228>
 80069c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d013      	beq.n	80069f0 <I2C_Master_ADDR+0x228>
 80069c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ca:	2b10      	cmp	r3, #16
 80069cc:	d010      	beq.n	80069f0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069dc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e007      	b.n	8006a00 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80069fe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0e:	d117      	bne.n	8006a40 <I2C_Master_ADDR+0x278>
 8006a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a16:	d00b      	beq.n	8006a30 <I2C_Master_ADDR+0x268>
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d008      	beq.n	8006a30 <I2C_Master_ADDR+0x268>
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d005      	beq.n	8006a30 <I2C_Master_ADDR+0x268>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	2b10      	cmp	r3, #16
 8006a28:	d002      	beq.n	8006a30 <I2C_Master_ADDR+0x268>
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d107      	bne.n	8006a40 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	e032      	b.n	8006abe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a66:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a76:	d117      	bne.n	8006aa8 <I2C_Master_ADDR+0x2e0>
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a7e:	d00b      	beq.n	8006a98 <I2C_Master_ADDR+0x2d0>
 8006a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d008      	beq.n	8006a98 <I2C_Master_ADDR+0x2d0>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d005      	beq.n	8006a98 <I2C_Master_ADDR+0x2d0>
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d002      	beq.n	8006a98 <I2C_Master_ADDR+0x2d0>
 8006a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d107      	bne.n	8006aa8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006aa6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006ac4:	e00b      	b.n	8006ade <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
}
 8006adc:	e7ff      	b.n	8006ade <I2C_Master_ADDR+0x316>
 8006ade:	bf00      	nop
 8006ae0:	3744      	adds	r7, #68	@ 0x44
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006af8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d02b      	beq.n	8006b5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d114      	bne.n	8006b5c <I2C_SlaveTransmit_TXE+0x72>
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b29      	cmp	r3, #41	@ 0x29
 8006b36:	d111      	bne.n	8006b5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2221      	movs	r2, #33	@ 0x21
 8006b4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2228      	movs	r2, #40	@ 0x28
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff f9cf 	bl	8005efa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d011      	beq.n	8006b9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	781a      	ldrb	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d02c      	beq.n	8006c1a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d114      	bne.n	8006c1a <I2C_SlaveReceive_RXNE+0x74>
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bf4:	d111      	bne.n	8006c1a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2222      	movs	r2, #34	@ 0x22
 8006c0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2228      	movs	r2, #40	@ 0x28
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff f97a 	bl	8005f0e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d012      	beq.n	8006c5a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c80:	2b28      	cmp	r3, #40	@ 0x28
 8006c82:	d127      	bne.n	8006cd4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c92:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	089b      	lsrs	r3, r3, #2
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	09db      	lsrs	r3, r3, #7
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d103      	bne.n	8006cb8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	81bb      	strh	r3, [r7, #12]
 8006cb6:	e002      	b.n	8006cbe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006cc6:	89ba      	ldrh	r2, [r7, #12]
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff f928 	bl	8005f22 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006cd2:	e00e      	b.n	8006cf2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60bb      	str	r3, [r7, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	60bb      	str	r3, [r7, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	60bb      	str	r3, [r7, #8]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d1a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	60bb      	str	r3, [r7, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0201 	orr.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d48:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d58:	d172      	bne.n	8006e40 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b22      	cmp	r3, #34	@ 0x22
 8006d5e:	d002      	beq.n	8006d66 <I2C_Slave_STOPF+0x6a>
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d64:	d135      	bne.n	8006dd2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d82:	f043 0204 	orr.w	r2, r3, #4
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe f891 	bl	8004ec6 <HAL_DMA_GetState>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d049      	beq.n	8006e3e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dae:	4a69      	ldr	r2, [pc, #420]	@ (8006f54 <I2C_Slave_STOPF+0x258>)
 8006db0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe f863 	bl	8004e82 <HAL_DMA_Abort_IT>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03d      	beq.n	8006e3e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dd0:	e035      	b.n	8006e3e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dee:	f043 0204 	orr.w	r2, r3, #4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe f85b 	bl	8004ec6 <HAL_DMA_GetState>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d014      	beq.n	8006e40 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e1a:	4a4e      	ldr	r2, [pc, #312]	@ (8006f54 <I2C_Slave_STOPF+0x258>)
 8006e1c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe f82d 	bl	8004e82 <HAL_DMA_Abort_IT>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	e000      	b.n	8006e40 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e3e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d03e      	beq.n	8006ec8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d112      	bne.n	8006e7e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e88:	2b40      	cmp	r3, #64	@ 0x40
 8006e8a:	d112      	bne.n	8006eb2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec0:	f043 0204 	orr.w	r2, r3, #4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f843 	bl	8006f5c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006ed6:	e039      	b.n	8006f4c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006edc:	d109      	bne.n	8006ef2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2228      	movs	r2, #40	@ 0x28
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff f80e 	bl	8005f0e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b28      	cmp	r3, #40	@ 0x28
 8006efc:	d111      	bne.n	8006f22 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a15      	ldr	r2, [pc, #84]	@ (8006f58 <I2C_Slave_STOPF+0x25c>)
 8006f02:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff f80f 	bl	8005f3e <HAL_I2C_ListenCpltCallback>
}
 8006f20:	e014      	b.n	8006f4c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f26:	2b22      	cmp	r3, #34	@ 0x22
 8006f28:	d002      	beq.n	8006f30 <I2C_Slave_STOPF+0x234>
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	2b22      	cmp	r3, #34	@ 0x22
 8006f2e:	d10d      	bne.n	8006f4c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fe ffe1 	bl	8005f0e <HAL_I2C_SlaveRxCpltCallback>
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	080074bd 	.word	0x080074bd
 8006f58:	ffff0000 	.word	0xffff0000

08006f5c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d002      	beq.n	8006f80 <I2C_ITError+0x24>
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	2b40      	cmp	r3, #64	@ 0x40
 8006f7e:	d10a      	bne.n	8006f96 <I2C_ITError+0x3a>
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b22      	cmp	r3, #34	@ 0x22
 8006f84:	d107      	bne.n	8006f96 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f9c:	2b28      	cmp	r3, #40	@ 0x28
 8006f9e:	d107      	bne.n	8006fb0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2228      	movs	r2, #40	@ 0x28
 8006faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006fae:	e015      	b.n	8006fdc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fbe:	d00a      	beq.n	8006fd6 <I2C_ITError+0x7a>
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	2b60      	cmp	r3, #96	@ 0x60
 8006fc4:	d007      	beq.n	8006fd6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fea:	d162      	bne.n	80070b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ffa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007000:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	d020      	beq.n	800704c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800700e:	4a6a      	ldr	r2, [pc, #424]	@ (80071b8 <I2C_ITError+0x25c>)
 8007010:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007016:	4618      	mov	r0, r3
 8007018:	f7fd ff33 	bl	8004e82 <HAL_DMA_Abort_IT>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 8089 	beq.w	8007136 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0201 	bic.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007046:	4610      	mov	r0, r2
 8007048:	4798      	blx	r3
 800704a:	e074      	b.n	8007136 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	4a59      	ldr	r2, [pc, #356]	@ (80071b8 <I2C_ITError+0x25c>)
 8007052:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007058:	4618      	mov	r0, r3
 800705a:	f7fd ff12 	bl	8004e82 <HAL_DMA_Abort_IT>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d068      	beq.n	8007136 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800706e:	2b40      	cmp	r3, #64	@ 0x40
 8007070:	d10b      	bne.n	800708a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0201 	bic.w	r2, r2, #1
 8007098:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	e041      	b.n	8007136 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b60      	cmp	r3, #96	@ 0x60
 80070bc:	d125      	bne.n	800710a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d6:	2b40      	cmp	r3, #64	@ 0x40
 80070d8:	d10b      	bne.n	80070f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fe ff43 	bl	8005f8e <HAL_I2C_AbortCpltCallback>
 8007108:	e015      	b.n	8007136 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007114:	2b40      	cmp	r3, #64	@ 0x40
 8007116:	d10b      	bne.n	8007130 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7fe ff22 	bl	8005f7a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10e      	bne.n	8007164 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800714c:	2b00      	cmp	r3, #0
 800714e:	d109      	bne.n	8007164 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007172:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b04      	cmp	r3, #4
 8007186:	d113      	bne.n	80071b0 <I2C_ITError+0x254>
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	2b28      	cmp	r3, #40	@ 0x28
 800718c:	d110      	bne.n	80071b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a0a      	ldr	r2, [pc, #40]	@ (80071bc <I2C_ITError+0x260>)
 8007192:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fe fec7 	bl	8005f3e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	080074bd 	.word	0x080074bd
 80071bc:	ffff0000 	.word	0xffff0000

080071c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	461a      	mov	r2, r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	817b      	strh	r3, [r7, #10]
 80071d2:	460b      	mov	r3, r1
 80071d4:	813b      	strh	r3, [r7, #8]
 80071d6:	4613      	mov	r3, r2
 80071d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fa08 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007210:	d103      	bne.n	800721a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007218:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e05f      	b.n	80072de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800721e:	897b      	ldrh	r3, [r7, #10]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	461a      	mov	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800722c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	6a3a      	ldr	r2, [r7, #32]
 8007232:	492d      	ldr	r1, [pc, #180]	@ (80072e8 <I2C_RequestMemoryWrite+0x128>)
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 fa63 	bl	8007700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e04c      	b.n	80072de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007244:	2300      	movs	r3, #0
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800725a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800725c:	6a39      	ldr	r1, [r7, #32]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 faee 	bl	8007840 <I2C_WaitOnTXEFlagUntilTimeout>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00d      	beq.n	8007286 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	2b04      	cmp	r3, #4
 8007270:	d107      	bne.n	8007282 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e02b      	b.n	80072de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d105      	bne.n	8007298 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800728c:	893b      	ldrh	r3, [r7, #8]
 800728e:	b2da      	uxtb	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	611a      	str	r2, [r3, #16]
 8007296:	e021      	b.n	80072dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007298:	893b      	ldrh	r3, [r7, #8]
 800729a:	0a1b      	lsrs	r3, r3, #8
 800729c:	b29b      	uxth	r3, r3
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a8:	6a39      	ldr	r1, [r7, #32]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fac8 	bl	8007840 <I2C_WaitOnTXEFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00d      	beq.n	80072d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d107      	bne.n	80072ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e005      	b.n	80072de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072d2:	893b      	ldrh	r3, [r7, #8]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	00010002 	.word	0x00010002

080072ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	4608      	mov	r0, r1
 80072f6:	4611      	mov	r1, r2
 80072f8:	461a      	mov	r2, r3
 80072fa:	4603      	mov	r3, r0
 80072fc:	817b      	strh	r3, [r7, #10]
 80072fe:	460b      	mov	r3, r1
 8007300:	813b      	strh	r3, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007314:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	2200      	movs	r2, #0
 800732e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f96a 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00d      	beq.n	800735a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800734c:	d103      	bne.n	8007356 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007354:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e0aa      	b.n	80074b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800735a:	897b      	ldrh	r3, [r7, #10]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007368:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	6a3a      	ldr	r2, [r7, #32]
 800736e:	4952      	ldr	r1, [pc, #328]	@ (80074b8 <I2C_RequestMemoryRead+0x1cc>)
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f9c5 	bl	8007700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e097      	b.n	80074b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007398:	6a39      	ldr	r1, [r7, #32]
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fa50 	bl	8007840 <I2C_WaitOnTXEFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d107      	bne.n	80073be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e076      	b.n	80074b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d105      	bne.n	80073d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073c8:	893b      	ldrh	r3, [r7, #8]
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	611a      	str	r2, [r3, #16]
 80073d2:	e021      	b.n	8007418 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073d4:	893b      	ldrh	r3, [r7, #8]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	b29b      	uxth	r3, r3
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e4:	6a39      	ldr	r1, [r7, #32]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 fa2a 	bl	8007840 <I2C_WaitOnTXEFlagUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00d      	beq.n	800740e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d107      	bne.n	800740a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007408:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e050      	b.n	80074b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800740e:	893b      	ldrh	r3, [r7, #8]
 8007410:	b2da      	uxtb	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800741a:	6a39      	ldr	r1, [r7, #32]
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fa0f 	bl	8007840 <I2C_WaitOnTXEFlagUntilTimeout>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00d      	beq.n	8007444 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742c:	2b04      	cmp	r3, #4
 800742e:	d107      	bne.n	8007440 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800743e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e035      	b.n	80074b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007452:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	2200      	movs	r2, #0
 800745c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f8d3 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800747a:	d103      	bne.n	8007484 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007482:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e013      	b.n	80074b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007488:	897b      	ldrh	r3, [r7, #10]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f043 0301 	orr.w	r3, r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	6a3a      	ldr	r2, [r7, #32]
 800749c:	4906      	ldr	r1, [pc, #24]	@ (80074b8 <I2C_RequestMemoryRead+0x1cc>)
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f92e 	bl	8007700 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e000      	b.n	80074b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	00010002 	.word	0x00010002

080074bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80074d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007604 <I2C_DMAAbort+0x148>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	08db      	lsrs	r3, r3, #3
 80074dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007608 <I2C_DMAAbort+0x14c>)
 80074de:	fba2 2303 	umull	r2, r3, r2, r3
 80074e2:	0a1a      	lsrs	r2, r3, #8
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	00da      	lsls	r2, r3, #3
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d106      	bne.n	8007504 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fa:	f043 0220 	orr.w	r2, r3, #32
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007502:	e00a      	b.n	800751a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3b01      	subs	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007518:	d0ea      	beq.n	80074f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007526:	2200      	movs	r2, #0
 8007528:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007536:	2200      	movs	r2, #0
 8007538:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007548:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2200      	movs	r2, #0
 800754e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800755c:	2200      	movs	r2, #0
 800755e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	2200      	movs	r2, #0
 800756e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b60      	cmp	r3, #96	@ 0x60
 800758a:	d10e      	bne.n	80075aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2200      	movs	r2, #0
 80075a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075a2:	6978      	ldr	r0, [r7, #20]
 80075a4:	f7fe fcf3 	bl	8005f8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075a8:	e027      	b.n	80075fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075aa:	7cfb      	ldrb	r3, [r7, #19]
 80075ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80075b0:	2b28      	cmp	r3, #40	@ 0x28
 80075b2:	d117      	bne.n	80075e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0201 	orr.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80075d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2228      	movs	r2, #40	@ 0x28
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80075e2:	e007      	b.n	80075f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80075f4:	6978      	ldr	r0, [r7, #20]
 80075f6:	f7fe fcc0 	bl	8005f7a <HAL_I2C_ErrorCallback>
}
 80075fa:	bf00      	nop
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20000004 	.word	0x20000004
 8007608:	14f8b589 	.word	0x14f8b589

0800760c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800761c:	e048      	b.n	80076b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d044      	beq.n	80076b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007626:	f7fc f853 	bl	80036d0 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d302      	bcc.n	800763c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d139      	bne.n	80076b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b01      	cmp	r3, #1
 8007644:	d10d      	bne.n	8007662 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	43da      	mvns	r2, r3
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	4013      	ands	r3, r2
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf0c      	ite	eq
 8007658:	2301      	moveq	r3, #1
 800765a:	2300      	movne	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	e00c      	b.n	800767c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	43da      	mvns	r2, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	4013      	ands	r3, r2
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	bf0c      	ite	eq
 8007674:	2301      	moveq	r3, #1
 8007676:	2300      	movne	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	461a      	mov	r2, r3
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	429a      	cmp	r2, r3
 8007680:	d116      	bne.n	80076b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769c:	f043 0220 	orr.w	r2, r3, #32
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e023      	b.n	80076f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	0c1b      	lsrs	r3, r3, #16
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d10d      	bne.n	80076d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	43da      	mvns	r2, r3
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	4013      	ands	r3, r2
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bf0c      	ite	eq
 80076cc:	2301      	moveq	r3, #1
 80076ce:	2300      	movne	r3, #0
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	461a      	mov	r2, r3
 80076d4:	e00c      	b.n	80076f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	43da      	mvns	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	4013      	ands	r3, r2
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	bf0c      	ite	eq
 80076e8:	2301      	moveq	r3, #1
 80076ea:	2300      	movne	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d093      	beq.n	800761e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800770e:	e071      	b.n	80077f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800771a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800771e:	d123      	bne.n	8007768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800772e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007754:	f043 0204 	orr.w	r2, r3, #4
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e067      	b.n	8007838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776e:	d041      	beq.n	80077f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007770:	f7fb ffae 	bl	80036d0 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	429a      	cmp	r2, r3
 800777e:	d302      	bcc.n	8007786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d136      	bne.n	80077f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	0c1b      	lsrs	r3, r3, #16
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b01      	cmp	r3, #1
 800778e:	d10c      	bne.n	80077aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	43da      	mvns	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4013      	ands	r3, r2
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bf14      	ite	ne
 80077a2:	2301      	movne	r3, #1
 80077a4:	2300      	moveq	r3, #0
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	e00b      	b.n	80077c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	43da      	mvns	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4013      	ands	r3, r2
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bf14      	ite	ne
 80077bc:	2301      	movne	r3, #1
 80077be:	2300      	moveq	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d016      	beq.n	80077f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e0:	f043 0220 	orr.w	r2, r3, #32
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e021      	b.n	8007838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	0c1b      	lsrs	r3, r3, #16
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d10c      	bne.n	8007818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	43da      	mvns	r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	4013      	ands	r3, r2
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	bf14      	ite	ne
 8007810:	2301      	movne	r3, #1
 8007812:	2300      	moveq	r3, #0
 8007814:	b2db      	uxtb	r3, r3
 8007816:	e00b      	b.n	8007830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	43da      	mvns	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4013      	ands	r3, r2
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	bf14      	ite	ne
 800782a:	2301      	movne	r3, #1
 800782c:	2300      	moveq	r3, #0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	f47f af6d 	bne.w	8007710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800784c:	e034      	b.n	80078b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 f915 	bl	8007a7e <I2C_IsAcknowledgeFailed>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e034      	b.n	80078c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007864:	d028      	beq.n	80078b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007866:	f7fb ff33 	bl	80036d0 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	429a      	cmp	r2, r3
 8007874:	d302      	bcc.n	800787c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11d      	bne.n	80078b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007886:	2b80      	cmp	r3, #128	@ 0x80
 8007888:	d016      	beq.n	80078b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2220      	movs	r2, #32
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a4:	f043 0220 	orr.w	r2, r3, #32
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e007      	b.n	80078c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c2:	2b80      	cmp	r3, #128	@ 0x80
 80078c4:	d1c3      	bne.n	800784e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078dc:	e034      	b.n	8007948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f8cd 	bl	8007a7e <I2C_IsAcknowledgeFailed>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e034      	b.n	8007958 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d028      	beq.n	8007948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f6:	f7fb feeb 	bl	80036d0 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	d302      	bcc.n	800790c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d11d      	bne.n	8007948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	f003 0304 	and.w	r3, r3, #4
 8007916:	2b04      	cmp	r3, #4
 8007918:	d016      	beq.n	8007948 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e007      	b.n	8007958 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	2b04      	cmp	r3, #4
 8007954:	d1c3      	bne.n	80078de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800796c:	4b13      	ldr	r3, [pc, #76]	@ (80079bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	08db      	lsrs	r3, r3, #3
 8007972:	4a13      	ldr	r2, [pc, #76]	@ (80079c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007974:	fba2 2303 	umull	r2, r3, r2, r3
 8007978:	0a1a      	lsrs	r2, r3, #8
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3b01      	subs	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d107      	bne.n	800799e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007992:	f043 0220 	orr.w	r2, r3, #32
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e008      	b.n	80079b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ac:	d0e9      	beq.n	8007982 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	20000004 	.word	0x20000004
 80079c0:	14f8b589 	.word	0x14f8b589

080079c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079d0:	e049      	b.n	8007a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b10      	cmp	r3, #16
 80079de:	d119      	bne.n	8007a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0210 	mvn.w	r2, #16
 80079e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e030      	b.n	8007a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a14:	f7fb fe5c 	bl	80036d0 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d302      	bcc.n	8007a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d11d      	bne.n	8007a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a34:	2b40      	cmp	r3, #64	@ 0x40
 8007a36:	d016      	beq.n	8007a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	f043 0220 	orr.w	r2, r3, #32
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e007      	b.n	8007a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a70:	2b40      	cmp	r3, #64	@ 0x40
 8007a72:	d1ae      	bne.n	80079d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a94:	d11b      	bne.n	8007ace <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a9e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aba:	f043 0204 	orr.w	r2, r3, #4
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007aec:	d103      	bne.n	8007af6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007af4:	e007      	b.n	8007b06 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007afe:	d102      	bne.n	8007b06 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2208      	movs	r2, #8
 8007b04:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e267      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d075      	beq.n	8007c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b32:	4b88      	ldr	r3, [pc, #544]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 030c 	and.w	r3, r3, #12
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d00c      	beq.n	8007b58 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b3e:	4b85      	ldr	r3, [pc, #532]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d112      	bne.n	8007b70 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b4a:	4b82      	ldr	r3, [pc, #520]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b56:	d10b      	bne.n	8007b70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b58:	4b7e      	ldr	r3, [pc, #504]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d05b      	beq.n	8007c1c <HAL_RCC_OscConfig+0x108>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d157      	bne.n	8007c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e242      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b78:	d106      	bne.n	8007b88 <HAL_RCC_OscConfig+0x74>
 8007b7a:	4b76      	ldr	r3, [pc, #472]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a75      	ldr	r2, [pc, #468]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	e01d      	b.n	8007bc4 <HAL_RCC_OscConfig+0xb0>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b90:	d10c      	bne.n	8007bac <HAL_RCC_OscConfig+0x98>
 8007b92:	4b70      	ldr	r3, [pc, #448]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a6f      	ldr	r2, [pc, #444]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a6c      	ldr	r2, [pc, #432]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	e00b      	b.n	8007bc4 <HAL_RCC_OscConfig+0xb0>
 8007bac:	4b69      	ldr	r3, [pc, #420]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a68      	ldr	r2, [pc, #416]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	4b66      	ldr	r3, [pc, #408]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a65      	ldr	r2, [pc, #404]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d013      	beq.n	8007bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bcc:	f7fb fd80 	bl	80036d0 <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bd4:	f7fb fd7c 	bl	80036d0 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b64      	cmp	r3, #100	@ 0x64
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e207      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007be6:	4b5b      	ldr	r3, [pc, #364]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0f0      	beq.n	8007bd4 <HAL_RCC_OscConfig+0xc0>
 8007bf2:	e014      	b.n	8007c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf4:	f7fb fd6c 	bl	80036d0 <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bfc:	f7fb fd68 	bl	80036d0 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b64      	cmp	r3, #100	@ 0x64
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e1f3      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c0e:	4b51      	ldr	r3, [pc, #324]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1f0      	bne.n	8007bfc <HAL_RCC_OscConfig+0xe8>
 8007c1a:	e000      	b.n	8007c1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d063      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 030c 	and.w	r3, r3, #12
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00b      	beq.n	8007c4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c36:	4b47      	ldr	r3, [pc, #284]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	d11c      	bne.n	8007c7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c42:	4b44      	ldr	r3, [pc, #272]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d116      	bne.n	8007c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c4e:	4b41      	ldr	r3, [pc, #260]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <HAL_RCC_OscConfig+0x152>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d001      	beq.n	8007c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e1c7      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c66:	4b3b      	ldr	r3, [pc, #236]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	4937      	ldr	r1, [pc, #220]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c7a:	e03a      	b.n	8007cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d020      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c84:	4b34      	ldr	r3, [pc, #208]	@ (8007d58 <HAL_RCC_OscConfig+0x244>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8a:	f7fb fd21 	bl	80036d0 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c92:	f7fb fd1d 	bl	80036d0 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e1a8      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0f0      	beq.n	8007c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cb0:	4b28      	ldr	r3, [pc, #160]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4925      	ldr	r1, [pc, #148]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	600b      	str	r3, [r1, #0]
 8007cc4:	e015      	b.n	8007cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cc6:	4b24      	ldr	r3, [pc, #144]	@ (8007d58 <HAL_RCC_OscConfig+0x244>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ccc:	f7fb fd00 	bl	80036d0 <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cd4:	f7fb fcfc 	bl	80036d0 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e187      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1f0      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0308 	and.w	r3, r3, #8
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d036      	beq.n	8007d6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d016      	beq.n	8007d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d06:	4b15      	ldr	r3, [pc, #84]	@ (8007d5c <HAL_RCC_OscConfig+0x248>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d0c:	f7fb fce0 	bl	80036d0 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d12:	e008      	b.n	8007d26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d14:	f7fb fcdc 	bl	80036d0 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e167      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d26:	4b0b      	ldr	r3, [pc, #44]	@ (8007d54 <HAL_RCC_OscConfig+0x240>)
 8007d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0f0      	beq.n	8007d14 <HAL_RCC_OscConfig+0x200>
 8007d32:	e01b      	b.n	8007d6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d34:	4b09      	ldr	r3, [pc, #36]	@ (8007d5c <HAL_RCC_OscConfig+0x248>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d3a:	f7fb fcc9 	bl	80036d0 <HAL_GetTick>
 8007d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d40:	e00e      	b.n	8007d60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d42:	f7fb fcc5 	bl	80036d0 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d907      	bls.n	8007d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e150      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
 8007d54:	40023800 	.word	0x40023800
 8007d58:	42470000 	.word	0x42470000
 8007d5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d60:	4b88      	ldr	r3, [pc, #544]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1ea      	bne.n	8007d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8097 	beq.w	8007ea8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d7e:	4b81      	ldr	r3, [pc, #516]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10f      	bne.n	8007daa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60bb      	str	r3, [r7, #8]
 8007d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d92:	4a7c      	ldr	r2, [pc, #496]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007da2:	60bb      	str	r3, [r7, #8]
 8007da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007da6:	2301      	movs	r3, #1
 8007da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007daa:	4b77      	ldr	r3, [pc, #476]	@ (8007f88 <HAL_RCC_OscConfig+0x474>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d118      	bne.n	8007de8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007db6:	4b74      	ldr	r3, [pc, #464]	@ (8007f88 <HAL_RCC_OscConfig+0x474>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a73      	ldr	r2, [pc, #460]	@ (8007f88 <HAL_RCC_OscConfig+0x474>)
 8007dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dc2:	f7fb fc85 	bl	80036d0 <HAL_GetTick>
 8007dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dc8:	e008      	b.n	8007ddc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dca:	f7fb fc81 	bl	80036d0 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e10c      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8007f88 <HAL_RCC_OscConfig+0x474>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0f0      	beq.n	8007dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d106      	bne.n	8007dfe <HAL_RCC_OscConfig+0x2ea>
 8007df0:	4b64      	ldr	r3, [pc, #400]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007df4:	4a63      	ldr	r2, [pc, #396]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007df6:	f043 0301 	orr.w	r3, r3, #1
 8007dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dfc:	e01c      	b.n	8007e38 <HAL_RCC_OscConfig+0x324>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	2b05      	cmp	r3, #5
 8007e04:	d10c      	bne.n	8007e20 <HAL_RCC_OscConfig+0x30c>
 8007e06:	4b5f      	ldr	r3, [pc, #380]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e0c:	f043 0304 	orr.w	r3, r3, #4
 8007e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e12:	4b5c      	ldr	r3, [pc, #368]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e16:	4a5b      	ldr	r2, [pc, #364]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e1e:	e00b      	b.n	8007e38 <HAL_RCC_OscConfig+0x324>
 8007e20:	4b58      	ldr	r3, [pc, #352]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e24:	4a57      	ldr	r2, [pc, #348]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e2c:	4b55      	ldr	r3, [pc, #340]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e30:	4a54      	ldr	r2, [pc, #336]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e32:	f023 0304 	bic.w	r3, r3, #4
 8007e36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d015      	beq.n	8007e6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e40:	f7fb fc46 	bl	80036d0 <HAL_GetTick>
 8007e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e46:	e00a      	b.n	8007e5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e48:	f7fb fc42 	bl	80036d0 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e0cb      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e5e:	4b49      	ldr	r3, [pc, #292]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0ee      	beq.n	8007e48 <HAL_RCC_OscConfig+0x334>
 8007e6a:	e014      	b.n	8007e96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e6c:	f7fb fc30 	bl	80036d0 <HAL_GetTick>
 8007e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e72:	e00a      	b.n	8007e8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e74:	f7fb fc2c 	bl	80036d0 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e0b5      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1ee      	bne.n	8007e74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d105      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e9c:	4b39      	ldr	r3, [pc, #228]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea0:	4a38      	ldr	r2, [pc, #224]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ea6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 80a1 	beq.w	8007ff4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007eb2:	4b34      	ldr	r3, [pc, #208]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f003 030c 	and.w	r3, r3, #12
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d05c      	beq.n	8007f78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d141      	bne.n	8007f4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec6:	4b31      	ldr	r3, [pc, #196]	@ (8007f8c <HAL_RCC_OscConfig+0x478>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ecc:	f7fb fc00 	bl	80036d0 <HAL_GetTick>
 8007ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ed2:	e008      	b.n	8007ee6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ed4:	f7fb fbfc 	bl	80036d0 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d901      	bls.n	8007ee6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e087      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ee6:	4b27      	ldr	r3, [pc, #156]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1f0      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69da      	ldr	r2, [r3, #28]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f00:	019b      	lsls	r3, r3, #6
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f08:	085b      	lsrs	r3, r3, #1
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	041b      	lsls	r3, r3, #16
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f14:	061b      	lsls	r3, r3, #24
 8007f16:	491b      	ldr	r1, [pc, #108]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8007f8c <HAL_RCC_OscConfig+0x478>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f22:	f7fb fbd5 	bl	80036d0 <HAL_GetTick>
 8007f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f28:	e008      	b.n	8007f3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f2a:	f7fb fbd1 	bl	80036d0 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e05c      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f3c:	4b11      	ldr	r3, [pc, #68]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0f0      	beq.n	8007f2a <HAL_RCC_OscConfig+0x416>
 8007f48:	e054      	b.n	8007ff4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f4a:	4b10      	ldr	r3, [pc, #64]	@ (8007f8c <HAL_RCC_OscConfig+0x478>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f50:	f7fb fbbe 	bl	80036d0 <HAL_GetTick>
 8007f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f58:	f7fb fbba 	bl	80036d0 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e045      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f6a:	4b06      	ldr	r3, [pc, #24]	@ (8007f84 <HAL_RCC_OscConfig+0x470>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f0      	bne.n	8007f58 <HAL_RCC_OscConfig+0x444>
 8007f76:	e03d      	b.n	8007ff4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d107      	bne.n	8007f90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e038      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
 8007f84:	40023800 	.word	0x40023800
 8007f88:	40007000 	.word	0x40007000
 8007f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f90:	4b1b      	ldr	r3, [pc, #108]	@ (8008000 <HAL_RCC_OscConfig+0x4ec>)
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d028      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d121      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d11a      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d111      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd6:	085b      	lsrs	r3, r3, #1
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d107      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d001      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	40023800 	.word	0x40023800

08008004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e0cc      	b.n	80081b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008018:	4b68      	ldr	r3, [pc, #416]	@ (80081bc <HAL_RCC_ClockConfig+0x1b8>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d90c      	bls.n	8008040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008026:	4b65      	ldr	r3, [pc, #404]	@ (80081bc <HAL_RCC_ClockConfig+0x1b8>)
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	b2d2      	uxtb	r2, r2
 800802c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800802e:	4b63      	ldr	r3, [pc, #396]	@ (80081bc <HAL_RCC_ClockConfig+0x1b8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d001      	beq.n	8008040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e0b8      	b.n	80081b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d020      	beq.n	800808e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d005      	beq.n	8008064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008058:	4b59      	ldr	r3, [pc, #356]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	4a58      	ldr	r2, [pc, #352]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 800805e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008070:	4b53      	ldr	r3, [pc, #332]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	4a52      	ldr	r2, [pc, #328]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008076:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800807a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800807c:	4b50      	ldr	r3, [pc, #320]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	494d      	ldr	r1, [pc, #308]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 800808a:	4313      	orrs	r3, r2
 800808c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d044      	beq.n	8008124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d107      	bne.n	80080b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080a2:	4b47      	ldr	r3, [pc, #284]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d119      	bne.n	80080e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e07f      	b.n	80081b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d003      	beq.n	80080c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d107      	bne.n	80080d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c2:	4b3f      	ldr	r3, [pc, #252]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e06f      	b.n	80081b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d2:	4b3b      	ldr	r3, [pc, #236]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e067      	b.n	80081b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080e2:	4b37      	ldr	r3, [pc, #220]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f023 0203 	bic.w	r2, r3, #3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	4934      	ldr	r1, [pc, #208]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080f4:	f7fb faec 	bl	80036d0 <HAL_GetTick>
 80080f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080fa:	e00a      	b.n	8008112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080fc:	f7fb fae8 	bl	80036d0 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800810a:	4293      	cmp	r3, r2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e04f      	b.n	80081b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008112:	4b2b      	ldr	r3, [pc, #172]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 020c 	and.w	r2, r3, #12
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	429a      	cmp	r2, r3
 8008122:	d1eb      	bne.n	80080fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008124:	4b25      	ldr	r3, [pc, #148]	@ (80081bc <HAL_RCC_ClockConfig+0x1b8>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d20c      	bcs.n	800814c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008132:	4b22      	ldr	r3, [pc, #136]	@ (80081bc <HAL_RCC_ClockConfig+0x1b8>)
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800813a:	4b20      	ldr	r3, [pc, #128]	@ (80081bc <HAL_RCC_ClockConfig+0x1b8>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d001      	beq.n	800814c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e032      	b.n	80081b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008158:	4b19      	ldr	r3, [pc, #100]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	4916      	ldr	r1, [pc, #88]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008166:	4313      	orrs	r3, r2
 8008168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008176:	4b12      	ldr	r3, [pc, #72]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	490e      	ldr	r1, [pc, #56]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008186:	4313      	orrs	r3, r2
 8008188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800818a:	f000 f821 	bl	80081d0 <HAL_RCC_GetSysClockFreq>
 800818e:	4602      	mov	r2, r0
 8008190:	4b0b      	ldr	r3, [pc, #44]	@ (80081c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	091b      	lsrs	r3, r3, #4
 8008196:	f003 030f 	and.w	r3, r3, #15
 800819a:	490a      	ldr	r1, [pc, #40]	@ (80081c4 <HAL_RCC_ClockConfig+0x1c0>)
 800819c:	5ccb      	ldrb	r3, [r1, r3]
 800819e:	fa22 f303 	lsr.w	r3, r2, r3
 80081a2:	4a09      	ldr	r2, [pc, #36]	@ (80081c8 <HAL_RCC_ClockConfig+0x1c4>)
 80081a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80081a6:	4b09      	ldr	r3, [pc, #36]	@ (80081cc <HAL_RCC_ClockConfig+0x1c8>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fb fa4c 	bl	8003648 <HAL_InitTick>

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40023c00 	.word	0x40023c00
 80081c0:	40023800 	.word	0x40023800
 80081c4:	0800e480 	.word	0x0800e480
 80081c8:	20000004 	.word	0x20000004
 80081cc:	20000008 	.word	0x20000008

080081d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081d4:	b090      	sub	sp, #64	@ 0x40
 80081d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081e8:	4b59      	ldr	r3, [pc, #356]	@ (8008350 <HAL_RCC_GetSysClockFreq+0x180>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 030c 	and.w	r3, r3, #12
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d00d      	beq.n	8008210 <HAL_RCC_GetSysClockFreq+0x40>
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	f200 80a1 	bhi.w	800833c <HAL_RCC_GetSysClockFreq+0x16c>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <HAL_RCC_GetSysClockFreq+0x34>
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d003      	beq.n	800820a <HAL_RCC_GetSysClockFreq+0x3a>
 8008202:	e09b      	b.n	800833c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008204:	4b53      	ldr	r3, [pc, #332]	@ (8008354 <HAL_RCC_GetSysClockFreq+0x184>)
 8008206:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008208:	e09b      	b.n	8008342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800820a:	4b53      	ldr	r3, [pc, #332]	@ (8008358 <HAL_RCC_GetSysClockFreq+0x188>)
 800820c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800820e:	e098      	b.n	8008342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008210:	4b4f      	ldr	r3, [pc, #316]	@ (8008350 <HAL_RCC_GetSysClockFreq+0x180>)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800821a:	4b4d      	ldr	r3, [pc, #308]	@ (8008350 <HAL_RCC_GetSysClockFreq+0x180>)
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d028      	beq.n	8008278 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008226:	4b4a      	ldr	r3, [pc, #296]	@ (8008350 <HAL_RCC_GetSysClockFreq+0x180>)
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	099b      	lsrs	r3, r3, #6
 800822c:	2200      	movs	r2, #0
 800822e:	623b      	str	r3, [r7, #32]
 8008230:	627a      	str	r2, [r7, #36]	@ 0x24
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008238:	2100      	movs	r1, #0
 800823a:	4b47      	ldr	r3, [pc, #284]	@ (8008358 <HAL_RCC_GetSysClockFreq+0x188>)
 800823c:	fb03 f201 	mul.w	r2, r3, r1
 8008240:	2300      	movs	r3, #0
 8008242:	fb00 f303 	mul.w	r3, r0, r3
 8008246:	4413      	add	r3, r2
 8008248:	4a43      	ldr	r2, [pc, #268]	@ (8008358 <HAL_RCC_GetSysClockFreq+0x188>)
 800824a:	fba0 1202 	umull	r1, r2, r0, r2
 800824e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008250:	460a      	mov	r2, r1
 8008252:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008256:	4413      	add	r3, r2
 8008258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800825a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825c:	2200      	movs	r2, #0
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	61fa      	str	r2, [r7, #28]
 8008262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800826a:	f7f8 fc8f 	bl	8000b8c <__aeabi_uldivmod>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4613      	mov	r3, r2
 8008274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008276:	e053      	b.n	8008320 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008278:	4b35      	ldr	r3, [pc, #212]	@ (8008350 <HAL_RCC_GetSysClockFreq+0x180>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	099b      	lsrs	r3, r3, #6
 800827e:	2200      	movs	r2, #0
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	617a      	str	r2, [r7, #20]
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800828a:	f04f 0b00 	mov.w	fp, #0
 800828e:	4652      	mov	r2, sl
 8008290:	465b      	mov	r3, fp
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f04f 0100 	mov.w	r1, #0
 800829a:	0159      	lsls	r1, r3, #5
 800829c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082a0:	0150      	lsls	r0, r2, #5
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	ebb2 080a 	subs.w	r8, r2, sl
 80082aa:	eb63 090b 	sbc.w	r9, r3, fp
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	f04f 0300 	mov.w	r3, #0
 80082b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80082ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80082be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80082c2:	ebb2 0408 	subs.w	r4, r2, r8
 80082c6:	eb63 0509 	sbc.w	r5, r3, r9
 80082ca:	f04f 0200 	mov.w	r2, #0
 80082ce:	f04f 0300 	mov.w	r3, #0
 80082d2:	00eb      	lsls	r3, r5, #3
 80082d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082d8:	00e2      	lsls	r2, r4, #3
 80082da:	4614      	mov	r4, r2
 80082dc:	461d      	mov	r5, r3
 80082de:	eb14 030a 	adds.w	r3, r4, sl
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	eb45 030b 	adc.w	r3, r5, fp
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80082f6:	4629      	mov	r1, r5
 80082f8:	028b      	lsls	r3, r1, #10
 80082fa:	4621      	mov	r1, r4
 80082fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008300:	4621      	mov	r1, r4
 8008302:	028a      	lsls	r2, r1, #10
 8008304:	4610      	mov	r0, r2
 8008306:	4619      	mov	r1, r3
 8008308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830a:	2200      	movs	r2, #0
 800830c:	60bb      	str	r3, [r7, #8]
 800830e:	60fa      	str	r2, [r7, #12]
 8008310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008314:	f7f8 fc3a 	bl	8000b8c <__aeabi_uldivmod>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4613      	mov	r3, r2
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008320:	4b0b      	ldr	r3, [pc, #44]	@ (8008350 <HAL_RCC_GetSysClockFreq+0x180>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	0c1b      	lsrs	r3, r3, #16
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	3301      	adds	r3, #1
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008330:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	fbb2 f3f3 	udiv	r3, r2, r3
 8008338:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800833a:	e002      	b.n	8008342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800833c:	4b05      	ldr	r3, [pc, #20]	@ (8008354 <HAL_RCC_GetSysClockFreq+0x184>)
 800833e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008344:	4618      	mov	r0, r3
 8008346:	3740      	adds	r7, #64	@ 0x40
 8008348:	46bd      	mov	sp, r7
 800834a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800834e:	bf00      	nop
 8008350:	40023800 	.word	0x40023800
 8008354:	00f42400 	.word	0x00f42400
 8008358:	017d7840 	.word	0x017d7840

0800835c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008360:	4b03      	ldr	r3, [pc, #12]	@ (8008370 <HAL_RCC_GetHCLKFreq+0x14>)
 8008362:	681b      	ldr	r3, [r3, #0]
}
 8008364:	4618      	mov	r0, r3
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	20000004 	.word	0x20000004

08008374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008378:	f7ff fff0 	bl	800835c <HAL_RCC_GetHCLKFreq>
 800837c:	4602      	mov	r2, r0
 800837e:	4b05      	ldr	r3, [pc, #20]	@ (8008394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	0a9b      	lsrs	r3, r3, #10
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	4903      	ldr	r1, [pc, #12]	@ (8008398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800838a:	5ccb      	ldrb	r3, [r1, r3]
 800838c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008390:	4618      	mov	r0, r3
 8008392:	bd80      	pop	{r7, pc}
 8008394:	40023800 	.word	0x40023800
 8008398:	0800e490 	.word	0x0800e490

0800839c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e022      	b.n	80083f4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7fa feeb 	bl	800319c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2203      	movs	r2, #3
 80083ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f814 	bl	80083fc <HAL_SD_InitCard>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e00a      	b.n	80083f4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80083fc:	b5b0      	push	{r4, r5, r7, lr}
 80083fe:	b08e      	sub	sp, #56	@ 0x38
 8008400:	af04      	add	r7, sp, #16
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008408:	2300      	movs	r3, #0
 800840a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008410:	2300      	movs	r3, #0
 8008412:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008414:	2300      	movs	r3, #0
 8008416:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008418:	2376      	movs	r3, #118	@ 0x76
 800841a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681d      	ldr	r5, [r3, #0]
 8008420:	466c      	mov	r4, sp
 8008422:	f107 0318 	add.w	r3, r7, #24
 8008426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800842a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800842e:	f107 030c 	add.w	r3, r7, #12
 8008432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008434:	4628      	mov	r0, r5
 8008436:	f001 ffb7 	bl	800a3a8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800843a:	4b2a      	ldr	r3, [pc, #168]	@ (80084e4 <HAL_SD_InitCard+0xe8>)
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4618      	mov	r0, r3
 8008446:	f001 fff8 	bl	800a43a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800844a:	4b26      	ldr	r3, [pc, #152]	@ (80084e4 <HAL_SD_InitCard+0xe8>)
 800844c:	2201      	movs	r2, #1
 800844e:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008450:	2002      	movs	r0, #2
 8008452:	f7fb f949 	bl	80036e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 f878 	bl	800954c <SD_PowerON>
 800845c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e02e      	b.n	80084da <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 ff97 	bl	80093b0 <SD_InitCard>
 8008482:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	431a      	orrs	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e01b      	b.n	80084da <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80084aa:	4618      	mov	r0, r3
 80084ac:	f002 f857 	bl	800a55e <SDMMC_CmdBlockLength>
 80084b0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00f      	beq.n	80084d8 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a0a      	ldr	r2, [pc, #40]	@ (80084e8 <HAL_SD_InitCard+0xec>)
 80084be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e000      	b.n	80084da <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3728      	adds	r7, #40	@ 0x28
 80084de:	46bd      	mov	sp, r7
 80084e0:	bdb0      	pop	{r4, r5, r7, pc}
 80084e2:	bf00      	nop
 80084e4:	422580a0 	.word	0x422580a0
 80084e8:	004005ff 	.word	0x004005ff

080084ec <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b092      	sub	sp, #72	@ 0x48
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084fa:	f7fb f8e9 	bl	80036d0 <HAL_GetTick>
 80084fe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d107      	bne.n	800851e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008512:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e1c5      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b01      	cmp	r3, #1
 8008528:	f040 81b8 	bne.w	800889c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008532:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	441a      	add	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800853c:	429a      	cmp	r2, r3
 800853e:	d907      	bls.n	8008550 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008544:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e1ac      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2203      	movs	r2, #3
 8008554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2200      	movs	r2, #0
 800855e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008564:	2b01      	cmp	r3, #1
 8008566:	d002      	beq.n	800856e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856a:	025b      	lsls	r3, r3, #9
 800856c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800856e:	f04f 33ff 	mov.w	r3, #4294967295
 8008572:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	025b      	lsls	r3, r3, #9
 8008578:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800857a:	2390      	movs	r3, #144	@ 0x90
 800857c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800857e:	2302      	movs	r3, #2
 8008580:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008582:	2300      	movs	r3, #0
 8008584:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008586:	2301      	movs	r3, #1
 8008588:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f107 0214 	add.w	r2, r7, #20
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f001 ffb6 	bl	800a506 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d90a      	bls.n	80085b6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2202      	movs	r2, #2
 80085a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 f81a 	bl	800a5e6 <SDMMC_CmdReadMultiBlock>
 80085b2:	6478      	str	r0, [r7, #68]	@ 0x44
 80085b4:	e009      	b.n	80085ca <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 ffed 	bl	800a5a2 <SDMMC_CmdReadSingleBlock>
 80085c8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d012      	beq.n	80085f6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a7e      	ldr	r2, [pc, #504]	@ (80087d0 <HAL_SD_ReadBlocks+0x2e4>)
 80085d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085de:	431a      	orrs	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e159      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80085fa:	e061      	b.n	80086c0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d03c      	beq.n	8008684 <HAL_SD_ReadBlocks+0x198>
 800860a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d039      	beq.n	8008684 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008610:	2300      	movs	r3, #0
 8008612:	643b      	str	r3, [r7, #64]	@ 0x40
 8008614:	e033      	b.n	800867e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4618      	mov	r0, r3
 800861c:	f001 feef 	bl	800a3fe <SDIO_ReadFIFO>
 8008620:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008624:	b2da      	uxtb	r2, r3
 8008626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008628:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800862a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862c:	3301      	adds	r3, #1
 800862e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008632:	3b01      	subs	r3, #1
 8008634:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008638:	0a1b      	lsrs	r3, r3, #8
 800863a:	b2da      	uxtb	r2, r3
 800863c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008642:	3301      	adds	r3, #1
 8008644:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008648:	3b01      	subs	r3, #1
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800864c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864e:	0c1b      	lsrs	r3, r3, #16
 8008650:	b2da      	uxtb	r2, r3
 8008652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008654:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008658:	3301      	adds	r3, #1
 800865a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800865c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865e:	3b01      	subs	r3, #1
 8008660:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008664:	0e1b      	lsrs	r3, r3, #24
 8008666:	b2da      	uxtb	r2, r3
 8008668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800866c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866e:	3301      	adds	r3, #1
 8008670:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008674:	3b01      	subs	r3, #1
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8008678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800867a:	3301      	adds	r3, #1
 800867c:	643b      	str	r3, [r7, #64]	@ 0x40
 800867e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008680:	2b07      	cmp	r3, #7
 8008682:	d9c8      	bls.n	8008616 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008684:	f7fb f824 	bl	80036d0 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008690:	429a      	cmp	r2, r3
 8008692:	d902      	bls.n	800869a <HAL_SD_ReadBlocks+0x1ae>
 8008694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008696:	2b00      	cmp	r3, #0
 8008698:	d112      	bne.n	80086c0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a4c      	ldr	r2, [pc, #304]	@ (80087d0 <HAL_SD_ReadBlocks+0x2e4>)
 80086a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e0f4      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086c6:	f240 332a 	movw	r3, #810	@ 0x32a
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d095      	beq.n	80085fc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d022      	beq.n	8008724 <HAL_SD_ReadBlocks+0x238>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d91f      	bls.n	8008724 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d01b      	beq.n	8008724 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f001 ffdf 	bl	800a6b4 <SDMMC_CmdStopTransfer>
 80086f6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80086f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d012      	beq.n	8008724 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a33      	ldr	r2, [pc, #204]	@ (80087d0 <HAL_SD_ReadBlocks+0x2e4>)
 8008704:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800870a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800870c:	431a      	orrs	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e0c2      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800872a:	f003 0308 	and.w	r3, r3, #8
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <HAL_SD_ReadBlocks+0x254>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800873c:	2b00      	cmp	r3, #0
 800873e:	d012      	beq.n	8008766 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a22      	ldr	r2, [pc, #136]	@ (80087d0 <HAL_SD_ReadBlocks+0x2e4>)
 8008746:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800874c:	f043 0208 	orr.w	r2, r3, #8
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e0a1      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d012      	beq.n	800879a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <HAL_SD_ReadBlocks+0x2e4>)
 800877a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008780:	f043 0202 	orr.w	r2, r3, #2
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e087      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d064      	beq.n	8008872 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a08      	ldr	r2, [pc, #32]	@ (80087d0 <HAL_SD_ReadBlocks+0x2e4>)
 80087ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	f043 0220 	orr.w	r2, r3, #32
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e06d      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
 80087ce:	bf00      	nop
 80087d0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f001 fe10 	bl	800a3fe <SDIO_ReadFIFO>
 80087de:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80087e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80087e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ea:	3301      	adds	r3, #1
 80087ec:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80087ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087f0:	3b01      	subs	r3, #1
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80087f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f6:	0a1b      	lsrs	r3, r3, #8
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087fc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80087fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008800:	3301      	adds	r3, #1
 8008802:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008806:	3b01      	subs	r3, #1
 8008808:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800880a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880c:	0c1b      	lsrs	r3, r3, #16
 800880e:	b2da      	uxtb	r2, r3
 8008810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008812:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008816:	3301      	adds	r3, #1
 8008818:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800881a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800881c:	3b01      	subs	r3, #1
 800881e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008822:	0e1b      	lsrs	r3, r3, #24
 8008824:	b2da      	uxtb	r2, r3
 8008826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008828:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800882a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800882c:	3301      	adds	r3, #1
 800882e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008832:	3b01      	subs	r3, #1
 8008834:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008836:	f7fa ff4b 	bl	80036d0 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008842:	429a      	cmp	r2, r3
 8008844:	d902      	bls.n	800884c <HAL_SD_ReadBlocks+0x360>
 8008846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008848:	2b00      	cmp	r3, #0
 800884a:	d112      	bne.n	8008872 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a18      	ldr	r2, [pc, #96]	@ (80088b4 <HAL_SD_ReadBlocks+0x3c8>)
 8008852:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008858:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e01b      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <HAL_SD_ReadBlocks+0x39a>
 8008880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1a6      	bne.n	80087d4 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800888e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	e006      	b.n	80088aa <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
  }
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3748      	adds	r7, #72	@ 0x48
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	004005ff 	.word	0x004005ff

080088b8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b092      	sub	sp, #72	@ 0x48
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088c6:	f7fa ff03 	bl	80036d0 <HAL_GetTick>
 80088ca:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d107      	bne.n	80088ea <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e16d      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	f040 8160 	bne.w	8008bb8 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	441a      	add	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008908:	429a      	cmp	r2, r3
 800890a:	d907      	bls.n	800891c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008910:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e154      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2203      	movs	r2, #3
 8008920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2200      	movs	r2, #0
 800892a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008930:	2b01      	cmp	r3, #1
 8008932:	d002      	beq.n	800893a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008936:	025b      	lsls	r3, r3, #9
 8008938:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800893a:	f04f 33ff 	mov.w	r3, #4294967295
 800893e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	025b      	lsls	r3, r3, #9
 8008944:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008946:	2390      	movs	r3, #144	@ 0x90
 8008948:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800894a:	2300      	movs	r3, #0
 800894c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800894e:	2300      	movs	r3, #0
 8008950:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008952:	2301      	movs	r3, #1
 8008954:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f107 0218 	add.w	r2, r7, #24
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f001 fdd0 	bl	800a506 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d90a      	bls.n	8008982 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2220      	movs	r2, #32
 8008970:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008978:	4618      	mov	r0, r3
 800897a:	f001 fe78 	bl	800a66e <SDMMC_CmdWriteMultiBlock>
 800897e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008980:	e009      	b.n	8008996 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2210      	movs	r2, #16
 8008986:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800898e:	4618      	mov	r0, r3
 8008990:	f001 fe4b 	bl	800a62a <SDMMC_CmdWriteSingleBlock>
 8008994:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008998:	2b00      	cmp	r3, #0
 800899a:	d012      	beq.n	80089c2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a8b      	ldr	r2, [pc, #556]	@ (8008bd0 <HAL_SD_WriteBlocks+0x318>)
 80089a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089aa:	431a      	orrs	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e101      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80089c6:	e065      	b.n	8008a94 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d040      	beq.n	8008a58 <HAL_SD_WriteBlocks+0x1a0>
 80089d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d03d      	beq.n	8008a58 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80089dc:	2300      	movs	r3, #0
 80089de:	643b      	str	r3, [r7, #64]	@ 0x40
 80089e0:	e037      	b.n	8008a52 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80089e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ea:	3301      	adds	r3, #1
 80089ec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80089ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f0:	3b01      	subs	r3, #1
 80089f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80089f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	021a      	lsls	r2, r3, #8
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a02:	3301      	adds	r3, #1
 8008a04:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	041a      	lsls	r2, r3, #16
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a20:	3b01      	subs	r3, #1
 8008a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	061a      	lsls	r2, r3, #24
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a32:	3301      	adds	r3, #1
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f107 0214 	add.w	r2, r7, #20
 8008a44:	4611      	mov	r1, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fce6 	bl	800a418 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a4e:	3301      	adds	r3, #1
 8008a50:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a54:	2b07      	cmp	r3, #7
 8008a56:	d9c4      	bls.n	80089e2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a58:	f7fa fe3a 	bl	80036d0 <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d902      	bls.n	8008a6e <HAL_SD_WriteBlocks+0x1b6>
 8008a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d112      	bne.n	8008a94 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a57      	ldr	r2, [pc, #348]	@ (8008bd0 <HAL_SD_WriteBlocks+0x318>)
 8008a74:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e098      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a9a:	f240 331a 	movw	r3, #794	@ 0x31a
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d091      	beq.n	80089c8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d022      	beq.n	8008af8 <HAL_SD_WriteBlocks+0x240>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d91f      	bls.n	8008af8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d01b      	beq.n	8008af8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 fdf5 	bl	800a6b4 <SDMMC_CmdStopTransfer>
 8008aca:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d012      	beq.n	8008af8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8008bd0 <HAL_SD_WriteBlocks+0x318>)
 8008ad8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e066      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_SD_WriteBlocks+0x25c>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d012      	beq.n	8008b3a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a2d      	ldr	r2, [pc, #180]	@ (8008bd0 <HAL_SD_WriteBlocks+0x318>)
 8008b1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b20:	f043 0208 	orr.w	r2, r3, #8
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e045      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b40:	f003 0302 	and.w	r3, r3, #2
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d012      	beq.n	8008b6e <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a20      	ldr	r2, [pc, #128]	@ (8008bd0 <HAL_SD_WriteBlocks+0x318>)
 8008b4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b54:	f043 0202 	orr.w	r2, r3, #2
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e02b      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b74:	f003 0310 	and.w	r3, r3, #16
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d012      	beq.n	8008ba2 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a13      	ldr	r2, [pc, #76]	@ (8008bd0 <HAL_SD_WriteBlocks+0x318>)
 8008b82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b88:	f043 0210 	orr.w	r2, r3, #16
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e011      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008baa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e006      	b.n	8008bc6 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
  }
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3748      	adds	r7, #72	@ 0x48
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	004005ff 	.word	0x004005ff

08008bd4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d008      	beq.n	8008c02 <HAL_SD_IRQHandler+0x2e>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fd5c 	bl	80096b8 <SD_Read_IT>
 8008c00:	e165      	b.n	8008ece <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 808f 	beq.w	8008d30 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c1a:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8008c2a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8008c2e:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0201 	bic.w	r2, r2, #1
 8008c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d039      	beq.n	8008cbe <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d104      	bne.n	8008c5e <HAL_SD_IRQHandler+0x8a>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d011      	beq.n	8008c82 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 fd26 	bl	800a6b4 <SDMMC_CmdStopTransfer>
 8008c68:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d008      	beq.n	8008c82 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	431a      	orrs	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f92f 	bl	8008ee0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008c8a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <HAL_SD_IRQHandler+0xda>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f002 f94c 	bl	800af4c <HAL_SD_RxCpltCallback>
 8008cb4:	e10b      	b.n	8008ece <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f002 f93e 	bl	800af38 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008cbc:	e107      	b.n	8008ece <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8102 	beq.w	8008ece <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f003 0320 	and.w	r3, r3, #32
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d011      	beq.n	8008cf8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f001 fceb 	bl	800a6b4 <SDMMC_CmdStopTransfer>
 8008cde:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d008      	beq.n	8008cf8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	431a      	orrs	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f8f4 	bl	8008ee0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f040 80e5 	bne.w	8008ece <HAL_SD_IRQHandler+0x2fa>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 80df 	bne.w	8008ece <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0208 	bic.w	r2, r2, #8
 8008d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f002 f905 	bl	800af38 <HAL_SD_TxCpltCallback>
}
 8008d2e:	e0ce      	b.n	8008ece <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d008      	beq.n	8008d50 <HAL_SD_IRQHandler+0x17c>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f003 0308 	and.w	r3, r3, #8
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fd06 	bl	800975a <SD_Write_IT>
 8008d4e:	e0be      	b.n	8008ece <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d56:	f240 233a 	movw	r3, #570	@ 0x23a
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 80b6 	beq.w	8008ece <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d68:	f003 0302 	and.w	r3, r3, #2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d005      	beq.n	8008d7c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d74:	f043 0202 	orr.w	r2, r3, #2
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d82:	f003 0308 	and.w	r3, r3, #8
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8e:	f043 0208 	orr.w	r2, r3, #8
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d9c:	f003 0320 	and.w	r3, r3, #32
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da8:	f043 0220 	orr.w	r2, r3, #32
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc2:	f043 0210 	orr.w	r2, r3, #16
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ddc:	f043 0208 	orr.w	r2, r3, #8
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f240 723a 	movw	r2, #1850	@ 0x73a
 8008dec:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8008dfc:	f023 0302 	bic.w	r3, r3, #2
 8008e00:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 fc54 	bl	800a6b4 <SDMMC_CmdStopTransfer>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f003 0308 	and.w	r3, r3, #8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f855 	bl	8008ee0 <HAL_SD_ErrorCallback>
}
 8008e36:	e04a      	b.n	8008ece <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d045      	beq.n	8008ece <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f003 0310 	and.w	r3, r3, #16
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <HAL_SD_IRQHandler+0x282>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d011      	beq.n	8008e7a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ed8 <HAL_SD_IRQHandler+0x304>)
 8008e5c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fc f80d 	bl	8004e82 <HAL_DMA_Abort_IT>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d02f      	beq.n	8008ece <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fa2e 	bl	80092d4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008e78:	e029      	b.n	8008ece <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d104      	bne.n	8008e8e <HAL_SD_IRQHandler+0x2ba>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d011      	beq.n	8008eb2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e92:	4a12      	ldr	r2, [pc, #72]	@ (8008edc <HAL_SD_IRQHandler+0x308>)
 8008e94:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fb fff1 	bl	8004e82 <HAL_DMA_Abort_IT>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d013      	beq.n	8008ece <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fa49 	bl	8009342 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008eb0:	e00d      	b.n	8008ece <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f002 f82c 	bl	800af24 <HAL_SD_AbortCallback>
}
 8008ecc:	e7ff      	b.n	8008ece <HAL_SD_IRQHandler+0x2fa>
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	080092d5 	.word	0x080092d5
 8008edc:	08009343 	.word	0x08009343

08008ee0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f02:	0f9b      	lsrs	r3, r3, #30
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f0e:	0e9b      	lsrs	r3, r3, #26
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f20:	0e1b      	lsrs	r3, r3, #24
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	f003 0303 	and.w	r3, r3, #3
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f32:	0c1b      	lsrs	r3, r3, #16
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f3e:	0a1b      	lsrs	r3, r3, #8
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f54:	0d1b      	lsrs	r3, r3, #20
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f72:	0bdb      	lsrs	r3, r3, #15
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f84:	0b9b      	lsrs	r3, r3, #14
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f96:	0b5b      	lsrs	r3, r3, #13
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fa8:	0b1b      	lsrs	r3, r3, #12
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d163      	bne.n	800908c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fc8:	009a      	lsls	r2, r3, #2
 8008fca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008fce:	4013      	ands	r3, r2
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008fd4:	0f92      	lsrs	r2, r2, #30
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fe0:	0edb      	lsrs	r3, r3, #27
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	f003 0307 	and.w	r3, r3, #7
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ff2:	0e1b      	lsrs	r3, r3, #24
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009004:	0d5b      	lsrs	r3, r3, #21
 8009006:	b2db      	uxtb	r3, r3
 8009008:	f003 0307 	and.w	r3, r3, #7
 800900c:	b2da      	uxtb	r2, r3
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009016:	0c9b      	lsrs	r3, r3, #18
 8009018:	b2db      	uxtb	r3, r3
 800901a:	f003 0307 	and.w	r3, r3, #7
 800901e:	b2da      	uxtb	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009028:	0bdb      	lsrs	r3, r3, #15
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	b2da      	uxtb	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	7e1b      	ldrb	r3, [r3, #24]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	f003 0307 	and.w	r3, r3, #7
 800904a:	3302      	adds	r3, #2
 800904c:	2201      	movs	r2, #1
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009056:	fb03 f202 	mul.w	r2, r3, r2
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	7a1b      	ldrb	r3, [r3, #8]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	2201      	movs	r2, #1
 800906a:	409a      	lsls	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009078:	0a52      	lsrs	r2, r2, #9
 800907a:	fb03 f202 	mul.w	r2, r3, r2
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009088:	661a      	str	r2, [r3, #96]	@ 0x60
 800908a:	e031      	b.n	80090f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009090:	2b01      	cmp	r3, #1
 8009092:	d11d      	bne.n	80090d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009098:	041b      	lsls	r3, r3, #16
 800909a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090a2:	0c1b      	lsrs	r3, r3, #16
 80090a4:	431a      	orrs	r2, r3
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	3301      	adds	r3, #1
 80090b0:	029a      	lsls	r2, r3, #10
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090c4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80090ce:	e00f      	b.n	80090f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a58      	ldr	r2, [pc, #352]	@ (8009238 <HAL_SD_GetCardCSD+0x344>)
 80090d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e09d      	b.n	800922c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090f4:	0b9b      	lsrs	r3, r3, #14
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009106:	09db      	lsrs	r3, r3, #7
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800910e:	b2da      	uxtb	r2, r3
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009118:	b2db      	uxtb	r3, r3
 800911a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800911e:	b2da      	uxtb	r2, r3
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009128:	0fdb      	lsrs	r3, r3, #31
 800912a:	b2da      	uxtb	r2, r3
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009134:	0f5b      	lsrs	r3, r3, #29
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 0303 	and.w	r3, r3, #3
 800913c:	b2da      	uxtb	r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009146:	0e9b      	lsrs	r3, r3, #26
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009158:	0d9b      	lsrs	r3, r3, #22
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800916a:	0d5b      	lsrs	r3, r3, #21
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009186:	0c1b      	lsrs	r3, r3, #16
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	b2da      	uxtb	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800919a:	0bdb      	lsrs	r3, r3, #15
 800919c:	b2db      	uxtb	r3, r3
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ae:	0b9b      	lsrs	r3, r3, #14
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091c2:	0b5b      	lsrs	r3, r3, #13
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091d6:	0b1b      	lsrs	r3, r3, #12
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ea:	0a9b      	lsrs	r3, r3, #10
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	b2db      	uxtb	r3, r3
 8009202:	f003 0303 	and.w	r3, r3, #3
 8009206:	b2da      	uxtb	r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009212:	085b      	lsrs	r3, r3, #1
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800921a:	b2da      	uxtb	r2, r3
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	004005ff 	.word	0x004005ff

0800923c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80092a0:	f107 030c 	add.w	r3, r7, #12
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f9de 	bl	8009668 <SD_SendStatus>
 80092ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	0a5b      	lsrs	r3, r3, #9
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80092ca:	693b      	ldr	r3, [r7, #16]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80092ea:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7ff ffd1 	bl	8009294 <HAL_SD_GetCardState>
 80092f2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b06      	cmp	r3, #6
 8009306:	d002      	beq.n	800930e <SD_DMATxAbort+0x3a>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2b05      	cmp	r3, #5
 800930c:	d10a      	bne.n	8009324 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4618      	mov	r0, r3
 8009314:	f001 f9ce 	bl	800a6b4 <SDMMC_CmdStopTransfer>
 8009318:	4602      	mov	r2, r0
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931e:	431a      	orrs	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009328:	2b00      	cmp	r3, #0
 800932a:	d103      	bne.n	8009334 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f001 fdf9 	bl	800af24 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009332:	e002      	b.n	800933a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7ff fdd3 	bl	8008ee0 <HAL_SD_ErrorCallback>
}
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009358:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff ff9a 	bl	8009294 <HAL_SD_GetCardState>
 8009360:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2b06      	cmp	r3, #6
 8009374:	d002      	beq.n	800937c <SD_DMARxAbort+0x3a>
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b05      	cmp	r3, #5
 800937a:	d10a      	bne.n	8009392 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	f001 f997 	bl	800a6b4 <SDMMC_CmdStopTransfer>
 8009386:	4602      	mov	r2, r0
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800938c:	431a      	orrs	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009396:	2b00      	cmp	r3, #0
 8009398:	d103      	bne.n	80093a2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f001 fdc2 	bl	800af24 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80093a0:	e002      	b.n	80093a8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff fd9c 	bl	8008ee0 <HAL_SD_ErrorCallback>
}
 80093a8:	bf00      	nop
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80093b0:	b5b0      	push	{r4, r5, r7, lr}
 80093b2:	b094      	sub	sp, #80	@ 0x50
 80093b4:	af04      	add	r7, sp, #16
 80093b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80093b8:	2301      	movs	r3, #1
 80093ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 f848 	bl	800a456 <SDIO_GetPowerState>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d102      	bne.n	80093d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80093d0:	e0b8      	b.n	8009544 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d02f      	beq.n	800943a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fa2f 	bl	800a842 <SDMMC_CmdSendCID>
 80093e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80093ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ee:	e0a9      	b.n	8009544 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2100      	movs	r1, #0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f001 f872 	bl	800a4e0 <SDIO_GetResponse>
 80093fc:	4602      	mov	r2, r0
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2104      	movs	r1, #4
 8009408:	4618      	mov	r0, r3
 800940a:	f001 f869 	bl	800a4e0 <SDIO_GetResponse>
 800940e:	4602      	mov	r2, r0
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2108      	movs	r1, #8
 800941a:	4618      	mov	r0, r3
 800941c:	f001 f860 	bl	800a4e0 <SDIO_GetResponse>
 8009420:	4602      	mov	r2, r0
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	210c      	movs	r1, #12
 800942c:	4618      	mov	r0, r3
 800942e:	f001 f857 	bl	800a4e0 <SDIO_GetResponse>
 8009432:	4602      	mov	r2, r0
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800943e:	2b03      	cmp	r3, #3
 8009440:	d00d      	beq.n	800945e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f107 020e 	add.w	r2, r7, #14
 800944a:	4611      	mov	r1, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f001 fa35 	bl	800a8bc <SDMMC_CmdSetRelAdd>
 8009452:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <SD_InitCard+0xae>
    {
      return errorstate;
 800945a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800945c:	e072      	b.n	8009544 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009462:	2b03      	cmp	r3, #3
 8009464:	d036      	beq.n	80094d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009466:	89fb      	ldrh	r3, [r7, #14]
 8009468:	461a      	mov	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009476:	041b      	lsls	r3, r3, #16
 8009478:	4619      	mov	r1, r3
 800947a:	4610      	mov	r0, r2
 800947c:	f001 f9ff 	bl	800a87e <SDMMC_CmdSendCSD>
 8009480:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800948a:	e05b      	b.n	8009544 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2100      	movs	r1, #0
 8009492:	4618      	mov	r0, r3
 8009494:	f001 f824 	bl	800a4e0 <SDIO_GetResponse>
 8009498:	4602      	mov	r2, r0
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2104      	movs	r1, #4
 80094a4:	4618      	mov	r0, r3
 80094a6:	f001 f81b 	bl	800a4e0 <SDIO_GetResponse>
 80094aa:	4602      	mov	r2, r0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2108      	movs	r1, #8
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 f812 	bl	800a4e0 <SDIO_GetResponse>
 80094bc:	4602      	mov	r2, r0
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	210c      	movs	r1, #12
 80094c8:	4618      	mov	r0, r3
 80094ca:	f001 f809 	bl	800a4e0 <SDIO_GetResponse>
 80094ce:	4602      	mov	r2, r0
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2104      	movs	r1, #4
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 f800 	bl	800a4e0 <SDIO_GetResponse>
 80094e0:	4603      	mov	r3, r0
 80094e2:	0d1a      	lsrs	r2, r3, #20
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80094e8:	f107 0310 	add.w	r3, r7, #16
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff fd00 	bl	8008ef4 <HAL_SD_GetCardCSD>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80094fe:	e021      	b.n	8009544 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6819      	ldr	r1, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009508:	041b      	lsls	r3, r3, #16
 800950a:	2200      	movs	r2, #0
 800950c:	461c      	mov	r4, r3
 800950e:	4615      	mov	r5, r2
 8009510:	4622      	mov	r2, r4
 8009512:	462b      	mov	r3, r5
 8009514:	4608      	mov	r0, r1
 8009516:	f001 f8ef 	bl	800a6f8 <SDMMC_CmdSelDesel>
 800951a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800951c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <SD_InitCard+0x176>
  {
    return errorstate;
 8009522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009524:	e00e      	b.n	8009544 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681d      	ldr	r5, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	466c      	mov	r4, sp
 800952e:	f103 0210 	add.w	r2, r3, #16
 8009532:	ca07      	ldmia	r2, {r0, r1, r2}
 8009534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009538:	3304      	adds	r3, #4
 800953a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800953c:	4628      	mov	r0, r5
 800953e:	f000 ff33 	bl	800a3a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3740      	adds	r7, #64	@ 0x40
 8009548:	46bd      	mov	sp, r7
 800954a:	bdb0      	pop	{r4, r5, r7, pc}

0800954c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	2300      	movs	r3, #0
 800955e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4618      	mov	r0, r3
 8009566:	f001 f8ea 	bl	800a73e <SDMMC_CmdGoIdleState>
 800956a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	e072      	b.n	800965c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f001 f8fd 	bl	800a77a <SDMMC_CmdOperCond>
 8009580:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00d      	beq.n	80095a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4618      	mov	r0, r3
 8009594:	f001 f8d3 	bl	800a73e <SDMMC_CmdGoIdleState>
 8009598:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	e05b      	b.n	800965c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d137      	bne.n	8009622 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2100      	movs	r1, #0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f001 f8fd 	bl	800a7b8 <SDMMC_CmdAppCommand>
 80095be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d02d      	beq.n	8009622 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80095ca:	e047      	b.n	800965c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2100      	movs	r1, #0
 80095d2:	4618      	mov	r0, r3
 80095d4:	f001 f8f0 	bl	800a7b8 <SDMMC_CmdAppCommand>
 80095d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	e03b      	b.n	800965c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	491e      	ldr	r1, [pc, #120]	@ (8009664 <SD_PowerON+0x118>)
 80095ea:	4618      	mov	r0, r3
 80095ec:	f001 f906 	bl	800a7fc <SDMMC_CmdAppOperCommand>
 80095f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80095fc:	e02e      	b.n	800965c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2100      	movs	r1, #0
 8009604:	4618      	mov	r0, r3
 8009606:	f000 ff6b 	bl	800a4e0 <SDIO_GetResponse>
 800960a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	0fdb      	lsrs	r3, r3, #31
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <SD_PowerON+0xcc>
 8009614:	2301      	movs	r3, #1
 8009616:	e000      	b.n	800961a <SD_PowerON+0xce>
 8009618:	2300      	movs	r3, #0
 800961a:	613b      	str	r3, [r7, #16]

    count++;
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	3301      	adds	r3, #1
 8009620:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009628:	4293      	cmp	r3, r2
 800962a:	d802      	bhi.n	8009632 <SD_PowerON+0xe6>
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0cc      	beq.n	80095cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009638:	4293      	cmp	r3, r2
 800963a:	d902      	bls.n	8009642 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800963c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009640:	e00c      	b.n	800965c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	645a      	str	r2, [r3, #68]	@ 0x44
 8009652:	e002      	b.n	800965a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	c1100000 	.word	0xc1100000

08009668 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d102      	bne.n	800967e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009678:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800967c:	e018      	b.n	80096b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009686:	041b      	lsls	r3, r3, #16
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f001 f937 	bl	800a8fe <SDMMC_CmdSendStatus>
 8009690:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	e009      	b.n	80096b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2100      	movs	r1, #0
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 ff1c 	bl	800a4e0 <SDIO_GetResponse>
 80096a8:	4602      	mov	r2, r0
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d03f      	beq.n	8009752 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]
 80096d6:	e033      	b.n	8009740 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 fe8e 	bl	800a3fe <SDIO_ReadFIFO>
 80096e2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3301      	adds	r3, #1
 80096f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	0a1b      	lsrs	r3, r3, #8
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	3b01      	subs	r3, #1
 800970c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	0c1b      	lsrs	r3, r3, #16
 8009712:	b2da      	uxtb	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3b01      	subs	r3, #1
 8009722:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	0e1b      	lsrs	r3, r3, #24
 8009728:	b2da      	uxtb	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3301      	adds	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	3b01      	subs	r3, #1
 8009738:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	3301      	adds	r3, #1
 800973e:	617b      	str	r3, [r7, #20]
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b07      	cmp	r3, #7
 8009744:	d9c8      	bls.n	80096d8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8009752:	bf00      	nop
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800976c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d043      	beq.n	80097fc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	e037      	b.n	80097ea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3301      	adds	r3, #1
 8009784:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	3b01      	subs	r3, #1
 800978a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	021a      	lsls	r2, r3, #8
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	4313      	orrs	r3, r2
 8009796:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	041a      	lsls	r2, r3, #16
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	3301      	adds	r3, #1
 80097b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	3b01      	subs	r3, #1
 80097ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	061a      	lsls	r2, r3, #24
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	3301      	adds	r3, #1
 80097cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f107 0208 	add.w	r2, r7, #8
 80097dc:	4611      	mov	r1, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fe1a 	bl	800a418 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	3301      	adds	r3, #1
 80097e8:	617b      	str	r3, [r7, #20]
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	d9c4      	bls.n	800977a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80097fc:	bf00      	nop
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e07b      	b.n	800990e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800981a:	2b00      	cmp	r3, #0
 800981c:	d108      	bne.n	8009830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009826:	d009      	beq.n	800983c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	61da      	str	r2, [r3, #28]
 800982e:	e005      	b.n	800983c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7f9 fd10 	bl	800327c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009884:	431a      	orrs	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800988e:	431a      	orrs	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	431a      	orrs	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	431a      	orrs	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098ac:	431a      	orrs	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	69db      	ldr	r3, [r3, #28]
 80098b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098c0:	ea42 0103 	orr.w	r1, r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	0c1b      	lsrs	r3, r3, #16
 80098da:	f003 0104 	and.w	r1, r3, #4
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e2:	f003 0210 	and.w	r2, r3, #16
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	69da      	ldr	r2, [r3, #28]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b088      	sub	sp, #32
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	603b      	str	r3, [r7, #0]
 8009922:	4613      	mov	r3, r2
 8009924:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009926:	f7f9 fed3 	bl	80036d0 <HAL_GetTick>
 800992a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800992c:	88fb      	ldrh	r3, [r7, #6]
 800992e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b01      	cmp	r3, #1
 800993a:	d001      	beq.n	8009940 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800993c:	2302      	movs	r3, #2
 800993e:	e12a      	b.n	8009b96 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <HAL_SPI_Transmit+0x36>
 8009946:	88fb      	ldrh	r3, [r7, #6]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e122      	b.n	8009b96 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009956:	2b01      	cmp	r3, #1
 8009958:	d101      	bne.n	800995e <HAL_SPI_Transmit+0x48>
 800995a:	2302      	movs	r3, #2
 800995c:	e11b      	b.n	8009b96 <HAL_SPI_Transmit+0x280>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2203      	movs	r2, #3
 800996a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	88fa      	ldrh	r2, [r7, #6]
 800997e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	88fa      	ldrh	r2, [r7, #6]
 8009984:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099ac:	d10f      	bne.n	80099ce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80099cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d8:	2b40      	cmp	r3, #64	@ 0x40
 80099da:	d007      	beq.n	80099ec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f4:	d152      	bne.n	8009a9c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <HAL_SPI_Transmit+0xee>
 80099fe:	8b7b      	ldrh	r3, [r7, #26]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d145      	bne.n	8009a90 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a08:	881a      	ldrh	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a14:	1c9a      	adds	r2, r3, #2
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	3b01      	subs	r3, #1
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009a28:	e032      	b.n	8009a90 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f003 0302 	and.w	r3, r3, #2
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d112      	bne.n	8009a5e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a3c:	881a      	ldrh	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a48:	1c9a      	adds	r2, r3, #2
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	3b01      	subs	r3, #1
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009a5c:	e018      	b.n	8009a90 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a5e:	f7f9 fe37 	bl	80036d0 <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d803      	bhi.n	8009a76 <HAL_SPI_Transmit+0x160>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a74:	d102      	bne.n	8009a7c <HAL_SPI_Transmit+0x166>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d109      	bne.n	8009a90 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e082      	b.n	8009b96 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1c7      	bne.n	8009a2a <HAL_SPI_Transmit+0x114>
 8009a9a:	e053      	b.n	8009b44 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <HAL_SPI_Transmit+0x194>
 8009aa4:	8b7b      	ldrh	r3, [r7, #26]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d147      	bne.n	8009b3a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	330c      	adds	r3, #12
 8009ab4:	7812      	ldrb	r2, [r2, #0]
 8009ab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009ad0:	e033      	b.n	8009b3a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d113      	bne.n	8009b08 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	330c      	adds	r3, #12
 8009aea:	7812      	ldrb	r2, [r2, #0]
 8009aec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009b06:	e018      	b.n	8009b3a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b08:	f7f9 fde2 	bl	80036d0 <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d803      	bhi.n	8009b20 <HAL_SPI_Transmit+0x20a>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1e:	d102      	bne.n	8009b26 <HAL_SPI_Transmit+0x210>
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d109      	bne.n	8009b3a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e02d      	b.n	8009b96 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1c6      	bne.n	8009ad2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b44:	69fa      	ldr	r2, [r7, #28]
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 fbd9 	bl	800a300 <SPI_EndRxTxTransaction>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2220      	movs	r2, #32
 8009b58:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	617b      	str	r3, [r7, #20]
 8009b76:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e000      	b.n	8009b96 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009b94:	2300      	movs	r3, #0
  }
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3720      	adds	r7, #32
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b088      	sub	sp, #32
 8009ba2:	af02      	add	r7, sp, #8
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	603b      	str	r3, [r7, #0]
 8009baa:	4613      	mov	r3, r2
 8009bac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d001      	beq.n	8009bbe <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e104      	b.n	8009dc8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <HAL_SPI_Receive+0x2c>
 8009bc4:	88fb      	ldrh	r3, [r7, #6]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d101      	bne.n	8009bce <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e0fc      	b.n	8009dc8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bd6:	d112      	bne.n	8009bfe <HAL_SPI_Receive+0x60>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10e      	bne.n	8009bfe <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2204      	movs	r2, #4
 8009be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009be8:	88fa      	ldrh	r2, [r7, #6]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	68b9      	ldr	r1, [r7, #8]
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 f8eb 	bl	8009dd0 <HAL_SPI_TransmitReceive>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	e0e4      	b.n	8009dc8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bfe:	f7f9 fd67 	bl	80036d0 <HAL_GetTick>
 8009c02:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d101      	bne.n	8009c12 <HAL_SPI_Receive+0x74>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e0da      	b.n	8009dc8 <HAL_SPI_Receive+0x22a>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	88fa      	ldrh	r2, [r7, #6]
 8009c32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	88fa      	ldrh	r2, [r7, #6]
 8009c38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c60:	d10f      	bne.n	8009c82 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009c80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8c:	2b40      	cmp	r3, #64	@ 0x40
 8009c8e:	d007      	beq.n	8009ca0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d170      	bne.n	8009d8a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009ca8:	e035      	b.n	8009d16 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d115      	bne.n	8009ce4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f103 020c 	add.w	r2, r3, #12
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc4:	7812      	ldrb	r2, [r2, #0]
 8009cc6:	b2d2      	uxtb	r2, r2
 8009cc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ce2:	e018      	b.n	8009d16 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ce4:	f7f9 fcf4 	bl	80036d0 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d803      	bhi.n	8009cfc <HAL_SPI_Receive+0x15e>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d102      	bne.n	8009d02 <HAL_SPI_Receive+0x164>
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d109      	bne.n	8009d16 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e058      	b.n	8009dc8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1c4      	bne.n	8009caa <HAL_SPI_Receive+0x10c>
 8009d20:	e038      	b.n	8009d94 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d113      	bne.n	8009d58 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68da      	ldr	r2, [r3, #12]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3a:	b292      	uxth	r2, r2
 8009d3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d42:	1c9a      	adds	r2, r3, #2
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d56:	e018      	b.n	8009d8a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d58:	f7f9 fcba 	bl	80036d0 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d803      	bhi.n	8009d70 <HAL_SPI_Receive+0x1d2>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6e:	d102      	bne.n	8009d76 <HAL_SPI_Receive+0x1d8>
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d109      	bne.n	8009d8a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e01e      	b.n	8009dc8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1c6      	bne.n	8009d22 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 fa4b 	bl	800a234 <SPI_EndRxTransaction>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2220      	movs	r2, #32
 8009da8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e000      	b.n	8009dc8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
  }
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08a      	sub	sp, #40	@ 0x28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009dde:	2301      	movs	r3, #1
 8009de0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009de2:	f7f9 fc75 	bl	80036d0 <HAL_GetTick>
 8009de6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009dee:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009df6:	887b      	ldrh	r3, [r7, #2]
 8009df8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009dfa:	7ffb      	ldrb	r3, [r7, #31]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d00c      	beq.n	8009e1a <HAL_SPI_TransmitReceive+0x4a>
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e06:	d106      	bne.n	8009e16 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d102      	bne.n	8009e16 <HAL_SPI_TransmitReceive+0x46>
 8009e10:	7ffb      	ldrb	r3, [r7, #31]
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	d001      	beq.n	8009e1a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009e16:	2302      	movs	r3, #2
 8009e18:	e17f      	b.n	800a11a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d005      	beq.n	8009e2c <HAL_SPI_TransmitReceive+0x5c>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <HAL_SPI_TransmitReceive+0x5c>
 8009e26:	887b      	ldrh	r3, [r7, #2]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e174      	b.n	800a11a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_SPI_TransmitReceive+0x6e>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e16d      	b.n	800a11a <HAL_SPI_TransmitReceive+0x34a>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d003      	beq.n	8009e5a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2205      	movs	r2, #5
 8009e56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	887a      	ldrh	r2, [r7, #2]
 8009e6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	887a      	ldrh	r2, [r7, #2]
 8009e70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	887a      	ldrh	r2, [r7, #2]
 8009e7c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	887a      	ldrh	r2, [r7, #2]
 8009e82:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e9a:	2b40      	cmp	r3, #64	@ 0x40
 8009e9c:	d007      	beq.n	8009eae <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009eac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eb6:	d17e      	bne.n	8009fb6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <HAL_SPI_TransmitReceive+0xf6>
 8009ec0:	8afb      	ldrh	r3, [r7, #22]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d16c      	bne.n	8009fa0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eca:	881a      	ldrh	r2, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed6:	1c9a      	adds	r2, r3, #2
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eea:	e059      	b.n	8009fa0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f003 0302 	and.w	r3, r3, #2
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d11b      	bne.n	8009f32 <HAL_SPI_TransmitReceive+0x162>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d016      	beq.n	8009f32 <HAL_SPI_TransmitReceive+0x162>
 8009f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d113      	bne.n	8009f32 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0e:	881a      	ldrh	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f1a:	1c9a      	adds	r2, r3, #2
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	3b01      	subs	r3, #1
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d119      	bne.n	8009f74 <HAL_SPI_TransmitReceive+0x1a4>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d014      	beq.n	8009f74 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68da      	ldr	r2, [r3, #12]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f54:	b292      	uxth	r2, r2
 8009f56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5c:	1c9a      	adds	r2, r3, #2
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f70:	2301      	movs	r3, #1
 8009f72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f74:	f7f9 fbac 	bl	80036d0 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d80d      	bhi.n	8009fa0 <HAL_SPI_TransmitReceive+0x1d0>
 8009f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8a:	d009      	beq.n	8009fa0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e0bc      	b.n	800a11a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1a0      	bne.n	8009eec <HAL_SPI_TransmitReceive+0x11c>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d19b      	bne.n	8009eec <HAL_SPI_TransmitReceive+0x11c>
 8009fb4:	e082      	b.n	800a0bc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <HAL_SPI_TransmitReceive+0x1f4>
 8009fbe:	8afb      	ldrh	r3, [r7, #22]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d171      	bne.n	800a0a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	330c      	adds	r3, #12
 8009fce:	7812      	ldrb	r2, [r2, #0]
 8009fd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fea:	e05d      	b.n	800a0a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f003 0302 	and.w	r3, r3, #2
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d11c      	bne.n	800a034 <HAL_SPI_TransmitReceive+0x264>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d017      	beq.n	800a034 <HAL_SPI_TransmitReceive+0x264>
 800a004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a006:	2b01      	cmp	r3, #1
 800a008:	d114      	bne.n	800a034 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	330c      	adds	r3, #12
 800a014:	7812      	ldrb	r2, [r2, #0]
 800a016:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01c:	1c5a      	adds	r2, r3, #1
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a026:	b29b      	uxth	r3, r3
 800a028:	3b01      	subs	r3, #1
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d119      	bne.n	800a076 <HAL_SPI_TransmitReceive+0x2a6>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a046:	b29b      	uxth	r3, r3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d014      	beq.n	800a076 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68da      	ldr	r2, [r3, #12]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a056:	b2d2      	uxtb	r2, r2
 800a058:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a072:	2301      	movs	r3, #1
 800a074:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a076:	f7f9 fb2b 	bl	80036d0 <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a082:	429a      	cmp	r2, r3
 800a084:	d803      	bhi.n	800a08e <HAL_SPI_TransmitReceive+0x2be>
 800a086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08c:	d102      	bne.n	800a094 <HAL_SPI_TransmitReceive+0x2c4>
 800a08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a090:	2b00      	cmp	r3, #0
 800a092:	d109      	bne.n	800a0a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e038      	b.n	800a11a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d19c      	bne.n	8009fec <HAL_SPI_TransmitReceive+0x21c>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d197      	bne.n	8009fec <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a0bc:	6a3a      	ldr	r2, [r7, #32]
 800a0be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 f91d 	bl	800a300 <SPI_EndRxTxTransaction>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d008      	beq.n	800a0de <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e01d      	b.n	800a11a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10a      	bne.n	800a0fc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	613b      	str	r3, [r7, #16]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	613b      	str	r3, [r7, #16]
 800a0fa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e000      	b.n	800a11a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800a118:	2300      	movs	r3, #0
  }
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3728      	adds	r7, #40	@ 0x28
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	603b      	str	r3, [r7, #0]
 800a130:	4613      	mov	r3, r2
 800a132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a134:	f7f9 facc 	bl	80036d0 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13c:	1a9b      	subs	r3, r3, r2
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	4413      	add	r3, r2
 800a142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a144:	f7f9 fac4 	bl	80036d0 <HAL_GetTick>
 800a148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a14a:	4b39      	ldr	r3, [pc, #228]	@ (800a230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	015b      	lsls	r3, r3, #5
 800a150:	0d1b      	lsrs	r3, r3, #20
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	fb02 f303 	mul.w	r3, r2, r3
 800a158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a15a:	e055      	b.n	800a208 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a162:	d051      	beq.n	800a208 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a164:	f7f9 fab4 	bl	80036d0 <HAL_GetTick>
 800a168:	4602      	mov	r2, r0
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	69fa      	ldr	r2, [r7, #28]
 800a170:	429a      	cmp	r2, r3
 800a172:	d902      	bls.n	800a17a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d13d      	bne.n	800a1f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a192:	d111      	bne.n	800a1b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a19c:	d004      	beq.n	800a1a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1a6:	d107      	bne.n	800a1b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1c0:	d10f      	bne.n	800a1e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a1e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e018      	b.n	800a228 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d102      	bne.n	800a202 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	61fb      	str	r3, [r7, #28]
 800a200:	e002      	b.n	800a208 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	3b01      	subs	r3, #1
 800a206:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	4013      	ands	r3, r2
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	429a      	cmp	r2, r3
 800a216:	bf0c      	ite	eq
 800a218:	2301      	moveq	r3, #1
 800a21a:	2300      	movne	r3, #0
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	461a      	mov	r2, r3
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	429a      	cmp	r2, r3
 800a224:	d19a      	bne.n	800a15c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3720      	adds	r7, #32
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20000004 	.word	0x20000004

0800a234 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af02      	add	r7, sp, #8
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a248:	d111      	bne.n	800a26e <SPI_EndRxTransaction+0x3a>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a252:	d004      	beq.n	800a25e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a25c:	d107      	bne.n	800a26e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a26c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a276:	d12a      	bne.n	800a2ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a280:	d012      	beq.n	800a2a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2200      	movs	r2, #0
 800a28a:	2180      	movs	r1, #128	@ 0x80
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f7ff ff49 	bl	800a124 <SPI_WaitFlagStateUntilTimeout>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d02d      	beq.n	800a2f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a29c:	f043 0220 	orr.w	r2, r3, #32
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e026      	b.n	800a2f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f7ff ff36 	bl	800a124 <SPI_WaitFlagStateUntilTimeout>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d01a      	beq.n	800a2f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2c2:	f043 0220 	orr.w	r2, r3, #32
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e013      	b.n	800a2f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f7ff ff23 	bl	800a124 <SPI_WaitFlagStateUntilTimeout>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d007      	beq.n	800a2f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2e8:	f043 0220 	orr.w	r2, r3, #32
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e000      	b.n	800a2f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af02      	add	r7, sp, #8
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2201      	movs	r2, #1
 800a314:	2102      	movs	r1, #2
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7ff ff04 	bl	800a124 <SPI_WaitFlagStateUntilTimeout>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d007      	beq.n	800a332 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a326:	f043 0220 	orr.w	r2, r3, #32
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e032      	b.n	800a398 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a332:	4b1b      	ldr	r3, [pc, #108]	@ (800a3a0 <SPI_EndRxTxTransaction+0xa0>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a1b      	ldr	r2, [pc, #108]	@ (800a3a4 <SPI_EndRxTxTransaction+0xa4>)
 800a338:	fba2 2303 	umull	r2, r3, r2, r3
 800a33c:	0d5b      	lsrs	r3, r3, #21
 800a33e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a342:	fb02 f303 	mul.w	r3, r2, r3
 800a346:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a350:	d112      	bne.n	800a378 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	2200      	movs	r2, #0
 800a35a:	2180      	movs	r1, #128	@ 0x80
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff fee1 	bl	800a124 <SPI_WaitFlagStateUntilTimeout>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d016      	beq.n	800a396 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a36c:	f043 0220 	orr.w	r2, r3, #32
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e00f      	b.n	800a398 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00a      	beq.n	800a394 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	3b01      	subs	r3, #1
 800a382:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a38e:	2b80      	cmp	r3, #128	@ 0x80
 800a390:	d0f2      	beq.n	800a378 <SPI_EndRxTxTransaction+0x78>
 800a392:	e000      	b.n	800a396 <SPI_EndRxTxTransaction+0x96>
        break;
 800a394:	bf00      	nop
  }

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	20000004 	.word	0x20000004
 800a3a4:	165e9f81 	.word	0x165e9f81

0800a3a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	b480      	push	{r7}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	f107 001c 	add.w	r0, r7, #28
 800a3b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a3be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a3c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a3c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a3ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a3ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a3d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a3e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	b004      	add	sp, #16
 800a3fc:	4770      	bx	lr

0800a3fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b083      	sub	sp, #12
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2203      	movs	r2, #3
 800a446:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	370c      	adds	r7, #12
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0303 	and.w	r3, r3, #3
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a472:	b480      	push	{r7}
 800a474:	b085      	sub	sp, #20
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a490:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a496:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a49c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a4ac:	f023 030f 	bic.w	r3, r3, #15
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	b2db      	uxtb	r3, r3
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3314      	adds	r3, #20
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
}  
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a506:	b480      	push	{r7}
 800a508:	b085      	sub	sp, #20
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a52c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a532:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a538:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a544:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	431a      	orrs	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a550:	2300      	movs	r3, #0

}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b088      	sub	sp, #32
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a56c:	2310      	movs	r3, #16
 800a56e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a570:	2340      	movs	r3, #64	@ 0x40
 800a572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a574:	2300      	movs	r3, #0
 800a576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a57c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a57e:	f107 0308 	add.w	r3, r7, #8
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff ff74 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a58a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a58e:	2110      	movs	r1, #16
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f9d7 	bl	800a944 <SDMMC_GetCmdResp1>
 800a596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a598:	69fb      	ldr	r3, [r7, #28]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3720      	adds	r7, #32
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b088      	sub	sp, #32
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a5b0:	2311      	movs	r3, #17
 800a5b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5b4:	2340      	movs	r3, #64	@ 0x40
 800a5b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5c2:	f107 0308 	add.w	r3, r7, #8
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ff52 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a5ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5d2:	2111      	movs	r1, #17
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f9b5 	bl	800a944 <SDMMC_GetCmdResp1>
 800a5da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5dc:	69fb      	ldr	r3, [r7, #28]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3720      	adds	r7, #32
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b088      	sub	sp, #32
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a5f4:	2312      	movs	r3, #18
 800a5f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5f8:	2340      	movs	r3, #64	@ 0x40
 800a5fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a604:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a606:	f107 0308 	add.w	r3, r7, #8
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7ff ff30 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a612:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a616:	2112      	movs	r1, #18
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f993 	bl	800a944 <SDMMC_GetCmdResp1>
 800a61e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a620:	69fb      	ldr	r3, [r7, #28]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3720      	adds	r7, #32
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b088      	sub	sp, #32
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a638:	2318      	movs	r3, #24
 800a63a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a63c:	2340      	movs	r3, #64	@ 0x40
 800a63e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a648:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a64a:	f107 0308 	add.w	r3, r7, #8
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7ff ff0e 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a65a:	2118      	movs	r1, #24
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f971 	bl	800a944 <SDMMC_GetCmdResp1>
 800a662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a664:	69fb      	ldr	r3, [r7, #28]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3720      	adds	r7, #32
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b088      	sub	sp, #32
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a67c:	2319      	movs	r3, #25
 800a67e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a680:	2340      	movs	r3, #64	@ 0x40
 800a682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a684:	2300      	movs	r3, #0
 800a686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a688:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a68c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a68e:	f107 0308 	add.w	r3, r7, #8
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff feec 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a69a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a69e:	2119      	movs	r1, #25
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f94f 	bl	800a944 <SDMMC_GetCmdResp1>
 800a6a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6a8:	69fb      	ldr	r3, [r7, #28]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3720      	adds	r7, #32
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a6c0:	230c      	movs	r3, #12
 800a6c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6c4:	2340      	movs	r3, #64	@ 0x40
 800a6c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6d2:	f107 0308 	add.w	r3, r7, #8
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff feca 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a6de:	4a05      	ldr	r2, [pc, #20]	@ (800a6f4 <SDMMC_CmdStopTransfer+0x40>)
 800a6e0:	210c      	movs	r1, #12
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f92e 	bl	800a944 <SDMMC_GetCmdResp1>
 800a6e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3720      	adds	r7, #32
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	05f5e100 	.word	0x05f5e100

0800a6f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08a      	sub	sp, #40	@ 0x28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a708:	2307      	movs	r3, #7
 800a70a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a70c:	2340      	movs	r3, #64	@ 0x40
 800a70e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a710:	2300      	movs	r3, #0
 800a712:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a718:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a71a:	f107 0310 	add.w	r3, r7, #16
 800a71e:	4619      	mov	r1, r3
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f7ff fea6 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a72a:	2107      	movs	r1, #7
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f000 f909 	bl	800a944 <SDMMC_GetCmdResp1>
 800a732:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a736:	4618      	mov	r0, r3
 800a738:	3728      	adds	r7, #40	@ 0x28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b088      	sub	sp, #32
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a74a:	2300      	movs	r3, #0
 800a74c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a74e:	2300      	movs	r3, #0
 800a750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a752:	2300      	movs	r3, #0
 800a754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a75a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a75c:	f107 0308 	add.w	r3, r7, #8
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7ff fe85 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fb23 	bl	800adb4 <SDMMC_GetCmdError>
 800a76e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a770:	69fb      	ldr	r3, [r7, #28]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3720      	adds	r7, #32
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b088      	sub	sp, #32
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a782:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a788:	2308      	movs	r3, #8
 800a78a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a78c:	2340      	movs	r3, #64	@ 0x40
 800a78e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a790:	2300      	movs	r3, #0
 800a792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a794:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a798:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a79a:	f107 0308 	add.w	r3, r7, #8
 800a79e:	4619      	mov	r1, r3
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff fe66 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fab6 	bl	800ad18 <SDMMC_GetCmdResp7>
 800a7ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ae:	69fb      	ldr	r3, [r7, #28]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3720      	adds	r7, #32
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a7c6:	2337      	movs	r3, #55	@ 0x37
 800a7c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7ca:	2340      	movs	r3, #64	@ 0x40
 800a7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7d8:	f107 0308 	add.w	r3, r7, #8
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fe47 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a7e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7e8:	2137      	movs	r1, #55	@ 0x37
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f8aa 	bl	800a944 <SDMMC_GetCmdResp1>
 800a7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7f2:	69fb      	ldr	r3, [r7, #28]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3720      	adds	r7, #32
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a80c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a812:	2329      	movs	r3, #41	@ 0x29
 800a814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a816:	2340      	movs	r3, #64	@ 0x40
 800a818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a81e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a822:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a824:	f107 0308 	add.w	r3, r7, #8
 800a828:	4619      	mov	r1, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f7ff fe21 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f9bd 	bl	800abb0 <SDMMC_GetCmdResp3>
 800a836:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a838:	69fb      	ldr	r3, [r7, #28]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3720      	adds	r7, #32
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b088      	sub	sp, #32
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a84e:	2302      	movs	r3, #2
 800a850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a852:	23c0      	movs	r3, #192	@ 0xc0
 800a854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a856:	2300      	movs	r3, #0
 800a858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a85a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a85e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a860:	f107 0308 	add.w	r3, r7, #8
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff fe03 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f957 	bl	800ab20 <SDMMC_GetCmdResp2>
 800a872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a874:	69fb      	ldr	r3, [r7, #28]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3720      	adds	r7, #32
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b088      	sub	sp, #32
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a88c:	2309      	movs	r3, #9
 800a88e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a890:	23c0      	movs	r3, #192	@ 0xc0
 800a892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a894:	2300      	movs	r3, #0
 800a896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a89c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a89e:	f107 0308 	add.w	r3, r7, #8
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff fde4 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f938 	bl	800ab20 <SDMMC_GetCmdResp2>
 800a8b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3720      	adds	r7, #32
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8ce:	2340      	movs	r3, #64	@ 0x40
 800a8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8dc:	f107 0308 	add.w	r3, r7, #8
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff fdc5 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	2103      	movs	r1, #3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f99d 	bl	800ac2c <SDMMC_GetCmdResp6>
 800a8f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8f4:	69fb      	ldr	r3, [r7, #28]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3720      	adds	r7, #32
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b088      	sub	sp, #32
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a90c:	230d      	movs	r3, #13
 800a90e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a910:	2340      	movs	r3, #64	@ 0x40
 800a912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a914:	2300      	movs	r3, #0
 800a916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a91c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a91e:	f107 0308 	add.w	r3, r7, #8
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7ff fda4 	bl	800a472 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a92a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a92e:	210d      	movs	r1, #13
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f807 	bl	800a944 <SDMMC_GetCmdResp1>
 800a936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a938:	69fb      	ldr	r3, [r7, #28]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3720      	adds	r7, #32
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	460b      	mov	r3, r1
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a952:	4b70      	ldr	r3, [pc, #448]	@ (800ab14 <SDMMC_GetCmdResp1+0x1d0>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a70      	ldr	r2, [pc, #448]	@ (800ab18 <SDMMC_GetCmdResp1+0x1d4>)
 800a958:	fba2 2303 	umull	r2, r3, r2, r3
 800a95c:	0a5a      	lsrs	r2, r3, #9
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	fb02 f303 	mul.w	r3, r2, r3
 800a964:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	1e5a      	subs	r2, r3, #1
 800a96a:	61fa      	str	r2, [r7, #28]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a970:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a974:	e0c9      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a97a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0ef      	beq.n	800a966 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1ea      	bne.n	800a966 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a994:	f003 0304 	and.w	r3, r3, #4
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2204      	movs	r2, #4
 800a9a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9a2:	2304      	movs	r3, #4
 800a9a4:	e0b1      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d004      	beq.n	800a9bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e0a6      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	22c5      	movs	r2, #197	@ 0xc5
 800a9c0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7ff fd7f 	bl	800a4c6 <SDIO_GetCommandResponse>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	7afb      	ldrb	r3, [r7, #11]
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d001      	beq.n	800a9d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e099      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f7ff fd81 	bl	800a4e0 <SDIO_GetResponse>
 800a9de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	4b4e      	ldr	r3, [pc, #312]	@ (800ab1c <SDMMC_GetCmdResp1+0x1d8>)
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e08d      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	da02      	bge.n	800a9fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a9f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a9f8:	e087      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aa04:	2340      	movs	r3, #64	@ 0x40
 800aa06:	e080      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aa12:	2380      	movs	r3, #128	@ 0x80
 800aa14:	e079      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aa20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa24:	e071      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aa30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa34:	e069      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aa40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa44:	e061      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aa50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa54:	e059      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa64:	e051      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aa74:	e049      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aa80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aa84:	e041      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aa90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa94:	e039      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aaa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800aaa4:	e031      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aab0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800aab4:	e029      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aac0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aac4:	e021      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aad0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800aad4:	e019      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aae0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800aae4:	e011      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aaf0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800aaf4:	e009      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f003 0308 	and.w	r3, r3, #8
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ab00:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ab04:	e001      	b.n	800ab0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3720      	adds	r7, #32
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20000004 	.word	0x20000004
 800ab18:	10624dd3 	.word	0x10624dd3
 800ab1c:	fdffe008 	.word	0xfdffe008

0800ab20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab28:	4b1f      	ldr	r3, [pc, #124]	@ (800aba8 <SDMMC_GetCmdResp2+0x88>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a1f      	ldr	r2, [pc, #124]	@ (800abac <SDMMC_GetCmdResp2+0x8c>)
 800ab2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab32:	0a5b      	lsrs	r3, r3, #9
 800ab34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab38:	fb02 f303 	mul.w	r3, r2, r3
 800ab3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	1e5a      	subs	r2, r3, #1
 800ab42:	60fa      	str	r2, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d102      	bne.n	800ab4e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab4c:	e026      	b.n	800ab9c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0ef      	beq.n	800ab3e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1ea      	bne.n	800ab3e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d004      	beq.n	800ab7e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2204      	movs	r2, #4
 800ab78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab7a:	2304      	movs	r3, #4
 800ab7c:	e00e      	b.n	800ab9c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d004      	beq.n	800ab94 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e003      	b.n	800ab9c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	22c5      	movs	r2, #197	@ 0xc5
 800ab98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	20000004 	.word	0x20000004
 800abac:	10624dd3 	.word	0x10624dd3

0800abb0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abb8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac24 <SDMMC_GetCmdResp3+0x74>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a1a      	ldr	r2, [pc, #104]	@ (800ac28 <SDMMC_GetCmdResp3+0x78>)
 800abbe:	fba2 2303 	umull	r2, r3, r2, r3
 800abc2:	0a5b      	lsrs	r3, r3, #9
 800abc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abc8:	fb02 f303 	mul.w	r3, r2, r3
 800abcc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	1e5a      	subs	r2, r3, #1
 800abd2:	60fa      	str	r2, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abdc:	e01b      	b.n	800ac16 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0ef      	beq.n	800abce <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1ea      	bne.n	800abce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2204      	movs	r2, #4
 800ac08:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac0a:	2304      	movs	r3, #4
 800ac0c:	e003      	b.n	800ac16 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	22c5      	movs	r2, #197	@ 0xc5
 800ac12:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20000004 	.word	0x20000004
 800ac28:	10624dd3 	.word	0x10624dd3

0800ac2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	460b      	mov	r3, r1
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac3a:	4b35      	ldr	r3, [pc, #212]	@ (800ad10 <SDMMC_GetCmdResp6+0xe4>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a35      	ldr	r2, [pc, #212]	@ (800ad14 <SDMMC_GetCmdResp6+0xe8>)
 800ac40:	fba2 2303 	umull	r2, r3, r2, r3
 800ac44:	0a5b      	lsrs	r3, r3, #9
 800ac46:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac4a:	fb02 f303 	mul.w	r3, r2, r3
 800ac4e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	1e5a      	subs	r2, r3, #1
 800ac54:	61fa      	str	r2, [r7, #28]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d102      	bne.n	800ac60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac5a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac5e:	e052      	b.n	800ad06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac64:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d0ef      	beq.n	800ac50 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1ea      	bne.n	800ac50 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7e:	f003 0304 	and.w	r3, r3, #4
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2204      	movs	r2, #4
 800ac8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	e03a      	b.n	800ad06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e02f      	b.n	800ad06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff fc0d 	bl	800a4c6 <SDIO_GetCommandResponse>
 800acac:	4603      	mov	r3, r0
 800acae:	461a      	mov	r2, r3
 800acb0:	7afb      	ldrb	r3, [r7, #11]
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d001      	beq.n	800acba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e025      	b.n	800ad06 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	22c5      	movs	r2, #197	@ 0xc5
 800acbe:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800acc0:	2100      	movs	r1, #0
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7ff fc0c 	bl	800a4e0 <SDIO_GetResponse>
 800acc8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d106      	bne.n	800ace2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	0c1b      	lsrs	r3, r3, #16
 800acd8:	b29a      	uxth	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800acde:	2300      	movs	r3, #0
 800ace0:	e011      	b.n	800ad06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800acec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800acf0:	e009      	b.n	800ad06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800acfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad00:	e001      	b.n	800ad06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000004 	.word	0x20000004
 800ad14:	10624dd3 	.word	0x10624dd3

0800ad18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad20:	4b22      	ldr	r3, [pc, #136]	@ (800adac <SDMMC_GetCmdResp7+0x94>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a22      	ldr	r2, [pc, #136]	@ (800adb0 <SDMMC_GetCmdResp7+0x98>)
 800ad26:	fba2 2303 	umull	r2, r3, r2, r3
 800ad2a:	0a5b      	lsrs	r3, r3, #9
 800ad2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad30:	fb02 f303 	mul.w	r3, r2, r3
 800ad34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	1e5a      	subs	r2, r3, #1
 800ad3a:	60fa      	str	r2, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d102      	bne.n	800ad46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad44:	e02c      	b.n	800ada0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0ef      	beq.n	800ad36 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1ea      	bne.n	800ad36 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad64:	f003 0304 	and.w	r3, r3, #4
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d004      	beq.n	800ad76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2204      	movs	r2, #4
 800ad70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad72:	2304      	movs	r3, #4
 800ad74:	e014      	b.n	800ada0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d004      	beq.n	800ad8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e009      	b.n	800ada0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2240      	movs	r2, #64	@ 0x40
 800ad9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ad9e:	2300      	movs	r3, #0
  
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	20000004 	.word	0x20000004
 800adb0:	10624dd3 	.word	0x10624dd3

0800adb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adbc:	4b11      	ldr	r3, [pc, #68]	@ (800ae04 <SDMMC_GetCmdError+0x50>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a11      	ldr	r2, [pc, #68]	@ (800ae08 <SDMMC_GetCmdError+0x54>)
 800adc2:	fba2 2303 	umull	r2, r3, r2, r3
 800adc6:	0a5b      	lsrs	r3, r3, #9
 800adc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adcc:	fb02 f303 	mul.w	r3, r2, r3
 800add0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	1e5a      	subs	r2, r3, #1
 800add6:	60fa      	str	r2, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800addc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ade0:	e009      	b.n	800adf6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ade6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adea:	2b00      	cmp	r3, #0
 800adec:	d0f1      	beq.n	800add2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	22c5      	movs	r2, #197	@ 0xc5
 800adf2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3714      	adds	r7, #20
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	20000004 	.word	0x20000004
 800ae08:	10624dd3 	.word	0x10624dd3

0800ae0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ae10:	4904      	ldr	r1, [pc, #16]	@ (800ae24 <MX_FATFS_Init+0x18>)
 800ae12:	4805      	ldr	r0, [pc, #20]	@ (800ae28 <MX_FATFS_Init+0x1c>)
 800ae14:	f002 fcac 	bl	800d770 <FATFS_LinkDriver>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	4b03      	ldr	r3, [pc, #12]	@ (800ae2c <MX_FATFS_Init+0x20>)
 800ae1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae20:	bf00      	nop
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	20000724 	.word	0x20000724
 800ae28:	0800e498 	.word	0x0800e498
 800ae2c:	20000720 	.word	0x20000720

0800ae30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ae34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ae4a:	f000 f89e 	bl	800af8a <BSP_SD_IsDetected>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d001      	beq.n	800ae58 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e005      	b.n	800ae64 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ae58:	4804      	ldr	r0, [pc, #16]	@ (800ae6c <BSP_SD_Init+0x2c>)
 800ae5a:	f7fd fa9f 	bl	800839c <HAL_SD_Init>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ae62:	79fb      	ldrb	r3, [r7, #7]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	20000600 	.word	0x20000600

0800ae70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af02      	add	r7, sp, #8
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	4806      	ldr	r0, [pc, #24]	@ (800aea8 <BSP_SD_ReadBlocks+0x38>)
 800ae8e:	f7fd fb2d 	bl	80084ec <HAL_SD_ReadBlocks>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3718      	adds	r7, #24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20000600 	.word	0x20000600

0800aeac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	4806      	ldr	r0, [pc, #24]	@ (800aee4 <BSP_SD_WriteBlocks+0x38>)
 800aeca:	f7fd fcf5 	bl	80088b8 <HAL_SD_WriteBlocks>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3718      	adds	r7, #24
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	20000600 	.word	0x20000600

0800aee8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aeec:	4805      	ldr	r0, [pc, #20]	@ (800af04 <BSP_SD_GetCardState+0x1c>)
 800aeee:	f7fe f9d1 	bl	8009294 <HAL_SD_GetCardState>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	bf14      	ite	ne
 800aef8:	2301      	movne	r3, #1
 800aefa:	2300      	moveq	r3, #0
 800aefc:	b2db      	uxtb	r3, r3
}
 800aefe:	4618      	mov	r0, r3
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	20000600 	.word	0x20000600

0800af08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4803      	ldr	r0, [pc, #12]	@ (800af20 <BSP_SD_GetCardInfo+0x18>)
 800af14:	f7fe f992 	bl	800923c <HAL_SD_GetCardInfo>
}
 800af18:	bf00      	nop
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	20000600 	.word	0x20000600

0800af24 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800af2c:	f000 f818 	bl	800af60 <BSP_SD_AbortCallback>
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800af40:	f000 f815 	bl	800af6e <BSP_SD_WriteCpltCallback>
}
 800af44:	bf00      	nop
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800af54:	f000 f812 	bl	800af7c <BSP_SD_ReadCpltCallback>
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800af60:	b480      	push	{r7}
 800af62:	af00      	add	r7, sp, #0

}
 800af64:	bf00      	nop
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800af6e:	b480      	push	{r7}
 800af70:	af00      	add	r7, sp, #0

}
 800af72:	bf00      	nop
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0

}
 800af80:	bf00      	nop
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800af90:	2301      	movs	r3, #1
 800af92:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800af94:	f000 f80c 	bl	800afb0 <BSP_PlatformIsDetected>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800af9e:	2300      	movs	r3, #0
 800afa0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800afa2:	79fb      	ldrb	r3, [r7, #7]
 800afa4:	b2db      	uxtb	r3, r3
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800afb6:	2301      	movs	r3, #1
 800afb8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800afba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800afbe:	4806      	ldr	r0, [pc, #24]	@ (800afd8 <BSP_PlatformIsDetected+0x28>)
 800afc0:	f7fa f92c 	bl	800521c <HAL_GPIO_ReadPin>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800afca:	2300      	movs	r3, #0
 800afcc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800afce:	79fb      	ldrb	r3, [r7, #7]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	40020800 	.word	0x40020800

0800afdc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800afe6:	4b0b      	ldr	r3, [pc, #44]	@ (800b014 <SD_CheckStatus+0x38>)
 800afe8:	2201      	movs	r2, #1
 800afea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800afec:	f7ff ff7c 	bl	800aee8 <BSP_SD_GetCardState>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d107      	bne.n	800b006 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800aff6:	4b07      	ldr	r3, [pc, #28]	@ (800b014 <SD_CheckStatus+0x38>)
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	b2db      	uxtb	r3, r3
 800affc:	f023 0301 	bic.w	r3, r3, #1
 800b000:	b2da      	uxtb	r2, r3
 800b002:	4b04      	ldr	r3, [pc, #16]	@ (800b014 <SD_CheckStatus+0x38>)
 800b004:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b006:	4b03      	ldr	r3, [pc, #12]	@ (800b014 <SD_CheckStatus+0x38>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	b2db      	uxtb	r3, r3
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	2000000d 	.word	0x2000000d

0800b018 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b022:	4b0b      	ldr	r3, [pc, #44]	@ (800b050 <SD_initialize+0x38>)
 800b024:	2201      	movs	r2, #1
 800b026:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b028:	f7ff ff0a 	bl	800ae40 <BSP_SD_Init>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d107      	bne.n	800b042 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff ffd1 	bl	800afdc <SD_CheckStatus>
 800b03a:	4603      	mov	r3, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b04      	ldr	r3, [pc, #16]	@ (800b050 <SD_initialize+0x38>)
 800b040:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b042:	4b03      	ldr	r3, [pc, #12]	@ (800b050 <SD_initialize+0x38>)
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	b2db      	uxtb	r3, r3
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	2000000d 	.word	0x2000000d

0800b054 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff ffbb 	bl	800afdc <SD_CheckStatus>
 800b066:	4603      	mov	r3, r0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	607a      	str	r2, [r7, #4]
 800b07a:	603b      	str	r3, [r7, #0]
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b084:	f04f 33ff 	mov.w	r3, #4294967295
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	6879      	ldr	r1, [r7, #4]
 800b08c:	68b8      	ldr	r0, [r7, #8]
 800b08e:	f7ff feef 	bl	800ae70 <BSP_SD_ReadBlocks>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d107      	bne.n	800b0a8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b098:	bf00      	nop
 800b09a:	f7ff ff25 	bl	800aee8 <BSP_SD_GetCardState>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1fa      	bne.n	800b09a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b086      	sub	sp, #24
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	603b      	str	r3, [r7, #0]
 800b0be:	4603      	mov	r3, r0
 800b0c0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	6879      	ldr	r1, [r7, #4]
 800b0ce:	68b8      	ldr	r0, [r7, #8]
 800b0d0:	f7ff feec 	bl	800aeac <BSP_SD_WriteBlocks>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d107      	bne.n	800b0ea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b0da:	bf00      	nop
 800b0dc:	f7ff ff04 	bl	800aee8 <BSP_SD_GetCardState>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1fa      	bne.n	800b0dc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b08c      	sub	sp, #48	@ 0x30
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	603a      	str	r2, [r7, #0]
 800b0fe:	71fb      	strb	r3, [r7, #7]
 800b100:	460b      	mov	r3, r1
 800b102:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b10a:	4b25      	ldr	r3, [pc, #148]	@ (800b1a0 <SD_ioctl+0xac>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <SD_ioctl+0x28>
 800b118:	2303      	movs	r3, #3
 800b11a:	e03c      	b.n	800b196 <SD_ioctl+0xa2>

  switch (cmd)
 800b11c:	79bb      	ldrb	r3, [r7, #6]
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d834      	bhi.n	800b18c <SD_ioctl+0x98>
 800b122:	a201      	add	r2, pc, #4	@ (adr r2, 800b128 <SD_ioctl+0x34>)
 800b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b128:	0800b139 	.word	0x0800b139
 800b12c:	0800b141 	.word	0x0800b141
 800b130:	0800b159 	.word	0x0800b159
 800b134:	0800b173 	.word	0x0800b173
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b13e:	e028      	b.n	800b192 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b140:	f107 030c 	add.w	r3, r7, #12
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff fedf 	bl	800af08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b14a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b156:	e01c      	b.n	800b192 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b158:	f107 030c 	add.w	r3, r7, #12
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff fed3 	bl	800af08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b164:	b29a      	uxth	r2, r3
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b170:	e00f      	b.n	800b192 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b172:	f107 030c 	add.w	r3, r7, #12
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fec6 	bl	800af08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17e:	0a5a      	lsrs	r2, r3, #9
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b18a:	e002      	b.n	800b192 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b18c:	2304      	movs	r3, #4
 800b18e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b196:	4618      	mov	r0, r3
 800b198:	3730      	adds	r7, #48	@ 0x30
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	2000000d 	.word	0x2000000d

0800b1a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
 800b1b0:	4a08      	ldr	r2, [pc, #32]	@ (800b1d4 <disk_status+0x30>)
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	79fa      	ldrb	r2, [r7, #7]
 800b1bc:	4905      	ldr	r1, [pc, #20]	@ (800b1d4 <disk_status+0x30>)
 800b1be:	440a      	add	r2, r1
 800b1c0:	7a12      	ldrb	r2, [r2, #8]
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	4798      	blx	r3
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	20000324 	.word	0x20000324

0800b1d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b1e6:	79fb      	ldrb	r3, [r7, #7]
 800b1e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b224 <disk_initialize+0x4c>)
 800b1ea:	5cd3      	ldrb	r3, [r2, r3]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d114      	bne.n	800b21a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b1f0:	79fb      	ldrb	r3, [r7, #7]
 800b1f2:	4a0c      	ldr	r2, [pc, #48]	@ (800b224 <disk_initialize+0x4c>)
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	79fa      	ldrb	r2, [r7, #7]
 800b1fe:	4909      	ldr	r1, [pc, #36]	@ (800b224 <disk_initialize+0x4c>)
 800b200:	440a      	add	r2, r1
 800b202:	7a12      	ldrb	r2, [r2, #8]
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
 800b208:	4603      	mov	r3, r0
 800b20a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d103      	bne.n	800b21a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	4a03      	ldr	r2, [pc, #12]	@ (800b224 <disk_initialize+0x4c>)
 800b216:	2101      	movs	r1, #1
 800b218:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	20000324 	.word	0x20000324

0800b228 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b228:	b590      	push	{r4, r7, lr}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	603b      	str	r3, [r7, #0]
 800b234:	4603      	mov	r3, r0
 800b236:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	4a0a      	ldr	r2, [pc, #40]	@ (800b264 <disk_read+0x3c>)
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	689c      	ldr	r4, [r3, #8]
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	4a07      	ldr	r2, [pc, #28]	@ (800b264 <disk_read+0x3c>)
 800b248:	4413      	add	r3, r2
 800b24a:	7a18      	ldrb	r0, [r3, #8]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	68b9      	ldr	r1, [r7, #8]
 800b252:	47a0      	blx	r4
 800b254:	4603      	mov	r3, r0
 800b256:	75fb      	strb	r3, [r7, #23]
  return res;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd90      	pop	{r4, r7, pc}
 800b262:	bf00      	nop
 800b264:	20000324 	.word	0x20000324

0800b268 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b268:	b590      	push	{r4, r7, lr}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	607a      	str	r2, [r7, #4]
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b278:	7bfb      	ldrb	r3, [r7, #15]
 800b27a:	4a0a      	ldr	r2, [pc, #40]	@ (800b2a4 <disk_write+0x3c>)
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68dc      	ldr	r4, [r3, #12]
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	4a07      	ldr	r2, [pc, #28]	@ (800b2a4 <disk_write+0x3c>)
 800b288:	4413      	add	r3, r2
 800b28a:	7a18      	ldrb	r0, [r3, #8]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	47a0      	blx	r4
 800b294:	4603      	mov	r3, r0
 800b296:	75fb      	strb	r3, [r7, #23]
  return res;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	371c      	adds	r7, #28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd90      	pop	{r4, r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000324 	.word	0x20000324

0800b2a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	603a      	str	r2, [r7, #0]
 800b2b2:	71fb      	strb	r3, [r7, #7]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b2b8:	79fb      	ldrb	r3, [r7, #7]
 800b2ba:	4a09      	ldr	r2, [pc, #36]	@ (800b2e0 <disk_ioctl+0x38>)
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	79fa      	ldrb	r2, [r7, #7]
 800b2c6:	4906      	ldr	r1, [pc, #24]	@ (800b2e0 <disk_ioctl+0x38>)
 800b2c8:	440a      	add	r2, r1
 800b2ca:	7a10      	ldrb	r0, [r2, #8]
 800b2cc:	79b9      	ldrb	r1, [r7, #6]
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	4798      	blx	r3
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  return res;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	20000324 	.word	0x20000324

0800b2e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b2f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b2f8:	021b      	lsls	r3, r3, #8
 800b2fa:	b21a      	sxth	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	b21b      	sxth	r3, r3
 800b302:	4313      	orrs	r3, r2
 800b304:	b21b      	sxth	r3, r3
 800b306:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b308:	89fb      	ldrh	r3, [r7, #14]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3303      	adds	r3, #3
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	021b      	lsls	r3, r3, #8
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	3202      	adds	r2, #2
 800b32e:	7812      	ldrb	r2, [r2, #0]
 800b330:	4313      	orrs	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	021b      	lsls	r3, r3, #8
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	3201      	adds	r2, #1
 800b33c:	7812      	ldrb	r2, [r2, #0]
 800b33e:	4313      	orrs	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	021b      	lsls	r3, r3, #8
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	7812      	ldrb	r2, [r2, #0]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]
	return rv;
 800b34e:	68fb      	ldr	r3, [r7, #12]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	607a      	str	r2, [r7, #4]
 800b36e:	887a      	ldrh	r2, [r7, #2]
 800b370:	b2d2      	uxtb	r2, r2
 800b372:	701a      	strb	r2, [r3, #0]
 800b374:	887b      	ldrh	r3, [r7, #2]
 800b376:	0a1b      	lsrs	r3, r3, #8
 800b378:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	607a      	str	r2, [r7, #4]
 800b380:	887a      	ldrh	r2, [r7, #2]
 800b382:	b2d2      	uxtb	r2, r2
 800b384:	701a      	strb	r2, [r3, #0]
}
 800b386:	bf00      	nop
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b392:	b480      	push	{r7}
 800b394:	b083      	sub	sp, #12
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	1c5a      	adds	r2, r3, #1
 800b3a0:	607a      	str	r2, [r7, #4]
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	b2d2      	uxtb	r2, r2
 800b3a6:	701a      	strb	r2, [r3, #0]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	0a1b      	lsrs	r3, r3, #8
 800b3ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	607a      	str	r2, [r7, #4]
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	b2d2      	uxtb	r2, r2
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	0a1b      	lsrs	r3, r3, #8
 800b3be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	607a      	str	r2, [r7, #4]
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	b2d2      	uxtb	r2, r2
 800b3ca:	701a      	strb	r2, [r3, #0]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	0a1b      	lsrs	r3, r3, #8
 800b3d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	1c5a      	adds	r2, r3, #1
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	b2d2      	uxtb	r2, r2
 800b3dc:	701a      	strb	r2, [r3, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b3ea:	b480      	push	{r7}
 800b3ec:	b087      	sub	sp, #28
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	60f8      	str	r0, [r7, #12]
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00d      	beq.n	800b420 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	1c53      	adds	r3, r2, #1
 800b408:	613b      	str	r3, [r7, #16]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	1c59      	adds	r1, r3, #1
 800b40e:	6179      	str	r1, [r7, #20]
 800b410:	7812      	ldrb	r2, [r2, #0]
 800b412:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3b01      	subs	r3, #1
 800b418:	607b      	str	r3, [r7, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1f1      	bne.n	800b404 <mem_cpy+0x1a>
	}
}
 800b420:	bf00      	nop
 800b422:	371c      	adds	r7, #28
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b42c:	b480      	push	{r7}
 800b42e:	b087      	sub	sp, #28
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	617a      	str	r2, [r7, #20]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	b2d2      	uxtb	r2, r2
 800b446:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	607b      	str	r3, [r7, #4]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1f3      	bne.n	800b43c <mem_set+0x10>
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	371c      	adds	r7, #28
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b462:	b480      	push	{r7}
 800b464:	b089      	sub	sp, #36	@ 0x24
 800b466:	af00      	add	r7, sp, #0
 800b468:	60f8      	str	r0, [r7, #12]
 800b46a:	60b9      	str	r1, [r7, #8]
 800b46c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	61fb      	str	r3, [r7, #28]
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	61fa      	str	r2, [r7, #28]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	4619      	mov	r1, r3
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	1c5a      	adds	r2, r3, #1
 800b488:	61ba      	str	r2, [r7, #24]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	1acb      	subs	r3, r1, r3
 800b48e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3b01      	subs	r3, #1
 800b494:	607b      	str	r3, [r7, #4]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <mem_cmp+0x40>
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d0eb      	beq.n	800b47a <mem_cmp+0x18>

	return r;
 800b4a2:	697b      	ldr	r3, [r7, #20]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3724      	adds	r7, #36	@ 0x24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b4ba:	e002      	b.n	800b4c2 <chk_chr+0x12>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	607b      	str	r3, [r7, #4]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d005      	beq.n	800b4d6 <chk_chr+0x26>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d1f2      	bne.n	800b4bc <chk_chr+0xc>
	return *str;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
	...

0800b4e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60bb      	str	r3, [r7, #8]
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	e029      	b.n	800b550 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b4fc:	4a27      	ldr	r2, [pc, #156]	@ (800b59c <chk_lock+0xb4>)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	011b      	lsls	r3, r3, #4
 800b502:	4413      	add	r3, r2
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d01d      	beq.n	800b546 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b50a:	4a24      	ldr	r2, [pc, #144]	@ (800b59c <chk_lock+0xb4>)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	011b      	lsls	r3, r3, #4
 800b510:	4413      	add	r3, r2
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d116      	bne.n	800b54a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b51c:	4a1f      	ldr	r2, [pc, #124]	@ (800b59c <chk_lock+0xb4>)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	011b      	lsls	r3, r3, #4
 800b522:	4413      	add	r3, r2
 800b524:	3304      	adds	r3, #4
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d10c      	bne.n	800b54a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b530:	4a1a      	ldr	r2, [pc, #104]	@ (800b59c <chk_lock+0xb4>)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	011b      	lsls	r3, r3, #4
 800b536:	4413      	add	r3, r2
 800b538:	3308      	adds	r3, #8
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b540:	429a      	cmp	r2, r3
 800b542:	d102      	bne.n	800b54a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b544:	e007      	b.n	800b556 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b546:	2301      	movs	r3, #1
 800b548:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3301      	adds	r3, #1
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d9d2      	bls.n	800b4fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d109      	bne.n	800b570 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d102      	bne.n	800b568 <chk_lock+0x80>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d101      	bne.n	800b56c <chk_lock+0x84>
 800b568:	2300      	movs	r3, #0
 800b56a:	e010      	b.n	800b58e <chk_lock+0xa6>
 800b56c:	2312      	movs	r3, #18
 800b56e:	e00e      	b.n	800b58e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d108      	bne.n	800b588 <chk_lock+0xa0>
 800b576:	4a09      	ldr	r2, [pc, #36]	@ (800b59c <chk_lock+0xb4>)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	011b      	lsls	r3, r3, #4
 800b57c:	4413      	add	r3, r2
 800b57e:	330c      	adds	r3, #12
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b586:	d101      	bne.n	800b58c <chk_lock+0xa4>
 800b588:	2310      	movs	r3, #16
 800b58a:	e000      	b.n	800b58e <chk_lock+0xa6>
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20000304 	.word	0x20000304

0800b5a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	607b      	str	r3, [r7, #4]
 800b5aa:	e002      	b.n	800b5b2 <enq_lock+0x12>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	607b      	str	r3, [r7, #4]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d806      	bhi.n	800b5c6 <enq_lock+0x26>
 800b5b8:	4a09      	ldr	r2, [pc, #36]	@ (800b5e0 <enq_lock+0x40>)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	4413      	add	r3, r2
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1f2      	bne.n	800b5ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	bf14      	ite	ne
 800b5cc:	2301      	movne	r3, #1
 800b5ce:	2300      	moveq	r3, #0
 800b5d0:	b2db      	uxtb	r3, r3
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	20000304 	.word	0x20000304

0800b5e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60fb      	str	r3, [r7, #12]
 800b5f2:	e01f      	b.n	800b634 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b5f4:	4a41      	ldr	r2, [pc, #260]	@ (800b6fc <inc_lock+0x118>)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	011b      	lsls	r3, r3, #4
 800b5fa:	4413      	add	r3, r2
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	429a      	cmp	r2, r3
 800b604:	d113      	bne.n	800b62e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b606:	4a3d      	ldr	r2, [pc, #244]	@ (800b6fc <inc_lock+0x118>)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	011b      	lsls	r3, r3, #4
 800b60c:	4413      	add	r3, r2
 800b60e:	3304      	adds	r3, #4
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b616:	429a      	cmp	r2, r3
 800b618:	d109      	bne.n	800b62e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b61a:	4a38      	ldr	r2, [pc, #224]	@ (800b6fc <inc_lock+0x118>)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	011b      	lsls	r3, r3, #4
 800b620:	4413      	add	r3, r2
 800b622:	3308      	adds	r3, #8
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d006      	beq.n	800b63c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3301      	adds	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d9dc      	bls.n	800b5f4 <inc_lock+0x10>
 800b63a:	e000      	b.n	800b63e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b63c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b02      	cmp	r3, #2
 800b642:	d132      	bne.n	800b6aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	e002      	b.n	800b650 <inc_lock+0x6c>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3301      	adds	r3, #1
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d806      	bhi.n	800b664 <inc_lock+0x80>
 800b656:	4a29      	ldr	r2, [pc, #164]	@ (800b6fc <inc_lock+0x118>)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	011b      	lsls	r3, r3, #4
 800b65c:	4413      	add	r3, r2
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1f2      	bne.n	800b64a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2b02      	cmp	r3, #2
 800b668:	d101      	bne.n	800b66e <inc_lock+0x8a>
 800b66a:	2300      	movs	r3, #0
 800b66c:	e040      	b.n	800b6f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4922      	ldr	r1, [pc, #136]	@ (800b6fc <inc_lock+0x118>)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	011b      	lsls	r3, r3, #4
 800b678:	440b      	add	r3, r1
 800b67a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689a      	ldr	r2, [r3, #8]
 800b680:	491e      	ldr	r1, [pc, #120]	@ (800b6fc <inc_lock+0x118>)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	011b      	lsls	r3, r3, #4
 800b686:	440b      	add	r3, r1
 800b688:	3304      	adds	r3, #4
 800b68a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	695a      	ldr	r2, [r3, #20]
 800b690:	491a      	ldr	r1, [pc, #104]	@ (800b6fc <inc_lock+0x118>)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	011b      	lsls	r3, r3, #4
 800b696:	440b      	add	r3, r1
 800b698:	3308      	adds	r3, #8
 800b69a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b69c:	4a17      	ldr	r2, [pc, #92]	@ (800b6fc <inc_lock+0x118>)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	011b      	lsls	r3, r3, #4
 800b6a2:	4413      	add	r3, r2
 800b6a4:	330c      	adds	r3, #12
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d009      	beq.n	800b6c4 <inc_lock+0xe0>
 800b6b0:	4a12      	ldr	r2, [pc, #72]	@ (800b6fc <inc_lock+0x118>)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	011b      	lsls	r3, r3, #4
 800b6b6:	4413      	add	r3, r2
 800b6b8:	330c      	adds	r3, #12
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d001      	beq.n	800b6c4 <inc_lock+0xe0>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e015      	b.n	800b6f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d108      	bne.n	800b6dc <inc_lock+0xf8>
 800b6ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b6fc <inc_lock+0x118>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	4413      	add	r3, r2
 800b6d2:	330c      	adds	r3, #12
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	e001      	b.n	800b6e0 <inc_lock+0xfc>
 800b6dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b6e0:	4906      	ldr	r1, [pc, #24]	@ (800b6fc <inc_lock+0x118>)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	011b      	lsls	r3, r3, #4
 800b6e6:	440b      	add	r3, r1
 800b6e8:	330c      	adds	r3, #12
 800b6ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3301      	adds	r3, #1
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	20000304 	.word	0x20000304

0800b700 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	607b      	str	r3, [r7, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d825      	bhi.n	800b760 <dec_lock+0x60>
		n = Files[i].ctr;
 800b714:	4a17      	ldr	r2, [pc, #92]	@ (800b774 <dec_lock+0x74>)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	011b      	lsls	r3, r3, #4
 800b71a:	4413      	add	r3, r2
 800b71c:	330c      	adds	r3, #12
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b722:	89fb      	ldrh	r3, [r7, #14]
 800b724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b728:	d101      	bne.n	800b72e <dec_lock+0x2e>
 800b72a:	2300      	movs	r3, #0
 800b72c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b72e:	89fb      	ldrh	r3, [r7, #14]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <dec_lock+0x3a>
 800b734:	89fb      	ldrh	r3, [r7, #14]
 800b736:	3b01      	subs	r3, #1
 800b738:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b73a:	4a0e      	ldr	r2, [pc, #56]	@ (800b774 <dec_lock+0x74>)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	4413      	add	r3, r2
 800b742:	330c      	adds	r3, #12
 800b744:	89fa      	ldrh	r2, [r7, #14]
 800b746:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b748:	89fb      	ldrh	r3, [r7, #14]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <dec_lock+0x5a>
 800b74e:	4a09      	ldr	r2, [pc, #36]	@ (800b774 <dec_lock+0x74>)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	011b      	lsls	r3, r3, #4
 800b754:	4413      	add	r3, r2
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b75a:	2300      	movs	r3, #0
 800b75c:	737b      	strb	r3, [r7, #13]
 800b75e:	e001      	b.n	800b764 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b760:	2302      	movs	r3, #2
 800b762:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b764:	7b7b      	ldrb	r3, [r7, #13]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	20000304 	.word	0x20000304

0800b778 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b780:	2300      	movs	r3, #0
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e010      	b.n	800b7a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b786:	4a0d      	ldr	r2, [pc, #52]	@ (800b7bc <clear_lock+0x44>)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	011b      	lsls	r3, r3, #4
 800b78c:	4413      	add	r3, r2
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	429a      	cmp	r2, r3
 800b794:	d105      	bne.n	800b7a2 <clear_lock+0x2a>
 800b796:	4a09      	ldr	r2, [pc, #36]	@ (800b7bc <clear_lock+0x44>)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	011b      	lsls	r3, r3, #4
 800b79c:	4413      	add	r3, r2
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d9eb      	bls.n	800b786 <clear_lock+0xe>
	}
}
 800b7ae:	bf00      	nop
 800b7b0:	bf00      	nop
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	20000304 	.word	0x20000304

0800b7c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	78db      	ldrb	r3, [r3, #3]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d034      	beq.n	800b83e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	7858      	ldrb	r0, [r3, #1]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	f7ff fd3e 	bl	800b268 <disk_write>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	73fb      	strb	r3, [r7, #15]
 800b7f6:	e022      	b.n	800b83e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	1ad2      	subs	r2, r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d217      	bcs.n	800b83e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	789b      	ldrb	r3, [r3, #2]
 800b812:	613b      	str	r3, [r7, #16]
 800b814:	e010      	b.n	800b838 <sync_window+0x78>
					wsect += fs->fsize;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	4413      	add	r3, r2
 800b81e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	7858      	ldrb	r0, [r3, #1]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b82a:	2301      	movs	r3, #1
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	f7ff fd1b 	bl	800b268 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	3b01      	subs	r3, #1
 800b836:	613b      	str	r3, [r7, #16]
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d8eb      	bhi.n	800b816 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d01b      	beq.n	800b898 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff ffad 	bl	800b7c0 <sync_window>
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d113      	bne.n	800b898 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	7858      	ldrb	r0, [r3, #1]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b87a:	2301      	movs	r3, #1
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	f7ff fcd3 	bl	800b228 <disk_read>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d004      	beq.n	800b892 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b888:	f04f 33ff 	mov.w	r3, #4294967295
 800b88c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b88e:	2301      	movs	r3, #1
 800b890:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	683a      	ldr	r2, [r7, #0]
 800b896:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b898:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7ff ff87 	bl	800b7c0 <sync_window>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d158      	bne.n	800b96e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d148      	bne.n	800b956 <sync_fs+0xb2>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	791b      	ldrb	r3, [r3, #4]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d144      	bne.n	800b956 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3330      	adds	r3, #48	@ 0x30
 800b8d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7ff fda8 	bl	800b42c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3330      	adds	r3, #48	@ 0x30
 800b8e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b8e4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff fd37 	bl	800b35c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3330      	adds	r3, #48	@ 0x30
 800b8f2:	4921      	ldr	r1, [pc, #132]	@ (800b978 <sync_fs+0xd4>)
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff fd4c 	bl	800b392 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3330      	adds	r3, #48	@ 0x30
 800b8fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b902:	491e      	ldr	r1, [pc, #120]	@ (800b97c <sync_fs+0xd8>)
 800b904:	4618      	mov	r0, r3
 800b906:	f7ff fd44 	bl	800b392 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	3330      	adds	r3, #48	@ 0x30
 800b90e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7ff fd3a 	bl	800b392 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3330      	adds	r3, #48	@ 0x30
 800b922:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	4619      	mov	r1, r3
 800b92c:	4610      	mov	r0, r2
 800b92e:	f7ff fd30 	bl	800b392 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	69db      	ldr	r3, [r3, #28]
 800b936:	1c5a      	adds	r2, r3, #1
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	7858      	ldrb	r0, [r3, #1]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94a:	2301      	movs	r3, #1
 800b94c:	f7ff fc8c 	bl	800b268 <disk_write>
			fs->fsi_flag = 0;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	785b      	ldrb	r3, [r3, #1]
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff fca2 	bl	800b2a8 <disk_ioctl>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <sync_fs+0xca>
 800b96a:	2301      	movs	r3, #1
 800b96c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	41615252 	.word	0x41615252
 800b97c:	61417272 	.word	0x61417272

0800b980 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	3b02      	subs	r3, #2
 800b98e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	3b02      	subs	r3, #2
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d301      	bcc.n	800b9a0 <clust2sect+0x20>
 800b99c:	2300      	movs	r3, #0
 800b99e:	e008      	b.n	800b9b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	895b      	ldrh	r3, [r3, #10]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	fb03 f202 	mul.w	r2, r3, r2
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b0:	4413      	add	r3, r2
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b086      	sub	sp, #24
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d904      	bls.n	800b9de <get_fat+0x20>
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d302      	bcc.n	800b9e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b9de:	2301      	movs	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]
 800b9e2:	e08e      	b.n	800bb02 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d061      	beq.n	800bab6 <get_fat+0xf8>
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	dc7b      	bgt.n	800baee <get_fat+0x130>
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d002      	beq.n	800ba00 <get_fat+0x42>
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d041      	beq.n	800ba82 <get_fat+0xc4>
 800b9fe:	e076      	b.n	800baee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	085b      	lsrs	r3, r3, #1
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	6a1a      	ldr	r2, [r3, #32]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	0a5b      	lsrs	r3, r3, #9
 800ba16:	4413      	add	r3, r2
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6938      	ldr	r0, [r7, #16]
 800ba1c:	f7ff ff14 	bl	800b848 <move_window>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d166      	bne.n	800baf4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	1c5a      	adds	r2, r3, #1
 800ba2a:	60fa      	str	r2, [r7, #12]
 800ba2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	4413      	add	r3, r2
 800ba34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	6a1a      	ldr	r2, [r3, #32]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	0a5b      	lsrs	r3, r3, #9
 800ba42:	4413      	add	r3, r2
 800ba44:	4619      	mov	r1, r3
 800ba46:	6938      	ldr	r0, [r7, #16]
 800ba48:	f7ff fefe 	bl	800b848 <move_window>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d152      	bne.n	800baf8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba60:	021b      	lsls	r3, r3, #8
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d002      	beq.n	800ba78 <get_fat+0xba>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	091b      	lsrs	r3, r3, #4
 800ba76:	e002      	b.n	800ba7e <get_fat+0xc0>
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba7e:	617b      	str	r3, [r7, #20]
			break;
 800ba80:	e03f      	b.n	800bb02 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	6a1a      	ldr	r2, [r3, #32]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	0a1b      	lsrs	r3, r3, #8
 800ba8a:	4413      	add	r3, r2
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6938      	ldr	r0, [r7, #16]
 800ba90:	f7ff feda 	bl	800b848 <move_window>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d130      	bne.n	800bafc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800baa8:	4413      	add	r3, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fc1a 	bl	800b2e4 <ld_word>
 800bab0:	4603      	mov	r3, r0
 800bab2:	617b      	str	r3, [r7, #20]
			break;
 800bab4:	e025      	b.n	800bb02 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	6a1a      	ldr	r2, [r3, #32]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	09db      	lsrs	r3, r3, #7
 800babe:	4413      	add	r3, r2
 800bac0:	4619      	mov	r1, r3
 800bac2:	6938      	ldr	r0, [r7, #16]
 800bac4:	f7ff fec0 	bl	800b848 <move_window>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d118      	bne.n	800bb00 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800badc:	4413      	add	r3, r2
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff fc19 	bl	800b316 <ld_dword>
 800bae4:	4603      	mov	r3, r0
 800bae6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800baea:	617b      	str	r3, [r7, #20]
			break;
 800baec:	e009      	b.n	800bb02 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800baee:	2301      	movs	r3, #1
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	e006      	b.n	800bb02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800baf4:	bf00      	nop
 800baf6:	e004      	b.n	800bb02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800baf8:	bf00      	nop
 800bafa:	e002      	b.n	800bb02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bafc:	bf00      	nop
 800bafe:	e000      	b.n	800bb02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bb00:	bf00      	nop
		}
	}

	return val;
 800bb02:	697b      	ldr	r3, [r7, #20]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3718      	adds	r7, #24
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b089      	sub	sp, #36	@ 0x24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bb18:	2302      	movs	r3, #2
 800bb1a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	f240 80d9 	bls.w	800bcd6 <put_fat+0x1ca>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	695b      	ldr	r3, [r3, #20]
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	f080 80d3 	bcs.w	800bcd6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	f000 8096 	beq.w	800bc66 <put_fat+0x15a>
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	f300 80cb 	bgt.w	800bcd6 <put_fat+0x1ca>
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d002      	beq.n	800bb4a <put_fat+0x3e>
 800bb44:	2b02      	cmp	r3, #2
 800bb46:	d06e      	beq.n	800bc26 <put_fat+0x11a>
 800bb48:	e0c5      	b.n	800bcd6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	61bb      	str	r3, [r7, #24]
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	085b      	lsrs	r3, r3, #1
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	4413      	add	r3, r2
 800bb56:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6a1a      	ldr	r2, [r3, #32]
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	0a5b      	lsrs	r3, r3, #9
 800bb60:	4413      	add	r3, r2
 800bb62:	4619      	mov	r1, r3
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f7ff fe6f 	bl	800b848 <move_window>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb6e:	7ffb      	ldrb	r3, [r7, #31]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f040 80a9 	bne.w	800bcc8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	1c59      	adds	r1, r3, #1
 800bb80:	61b9      	str	r1, [r7, #24]
 800bb82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb86:	4413      	add	r3, r2
 800bb88:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00d      	beq.n	800bbb0 <put_fat+0xa4>
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	b25b      	sxtb	r3, r3
 800bb9a:	f003 030f 	and.w	r3, r3, #15
 800bb9e:	b25a      	sxtb	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	b25b      	sxtb	r3, r3
 800bba4:	011b      	lsls	r3, r3, #4
 800bba6:	b25b      	sxtb	r3, r3
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	b25b      	sxtb	r3, r3
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	e001      	b.n	800bbb4 <put_fat+0xa8>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6a1a      	ldr	r2, [r3, #32]
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	0a5b      	lsrs	r3, r3, #9
 800bbc6:	4413      	add	r3, r2
 800bbc8:	4619      	mov	r1, r3
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f7ff fe3c 	bl	800b848 <move_window>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bbd4:	7ffb      	ldrb	r3, [r7, #31]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d178      	bne.n	800bccc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe6:	4413      	add	r3, r2
 800bbe8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d003      	beq.n	800bbfc <put_fat+0xf0>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	091b      	lsrs	r3, r3, #4
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	e00e      	b.n	800bc1a <put_fat+0x10e>
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	b25b      	sxtb	r3, r3
 800bc02:	f023 030f 	bic.w	r3, r3, #15
 800bc06:	b25a      	sxtb	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	0a1b      	lsrs	r3, r3, #8
 800bc0c:	b25b      	sxtb	r3, r3
 800bc0e:	f003 030f 	and.w	r3, r3, #15
 800bc12:	b25b      	sxtb	r3, r3
 800bc14:	4313      	orrs	r3, r2
 800bc16:	b25b      	sxtb	r3, r3
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2201      	movs	r2, #1
 800bc22:	70da      	strb	r2, [r3, #3]
			break;
 800bc24:	e057      	b.n	800bcd6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6a1a      	ldr	r2, [r3, #32]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	0a1b      	lsrs	r3, r3, #8
 800bc2e:	4413      	add	r3, r2
 800bc30:	4619      	mov	r1, r3
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f7ff fe08 	bl	800b848 <move_window>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc3c:	7ffb      	ldrb	r3, [r7, #31]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d146      	bne.n	800bcd0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bc50:	4413      	add	r3, r2
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	b292      	uxth	r2, r2
 800bc56:	4611      	mov	r1, r2
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff fb7f 	bl	800b35c <st_word>
			fs->wflag = 1;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2201      	movs	r2, #1
 800bc62:	70da      	strb	r2, [r3, #3]
			break;
 800bc64:	e037      	b.n	800bcd6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6a1a      	ldr	r2, [r3, #32]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	09db      	lsrs	r3, r3, #7
 800bc6e:	4413      	add	r3, r2
 800bc70:	4619      	mov	r1, r3
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f7ff fde8 	bl	800b848 <move_window>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc7c:	7ffb      	ldrb	r3, [r7, #31]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d128      	bne.n	800bcd4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bc96:	4413      	add	r3, r2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff fb3c 	bl	800b316 <ld_dword>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bca4:	4323      	orrs	r3, r4
 800bca6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bcb6:	4413      	add	r3, r2
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff fb69 	bl	800b392 <st_dword>
			fs->wflag = 1;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	70da      	strb	r2, [r3, #3]
			break;
 800bcc6:	e006      	b.n	800bcd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bcc8:	bf00      	nop
 800bcca:	e004      	b.n	800bcd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bccc:	bf00      	nop
 800bcce:	e002      	b.n	800bcd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bcd0:	bf00      	nop
 800bcd2:	e000      	b.n	800bcd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bcd4:	bf00      	nop
		}
	}
	return res;
 800bcd6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3724      	adds	r7, #36	@ 0x24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd90      	pop	{r4, r7, pc}

0800bce0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d904      	bls.n	800bd06 <remove_chain+0x26>
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d301      	bcc.n	800bd0a <remove_chain+0x2a>
 800bd06:	2302      	movs	r3, #2
 800bd08:	e04b      	b.n	800bda2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00c      	beq.n	800bd2a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bd10:	f04f 32ff 	mov.w	r2, #4294967295
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	69b8      	ldr	r0, [r7, #24]
 800bd18:	f7ff fef8 	bl	800bb0c <put_fat>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bd20:	7ffb      	ldrb	r3, [r7, #31]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d001      	beq.n	800bd2a <remove_chain+0x4a>
 800bd26:	7ffb      	ldrb	r3, [r7, #31]
 800bd28:	e03b      	b.n	800bda2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bd2a:	68b9      	ldr	r1, [r7, #8]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7ff fe46 	bl	800b9be <get_fat>
 800bd32:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d031      	beq.n	800bd9e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <remove_chain+0x64>
 800bd40:	2302      	movs	r3, #2
 800bd42:	e02e      	b.n	800bda2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4a:	d101      	bne.n	800bd50 <remove_chain+0x70>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e028      	b.n	800bda2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bd50:	2200      	movs	r2, #0
 800bd52:	68b9      	ldr	r1, [r7, #8]
 800bd54:	69b8      	ldr	r0, [r7, #24]
 800bd56:	f7ff fed9 	bl	800bb0c <put_fat>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bd5e:	7ffb      	ldrb	r3, [r7, #31]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <remove_chain+0x88>
 800bd64:	7ffb      	ldrb	r3, [r7, #31]
 800bd66:	e01c      	b.n	800bda2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	691a      	ldr	r2, [r3, #16]
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	3b02      	subs	r3, #2
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d20b      	bcs.n	800bd8e <remove_chain+0xae>
			fs->free_clst++;
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	791b      	ldrb	r3, [r3, #4]
 800bd84:	f043 0301 	orr.w	r3, r3, #1
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d3c6      	bcc.n	800bd2a <remove_chain+0x4a>
 800bd9c:	e000      	b.n	800bda0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bd9e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3720      	adds	r7, #32
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b088      	sub	sp, #32
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10d      	bne.n	800bddc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d004      	beq.n	800bdd6 <create_chain+0x2c>
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	69ba      	ldr	r2, [r7, #24]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d31b      	bcc.n	800be0e <create_chain+0x64>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	61bb      	str	r3, [r7, #24]
 800bdda:	e018      	b.n	800be0e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff fded 	bl	800b9be <get_fat>
 800bde4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d801      	bhi.n	800bdf0 <create_chain+0x46>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e070      	b.n	800bed2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf6:	d101      	bne.n	800bdfc <create_chain+0x52>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	e06a      	b.n	800bed2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	429a      	cmp	r2, r3
 800be04:	d201      	bcs.n	800be0a <create_chain+0x60>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	e063      	b.n	800bed2 <create_chain+0x128>
		scl = clst;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	3301      	adds	r3, #1
 800be16:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	69fa      	ldr	r2, [r7, #28]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d307      	bcc.n	800be32 <create_chain+0x88>
				ncl = 2;
 800be22:	2302      	movs	r3, #2
 800be24:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800be26:	69fa      	ldr	r2, [r7, #28]
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d901      	bls.n	800be32 <create_chain+0x88>
 800be2e:	2300      	movs	r3, #0
 800be30:	e04f      	b.n	800bed2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800be32:	69f9      	ldr	r1, [r7, #28]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff fdc2 	bl	800b9be <get_fat>
 800be3a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00e      	beq.n	800be60 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d003      	beq.n	800be50 <create_chain+0xa6>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4e:	d101      	bne.n	800be54 <create_chain+0xaa>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	e03e      	b.n	800bed2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800be54:	69fa      	ldr	r2, [r7, #28]
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d1da      	bne.n	800be12 <create_chain+0x68>
 800be5c:	2300      	movs	r3, #0
 800be5e:	e038      	b.n	800bed2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800be60:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800be62:	f04f 32ff 	mov.w	r2, #4294967295
 800be66:	69f9      	ldr	r1, [r7, #28]
 800be68:	6938      	ldr	r0, [r7, #16]
 800be6a:	f7ff fe4f 	bl	800bb0c <put_fat>
 800be6e:	4603      	mov	r3, r0
 800be70:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d109      	bne.n	800be8c <create_chain+0xe2>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d006      	beq.n	800be8c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800be7e:	69fa      	ldr	r2, [r7, #28]
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6938      	ldr	r0, [r7, #16]
 800be84:	f7ff fe42 	bl	800bb0c <put_fat>
 800be88:	4603      	mov	r3, r0
 800be8a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d116      	bne.n	800bec0 <create_chain+0x116>
		fs->last_clst = ncl;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	69fa      	ldr	r2, [r7, #28]
 800be96:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	691a      	ldr	r2, [r3, #16]
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	695b      	ldr	r3, [r3, #20]
 800bea0:	3b02      	subs	r3, #2
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d804      	bhi.n	800beb0 <create_chain+0x106>
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	1e5a      	subs	r2, r3, #1
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	791b      	ldrb	r3, [r3, #4]
 800beb4:	f043 0301 	orr.w	r3, r3, #1
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	711a      	strb	r2, [r3, #4]
 800bebe:	e007      	b.n	800bed0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d102      	bne.n	800becc <create_chain+0x122>
 800bec6:	f04f 33ff 	mov.w	r3, #4294967295
 800beca:	e000      	b.n	800bece <create_chain+0x124>
 800becc:	2301      	movs	r3, #1
 800bece:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bed0:	69fb      	ldr	r3, [r7, #28]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3720      	adds	r7, #32
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800beda:	b480      	push	{r7}
 800bedc:	b087      	sub	sp, #28
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beee:	3304      	adds	r3, #4
 800bef0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	0a5b      	lsrs	r3, r3, #9
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	8952      	ldrh	r2, [r2, #10]
 800befa:	fbb3 f3f2 	udiv	r3, r3, r2
 800befe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	613a      	str	r2, [r7, #16]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <clmt_clust+0x3a>
 800bf10:	2300      	movs	r3, #0
 800bf12:	e010      	b.n	800bf36 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d307      	bcc.n	800bf2c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	3304      	adds	r3, #4
 800bf28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf2a:	e7e9      	b.n	800bf00 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bf2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	4413      	add	r3, r2
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	371c      	adds	r7, #28
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b086      	sub	sp, #24
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf58:	d204      	bcs.n	800bf64 <dir_sdi+0x22>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	f003 031f 	and.w	r3, r3, #31
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d001      	beq.n	800bf68 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bf64:	2302      	movs	r3, #2
 800bf66:	e063      	b.n	800c030 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d106      	bne.n	800bf88 <dir_sdi+0x46>
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d902      	bls.n	800bf88 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10c      	bne.n	800bfa8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	095b      	lsrs	r3, r3, #5
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	8912      	ldrh	r2, [r2, #8]
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d301      	bcc.n	800bf9e <dir_sdi+0x5c>
 800bf9a:	2302      	movs	r3, #2
 800bf9c:	e048      	b.n	800c030 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	61da      	str	r2, [r3, #28]
 800bfa6:	e029      	b.n	800bffc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	895b      	ldrh	r3, [r3, #10]
 800bfac:	025b      	lsls	r3, r3, #9
 800bfae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfb0:	e019      	b.n	800bfe6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6979      	ldr	r1, [r7, #20]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff fd01 	bl	800b9be <get_fat>
 800bfbc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d101      	bne.n	800bfca <dir_sdi+0x88>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e032      	b.n	800c030 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d904      	bls.n	800bfda <dir_sdi+0x98>
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	695b      	ldr	r3, [r3, #20]
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d301      	bcc.n	800bfde <dir_sdi+0x9c>
 800bfda:	2302      	movs	r3, #2
 800bfdc:	e028      	b.n	800c030 <dir_sdi+0xee>
			ofs -= csz;
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d2e1      	bcs.n	800bfb2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bfee:	6979      	ldr	r1, [r7, #20]
 800bff0:	6938      	ldr	r0, [r7, #16]
 800bff2:	f7ff fcc5 	bl	800b980 <clust2sect>
 800bff6:	4602      	mov	r2, r0
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <dir_sdi+0xcc>
 800c00a:	2302      	movs	r3, #2
 800c00c:	e010      	b.n	800c030 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	69da      	ldr	r2, [r3, #28]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	0a5b      	lsrs	r3, r3, #9
 800c016:	441a      	add	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c028:	441a      	add	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	3320      	adds	r3, #32
 800c04e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	69db      	ldr	r3, [r3, #28]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <dir_next+0x28>
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c05e:	d301      	bcc.n	800c064 <dir_next+0x2c>
 800c060:	2304      	movs	r3, #4
 800c062:	e0aa      	b.n	800c1ba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f040 8098 	bne.w	800c1a0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	69db      	ldr	r3, [r3, #28]
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	699b      	ldr	r3, [r3, #24]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10b      	bne.n	800c09a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	095b      	lsrs	r3, r3, #5
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	8912      	ldrh	r2, [r2, #8]
 800c08a:	4293      	cmp	r3, r2
 800c08c:	f0c0 8088 	bcc.w	800c1a0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	61da      	str	r2, [r3, #28]
 800c096:	2304      	movs	r3, #4
 800c098:	e08f      	b.n	800c1ba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	0a5b      	lsrs	r3, r3, #9
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	8952      	ldrh	r2, [r2, #10]
 800c0a2:	3a01      	subs	r2, #1
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d17a      	bne.n	800c1a0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	f7ff fc83 	bl	800b9be <get_fat>
 800c0b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d801      	bhi.n	800c0c4 <dir_next+0x8c>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	e07a      	b.n	800c1ba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ca:	d101      	bne.n	800c0d0 <dir_next+0x98>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e074      	b.n	800c1ba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	695b      	ldr	r3, [r3, #20]
 800c0d4:	697a      	ldr	r2, [r7, #20]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d358      	bcc.n	800c18c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d104      	bne.n	800c0ea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	61da      	str	r2, [r3, #28]
 800c0e6:	2304      	movs	r3, #4
 800c0e8:	e067      	b.n	800c1ba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4610      	mov	r0, r2
 800c0f4:	f7ff fe59 	bl	800bdaa <create_chain>
 800c0f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <dir_next+0xcc>
 800c100:	2307      	movs	r3, #7
 800c102:	e05a      	b.n	800c1ba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2b01      	cmp	r3, #1
 800c108:	d101      	bne.n	800c10e <dir_next+0xd6>
 800c10a:	2302      	movs	r3, #2
 800c10c:	e055      	b.n	800c1ba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d101      	bne.n	800c11a <dir_next+0xe2>
 800c116:	2301      	movs	r3, #1
 800c118:	e04f      	b.n	800c1ba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7ff fb50 	bl	800b7c0 <sync_window>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <dir_next+0xf2>
 800c126:	2301      	movs	r3, #1
 800c128:	e047      	b.n	800c1ba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3330      	adds	r3, #48	@ 0x30
 800c12e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c132:	2100      	movs	r1, #0
 800c134:	4618      	mov	r0, r3
 800c136:	f7ff f979 	bl	800b42c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c13a:	2300      	movs	r3, #0
 800c13c:	613b      	str	r3, [r7, #16]
 800c13e:	6979      	ldr	r1, [r7, #20]
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f7ff fc1d 	bl	800b980 <clust2sect>
 800c146:	4602      	mov	r2, r0
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c14c:	e012      	b.n	800c174 <dir_next+0x13c>
						fs->wflag = 1;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2201      	movs	r2, #1
 800c152:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f7ff fb33 	bl	800b7c0 <sync_window>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <dir_next+0x12c>
 800c160:	2301      	movs	r3, #1
 800c162:	e02a      	b.n	800c1ba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	3301      	adds	r3, #1
 800c168:	613b      	str	r3, [r7, #16]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	895b      	ldrh	r3, [r3, #10]
 800c178:	461a      	mov	r2, r3
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d3e6      	bcc.n	800c14e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c192:	6979      	ldr	r1, [r7, #20]
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f7ff fbf3 	bl	800b980 <clust2sect>
 800c19a:	4602      	mov	r2, r0
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b2:	441a      	add	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b086      	sub	sp, #24
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7ff feb4 	bl	800bf42 <dir_sdi>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d12b      	bne.n	800c23c <dir_alloc+0x7a>
		n = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	69db      	ldr	r3, [r3, #28]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f7ff fb2a 	bl	800b848 <move_window>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d11d      	bne.n	800c23a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2be5      	cmp	r3, #229	@ 0xe5
 800c206:	d004      	beq.n	800c212 <dir_alloc+0x50>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6a1b      	ldr	r3, [r3, #32]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d107      	bne.n	800c222 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	3301      	adds	r3, #1
 800c216:	613b      	str	r3, [r7, #16]
 800c218:	693a      	ldr	r2, [r7, #16]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d102      	bne.n	800c226 <dir_alloc+0x64>
 800c220:	e00c      	b.n	800c23c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c222:	2300      	movs	r3, #0
 800c224:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c226:	2101      	movs	r1, #1
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff ff05 	bl	800c038 <dir_next>
 800c22e:	4603      	mov	r3, r0
 800c230:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c232:	7dfb      	ldrb	r3, [r7, #23]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d0d7      	beq.n	800c1e8 <dir_alloc+0x26>
 800c238:	e000      	b.n	800c23c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c23a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
 800c23e:	2b04      	cmp	r3, #4
 800c240:	d101      	bne.n	800c246 <dir_alloc+0x84>
 800c242:	2307      	movs	r3, #7
 800c244:	75fb      	strb	r3, [r7, #23]
	return res;
 800c246:	7dfb      	ldrb	r3, [r7, #23]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	331a      	adds	r3, #26
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff f840 	bl	800b2e4 <ld_word>
 800c264:	4603      	mov	r3, r0
 800c266:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d109      	bne.n	800c284 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	3314      	adds	r3, #20
 800c274:	4618      	mov	r0, r3
 800c276:	f7ff f835 	bl	800b2e4 <ld_word>
 800c27a:	4603      	mov	r3, r0
 800c27c:	041b      	lsls	r3, r3, #16
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	4313      	orrs	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c284:	68fb      	ldr	r3, [r7, #12]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	60f8      	str	r0, [r7, #12]
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	331a      	adds	r3, #26
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	b292      	uxth	r2, r2
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff f859 	bl	800b35c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d109      	bne.n	800c2c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	f103 0214 	add.w	r2, r3, #20
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	0c1b      	lsrs	r3, r3, #16
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	f7ff f84b 	bl	800b35c <st_word>
	}
}
 800c2c6:	bf00      	nop
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b086      	sub	sp, #24
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c2dc:	2100      	movs	r1, #0
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fe2f 	bl	800bf42 <dir_sdi>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d001      	beq.n	800c2f2 <dir_find+0x24>
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	e03e      	b.n	800c370 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	69db      	ldr	r3, [r3, #28]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6938      	ldr	r0, [r7, #16]
 800c2fa:	f7ff faa5 	bl	800b848 <move_window>
 800c2fe:	4603      	mov	r3, r0
 800c300:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c302:	7dfb      	ldrb	r3, [r7, #23]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d12f      	bne.n	800c368 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c310:	7bfb      	ldrb	r3, [r7, #15]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d102      	bne.n	800c31c <dir_find+0x4e>
 800c316:	2304      	movs	r3, #4
 800c318:	75fb      	strb	r3, [r7, #23]
 800c31a:	e028      	b.n	800c36e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a1b      	ldr	r3, [r3, #32]
 800c320:	330b      	adds	r3, #11
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c328:	b2da      	uxtb	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	330b      	adds	r3, #11
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	f003 0308 	and.w	r3, r3, #8
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10a      	bne.n	800c354 <dir_find+0x86>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a18      	ldr	r0, [r3, #32]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	3324      	adds	r3, #36	@ 0x24
 800c346:	220b      	movs	r2, #11
 800c348:	4619      	mov	r1, r3
 800c34a:	f7ff f88a 	bl	800b462 <mem_cmp>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c354:	2100      	movs	r1, #0
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff fe6e 	bl	800c038 <dir_next>
 800c35c:	4603      	mov	r3, r0
 800c35e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c360:	7dfb      	ldrb	r3, [r7, #23]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0c5      	beq.n	800c2f2 <dir_find+0x24>
 800c366:	e002      	b.n	800c36e <dir_find+0xa0>
		if (res != FR_OK) break;
 800c368:	bf00      	nop
 800c36a:	e000      	b.n	800c36e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c36c:	bf00      	nop

	return res;
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c386:	2101      	movs	r1, #1
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7ff ff1a 	bl	800c1c2 <dir_alloc>
 800c38e:	4603      	mov	r3, r0
 800c390:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d11c      	bne.n	800c3d2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	69db      	ldr	r3, [r3, #28]
 800c39c:	4619      	mov	r1, r3
 800c39e:	68b8      	ldr	r0, [r7, #8]
 800c3a0:	f7ff fa52 	bl	800b848 <move_window>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d111      	bne.n	800c3d2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	2220      	movs	r2, #32
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff f838 	bl	800b42c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a18      	ldr	r0, [r3, #32]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3324      	adds	r3, #36	@ 0x24
 800c3c4:	220b      	movs	r2, #11
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	f7ff f80f 	bl	800b3ea <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	3324      	adds	r3, #36	@ 0x24
 800c3f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c3f2:	220b      	movs	r2, #11
 800c3f4:	2120      	movs	r1, #32
 800c3f6:	68b8      	ldr	r0, [r7, #8]
 800c3f8:	f7ff f818 	bl	800b42c <mem_set>
	si = i = 0; ni = 8;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	613b      	str	r3, [r7, #16]
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	61fb      	str	r3, [r7, #28]
 800c404:	2308      	movs	r3, #8
 800c406:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	61fa      	str	r2, [r7, #28]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	4413      	add	r3, r2
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c416:	7efb      	ldrb	r3, [r7, #27]
 800c418:	2b20      	cmp	r3, #32
 800c41a:	d94e      	bls.n	800c4ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c41c:	7efb      	ldrb	r3, [r7, #27]
 800c41e:	2b2f      	cmp	r3, #47	@ 0x2f
 800c420:	d006      	beq.n	800c430 <create_name+0x54>
 800c422:	7efb      	ldrb	r3, [r7, #27]
 800c424:	2b5c      	cmp	r3, #92	@ 0x5c
 800c426:	d110      	bne.n	800c44a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c428:	e002      	b.n	800c430 <create_name+0x54>
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	3301      	adds	r3, #1
 800c42e:	61fb      	str	r3, [r7, #28]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	4413      	add	r3, r2
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b2f      	cmp	r3, #47	@ 0x2f
 800c43a:	d0f6      	beq.n	800c42a <create_name+0x4e>
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	4413      	add	r3, r2
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	2b5c      	cmp	r3, #92	@ 0x5c
 800c446:	d0f0      	beq.n	800c42a <create_name+0x4e>
			break;
 800c448:	e038      	b.n	800c4bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c44a:	7efb      	ldrb	r3, [r7, #27]
 800c44c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c44e:	d003      	beq.n	800c458 <create_name+0x7c>
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	429a      	cmp	r2, r3
 800c456:	d30c      	bcc.n	800c472 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	2b0b      	cmp	r3, #11
 800c45c:	d002      	beq.n	800c464 <create_name+0x88>
 800c45e:	7efb      	ldrb	r3, [r7, #27]
 800c460:	2b2e      	cmp	r3, #46	@ 0x2e
 800c462:	d001      	beq.n	800c468 <create_name+0x8c>
 800c464:	2306      	movs	r3, #6
 800c466:	e044      	b.n	800c4f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c468:	2308      	movs	r3, #8
 800c46a:	613b      	str	r3, [r7, #16]
 800c46c:	230b      	movs	r3, #11
 800c46e:	617b      	str	r3, [r7, #20]
			continue;
 800c470:	e022      	b.n	800c4b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c472:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c476:	2b00      	cmp	r3, #0
 800c478:	da04      	bge.n	800c484 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c47a:	7efb      	ldrb	r3, [r7, #27]
 800c47c:	3b80      	subs	r3, #128	@ 0x80
 800c47e:	4a1f      	ldr	r2, [pc, #124]	@ (800c4fc <create_name+0x120>)
 800c480:	5cd3      	ldrb	r3, [r2, r3]
 800c482:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c484:	7efb      	ldrb	r3, [r7, #27]
 800c486:	4619      	mov	r1, r3
 800c488:	481d      	ldr	r0, [pc, #116]	@ (800c500 <create_name+0x124>)
 800c48a:	f7ff f811 	bl	800b4b0 <chk_chr>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <create_name+0xbc>
 800c494:	2306      	movs	r3, #6
 800c496:	e02c      	b.n	800c4f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c498:	7efb      	ldrb	r3, [r7, #27]
 800c49a:	2b60      	cmp	r3, #96	@ 0x60
 800c49c:	d905      	bls.n	800c4aa <create_name+0xce>
 800c49e:	7efb      	ldrb	r3, [r7, #27]
 800c4a0:	2b7a      	cmp	r3, #122	@ 0x7a
 800c4a2:	d802      	bhi.n	800c4aa <create_name+0xce>
 800c4a4:	7efb      	ldrb	r3, [r7, #27]
 800c4a6:	3b20      	subs	r3, #32
 800c4a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	1c5a      	adds	r2, r3, #1
 800c4ae:	613a      	str	r2, [r7, #16]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	7efa      	ldrb	r2, [r7, #27]
 800c4b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c4b8:	e7a6      	b.n	800c408 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c4ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	441a      	add	r2, r3
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <create_name+0xf4>
 800c4cc:	2306      	movs	r3, #6
 800c4ce:	e010      	b.n	800c4f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2be5      	cmp	r3, #229	@ 0xe5
 800c4d6:	d102      	bne.n	800c4de <create_name+0x102>
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	2205      	movs	r2, #5
 800c4dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c4de:	7efb      	ldrb	r3, [r7, #27]
 800c4e0:	2b20      	cmp	r3, #32
 800c4e2:	d801      	bhi.n	800c4e8 <create_name+0x10c>
 800c4e4:	2204      	movs	r2, #4
 800c4e6:	e000      	b.n	800c4ea <create_name+0x10e>
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	330b      	adds	r3, #11
 800c4ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c4f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3720      	adds	r7, #32
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	0800e4ac 	.word	0x0800e4ac
 800c500:	0800e260 	.word	0x0800e260

0800c504 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c518:	e002      	b.n	800c520 <follow_path+0x1c>
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	3301      	adds	r3, #1
 800c51e:	603b      	str	r3, [r7, #0]
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	2b2f      	cmp	r3, #47	@ 0x2f
 800c526:	d0f8      	beq.n	800c51a <follow_path+0x16>
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c52e:	d0f4      	beq.n	800c51a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	2200      	movs	r2, #0
 800c534:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b1f      	cmp	r3, #31
 800c53c:	d80a      	bhi.n	800c554 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2280      	movs	r2, #128	@ 0x80
 800c542:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c546:	2100      	movs	r1, #0
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7ff fcfa 	bl	800bf42 <dir_sdi>
 800c54e:	4603      	mov	r3, r0
 800c550:	75fb      	strb	r3, [r7, #23]
 800c552:	e043      	b.n	800c5dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c554:	463b      	mov	r3, r7
 800c556:	4619      	mov	r1, r3
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff ff3f 	bl	800c3dc <create_name>
 800c55e:	4603      	mov	r3, r0
 800c560:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d134      	bne.n	800c5d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff feb0 	bl	800c2ce <dir_find>
 800c56e:	4603      	mov	r3, r0
 800c570:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c578:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c57a:	7dfb      	ldrb	r3, [r7, #23]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00a      	beq.n	800c596 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c580:	7dfb      	ldrb	r3, [r7, #23]
 800c582:	2b04      	cmp	r3, #4
 800c584:	d127      	bne.n	800c5d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c586:	7afb      	ldrb	r3, [r7, #11]
 800c588:	f003 0304 	and.w	r3, r3, #4
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d122      	bne.n	800c5d6 <follow_path+0xd2>
 800c590:	2305      	movs	r3, #5
 800c592:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c594:	e01f      	b.n	800c5d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	f003 0304 	and.w	r3, r3, #4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d11c      	bne.n	800c5da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	799b      	ldrb	r3, [r3, #6]
 800c5a4:	f003 0310 	and.w	r3, r3, #16
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d102      	bne.n	800c5b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c5ac:	2305      	movs	r3, #5
 800c5ae:	75fb      	strb	r3, [r7, #23]
 800c5b0:	e014      	b.n	800c5dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c0:	4413      	add	r3, r2
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f7ff fe43 	bl	800c250 <ld_clust>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c5d0:	e7c0      	b.n	800c554 <follow_path+0x50>
			if (res != FR_OK) break;
 800c5d2:	bf00      	nop
 800c5d4:	e002      	b.n	800c5dc <follow_path+0xd8>
				break;
 800c5d6:	bf00      	nop
 800c5d8:	e000      	b.n	800c5dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c5da:	bf00      	nop
			}
		}
	}

	return res;
 800c5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b087      	sub	sp, #28
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d031      	beq.n	800c660 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	617b      	str	r3, [r7, #20]
 800c602:	e002      	b.n	800c60a <get_ldnumber+0x24>
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	3301      	adds	r3, #1
 800c608:	617b      	str	r3, [r7, #20]
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	2b20      	cmp	r3, #32
 800c610:	d903      	bls.n	800c61a <get_ldnumber+0x34>
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	2b3a      	cmp	r3, #58	@ 0x3a
 800c618:	d1f4      	bne.n	800c604 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c620:	d11c      	bne.n	800c65c <get_ldnumber+0x76>
			tp = *path;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	60fa      	str	r2, [r7, #12]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	3b30      	subs	r3, #48	@ 0x30
 800c632:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2b09      	cmp	r3, #9
 800c638:	d80e      	bhi.n	800c658 <get_ldnumber+0x72>
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d10a      	bne.n	800c658 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d107      	bne.n	800c658 <get_ldnumber+0x72>
					vol = (int)i;
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	3301      	adds	r3, #1
 800c650:	617b      	str	r3, [r7, #20]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	e002      	b.n	800c662 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c65c:	2300      	movs	r3, #0
 800c65e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c660:	693b      	ldr	r3, [r7, #16]
}
 800c662:	4618      	mov	r0, r3
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
	...

0800c670 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	70da      	strb	r2, [r3, #3]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f04f 32ff 	mov.w	r2, #4294967295
 800c686:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c688:	6839      	ldr	r1, [r7, #0]
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7ff f8dc 	bl	800b848 <move_window>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <check_fs+0x2a>
 800c696:	2304      	movs	r3, #4
 800c698:	e038      	b.n	800c70c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	3330      	adds	r3, #48	@ 0x30
 800c69e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe fe1e 	bl	800b2e4 <ld_word>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d001      	beq.n	800c6b8 <check_fs+0x48>
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	e029      	b.n	800c70c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6be:	2be9      	cmp	r3, #233	@ 0xe9
 800c6c0:	d009      	beq.n	800c6d6 <check_fs+0x66>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6c8:	2beb      	cmp	r3, #235	@ 0xeb
 800c6ca:	d11e      	bne.n	800c70a <check_fs+0x9a>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c6d2:	2b90      	cmp	r3, #144	@ 0x90
 800c6d4:	d119      	bne.n	800c70a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3330      	adds	r3, #48	@ 0x30
 800c6da:	3336      	adds	r3, #54	@ 0x36
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fe fe1a 	bl	800b316 <ld_dword>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c6e8:	4a0a      	ldr	r2, [pc, #40]	@ (800c714 <check_fs+0xa4>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d101      	bne.n	800c6f2 <check_fs+0x82>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	e00c      	b.n	800c70c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3330      	adds	r3, #48	@ 0x30
 800c6f6:	3352      	adds	r3, #82	@ 0x52
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fe fe0c 	bl	800b316 <ld_dword>
 800c6fe:	4603      	mov	r3, r0
 800c700:	4a05      	ldr	r2, [pc, #20]	@ (800c718 <check_fs+0xa8>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d101      	bne.n	800c70a <check_fs+0x9a>
 800c706:	2300      	movs	r3, #0
 800c708:	e000      	b.n	800c70c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c70a:	2302      	movs	r3, #2
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	00544146 	.word	0x00544146
 800c718:	33544146 	.word	0x33544146

0800c71c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b096      	sub	sp, #88	@ 0x58
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	4613      	mov	r3, r2
 800c728:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f7ff ff58 	bl	800c5e6 <get_ldnumber>
 800c736:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	da01      	bge.n	800c742 <find_volume+0x26>
 800c73e:	230b      	movs	r3, #11
 800c740:	e22d      	b.n	800cb9e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c742:	4aa1      	ldr	r2, [pc, #644]	@ (800c9c8 <find_volume+0x2ac>)
 800c744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c74a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d101      	bne.n	800c756 <find_volume+0x3a>
 800c752:	230c      	movs	r3, #12
 800c754:	e223      	b.n	800cb9e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c75a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c75c:	79fb      	ldrb	r3, [r7, #7]
 800c75e:	f023 0301 	bic.w	r3, r3, #1
 800c762:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d01a      	beq.n	800c7a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76e:	785b      	ldrb	r3, [r3, #1]
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe fd17 	bl	800b1a4 <disk_status>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c77c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c780:	f003 0301 	and.w	r3, r3, #1
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10c      	bne.n	800c7a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d007      	beq.n	800c79e <find_volume+0x82>
 800c78e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c792:	f003 0304 	and.w	r3, r3, #4
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c79a:	230a      	movs	r3, #10
 800c79c:	e1ff      	b.n	800cb9e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e1fd      	b.n	800cb9e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c7a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b2:	785b      	ldrb	r3, [r3, #1]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fe fd0f 	bl	800b1d8 <disk_initialize>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c7c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e1e6      	b.n	800cb9e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c7d0:	79fb      	ldrb	r3, [r7, #7]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d007      	beq.n	800c7e6 <find_volume+0xca>
 800c7d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7da:	f003 0304 	and.w	r3, r3, #4
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d001      	beq.n	800c7e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c7e2:	230a      	movs	r3, #10
 800c7e4:	e1db      	b.n	800cb9e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c7ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c7ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7ee:	f7ff ff3f 	bl	800c670 <check_fs>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c7f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d149      	bne.n	800c894 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c800:	2300      	movs	r3, #0
 800c802:	643b      	str	r3, [r7, #64]	@ 0x40
 800c804:	e01e      	b.n	800c844 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c808:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c80c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c80e:	011b      	lsls	r3, r3, #4
 800c810:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c814:	4413      	add	r3, r2
 800c816:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81a:	3304      	adds	r3, #4
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d006      	beq.n	800c830 <find_volume+0x114>
 800c822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c824:	3308      	adds	r3, #8
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe fd75 	bl	800b316 <ld_dword>
 800c82c:	4602      	mov	r2, r0
 800c82e:	e000      	b.n	800c832 <find_volume+0x116>
 800c830:	2200      	movs	r2, #0
 800c832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	3358      	adds	r3, #88	@ 0x58
 800c838:	443b      	add	r3, r7
 800c83a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c83e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c840:	3301      	adds	r3, #1
 800c842:	643b      	str	r3, [r7, #64]	@ 0x40
 800c844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c846:	2b03      	cmp	r3, #3
 800c848:	d9dd      	bls.n	800c806 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c84a:	2300      	movs	r3, #0
 800c84c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c84e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c850:	2b00      	cmp	r3, #0
 800c852:	d002      	beq.n	800c85a <find_volume+0x13e>
 800c854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c856:	3b01      	subs	r3, #1
 800c858:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c85a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	3358      	adds	r3, #88	@ 0x58
 800c860:	443b      	add	r3, r7
 800c862:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c866:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d005      	beq.n	800c87a <find_volume+0x15e>
 800c86e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c870:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c872:	f7ff fefd 	bl	800c670 <check_fs>
 800c876:	4603      	mov	r3, r0
 800c878:	e000      	b.n	800c87c <find_volume+0x160>
 800c87a:	2303      	movs	r3, #3
 800c87c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c880:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c884:	2b01      	cmp	r3, #1
 800c886:	d905      	bls.n	800c894 <find_volume+0x178>
 800c888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c88a:	3301      	adds	r3, #1
 800c88c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c88e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c890:	2b03      	cmp	r3, #3
 800c892:	d9e2      	bls.n	800c85a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c894:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c898:	2b04      	cmp	r3, #4
 800c89a:	d101      	bne.n	800c8a0 <find_volume+0x184>
 800c89c:	2301      	movs	r3, #1
 800c89e:	e17e      	b.n	800cb9e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c8a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d901      	bls.n	800c8ac <find_volume+0x190>
 800c8a8:	230d      	movs	r3, #13
 800c8aa:	e178      	b.n	800cb9e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ae:	3330      	adds	r3, #48	@ 0x30
 800c8b0:	330b      	adds	r3, #11
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fe fd16 	bl	800b2e4 <ld_word>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8be:	d001      	beq.n	800c8c4 <find_volume+0x1a8>
 800c8c0:	230d      	movs	r3, #13
 800c8c2:	e16c      	b.n	800cb9e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c6:	3330      	adds	r3, #48	@ 0x30
 800c8c8:	3316      	adds	r3, #22
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7fe fd0a 	bl	800b2e4 <ld_word>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <find_volume+0x1cc>
 800c8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8dc:	3330      	adds	r3, #48	@ 0x30
 800c8de:	3324      	adds	r3, #36	@ 0x24
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7fe fd18 	bl	800b316 <ld_dword>
 800c8e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c8ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fa:	789b      	ldrb	r3, [r3, #2]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d005      	beq.n	800c90c <find_volume+0x1f0>
 800c900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c902:	789b      	ldrb	r3, [r3, #2]
 800c904:	2b02      	cmp	r3, #2
 800c906:	d001      	beq.n	800c90c <find_volume+0x1f0>
 800c908:	230d      	movs	r3, #13
 800c90a:	e148      	b.n	800cb9e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90e:	789b      	ldrb	r3, [r3, #2]
 800c910:	461a      	mov	r2, r3
 800c912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c914:	fb02 f303 	mul.w	r3, r2, r3
 800c918:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c920:	461a      	mov	r2, r3
 800c922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c924:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c928:	895b      	ldrh	r3, [r3, #10]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d008      	beq.n	800c940 <find_volume+0x224>
 800c92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c930:	895b      	ldrh	r3, [r3, #10]
 800c932:	461a      	mov	r2, r3
 800c934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c936:	895b      	ldrh	r3, [r3, #10]
 800c938:	3b01      	subs	r3, #1
 800c93a:	4013      	ands	r3, r2
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <find_volume+0x228>
 800c940:	230d      	movs	r3, #13
 800c942:	e12c      	b.n	800cb9e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c946:	3330      	adds	r3, #48	@ 0x30
 800c948:	3311      	adds	r3, #17
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fe fcca 	bl	800b2e4 <ld_word>
 800c950:	4603      	mov	r3, r0
 800c952:	461a      	mov	r2, r3
 800c954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c956:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c95a:	891b      	ldrh	r3, [r3, #8]
 800c95c:	f003 030f 	and.w	r3, r3, #15
 800c960:	b29b      	uxth	r3, r3
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <find_volume+0x24e>
 800c966:	230d      	movs	r3, #13
 800c968:	e119      	b.n	800cb9e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96c:	3330      	adds	r3, #48	@ 0x30
 800c96e:	3313      	adds	r3, #19
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe fcb7 	bl	800b2e4 <ld_word>
 800c976:	4603      	mov	r3, r0
 800c978:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c97a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d106      	bne.n	800c98e <find_volume+0x272>
 800c980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c982:	3330      	adds	r3, #48	@ 0x30
 800c984:	3320      	adds	r3, #32
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe fcc5 	bl	800b316 <ld_dword>
 800c98c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c990:	3330      	adds	r3, #48	@ 0x30
 800c992:	330e      	adds	r3, #14
 800c994:	4618      	mov	r0, r3
 800c996:	f7fe fca5 	bl	800b2e4 <ld_word>
 800c99a:	4603      	mov	r3, r0
 800c99c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c99e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <find_volume+0x28c>
 800c9a4:	230d      	movs	r3, #13
 800c9a6:	e0fa      	b.n	800cb9e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c9a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ac:	4413      	add	r3, r2
 800c9ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9b0:	8912      	ldrh	r2, [r2, #8]
 800c9b2:	0912      	lsrs	r2, r2, #4
 800c9b4:	b292      	uxth	r2, r2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c9ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d204      	bcs.n	800c9cc <find_volume+0x2b0>
 800c9c2:	230d      	movs	r3, #13
 800c9c4:	e0eb      	b.n	800cb9e <find_volume+0x482>
 800c9c6:	bf00      	nop
 800c9c8:	200002fc 	.word	0x200002fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c9cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9d4:	8952      	ldrh	r2, [r2, #10]
 800c9d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <find_volume+0x2ca>
 800c9e2:	230d      	movs	r3, #13
 800c9e4:	e0db      	b.n	800cb9e <find_volume+0x482>
		fmt = FS_FAT32;
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d802      	bhi.n	800c9fc <find_volume+0x2e0>
 800c9f6:	2302      	movs	r3, #2
 800c9f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d802      	bhi.n	800ca0c <find_volume+0x2f0>
 800ca06:	2301      	movs	r3, #1
 800ca08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0e:	1c9a      	adds	r2, r3, #2
 800ca10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca12:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ca14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca18:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ca1a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ca1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca1e:	441a      	add	r2, r3
 800ca20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca22:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ca24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca28:	441a      	add	r2, r3
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca2c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800ca2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d11e      	bne.n	800ca74 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ca36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca38:	3330      	adds	r3, #48	@ 0x30
 800ca3a:	332a      	adds	r3, #42	@ 0x2a
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7fe fc51 	bl	800b2e4 <ld_word>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <find_volume+0x330>
 800ca48:	230d      	movs	r3, #13
 800ca4a:	e0a8      	b.n	800cb9e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca4e:	891b      	ldrh	r3, [r3, #8]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d001      	beq.n	800ca58 <find_volume+0x33c>
 800ca54:	230d      	movs	r3, #13
 800ca56:	e0a2      	b.n	800cb9e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ca58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca5a:	3330      	adds	r3, #48	@ 0x30
 800ca5c:	332c      	adds	r3, #44	@ 0x2c
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7fe fc59 	bl	800b316 <ld_dword>
 800ca64:	4602      	mov	r2, r0
 800ca66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca68:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca72:	e01f      	b.n	800cab4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ca74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca76:	891b      	ldrh	r3, [r3, #8]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d101      	bne.n	800ca80 <find_volume+0x364>
 800ca7c:	230d      	movs	r3, #13
 800ca7e:	e08e      	b.n	800cb9e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ca80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca82:	6a1a      	ldr	r2, [r3, #32]
 800ca84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca86:	441a      	add	r2, r3
 800ca88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ca8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d103      	bne.n	800ca9c <find_volume+0x380>
 800ca94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca96:	695b      	ldr	r3, [r3, #20]
 800ca98:	005b      	lsls	r3, r3, #1
 800ca9a:	e00a      	b.n	800cab2 <find_volume+0x396>
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9e:	695a      	ldr	r2, [r3, #20]
 800caa0:	4613      	mov	r3, r2
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	4413      	add	r3, r2
 800caa6:	085a      	lsrs	r2, r3, #1
 800caa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caaa:	695b      	ldr	r3, [r3, #20]
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cab2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab6:	699a      	ldr	r2, [r3, #24]
 800cab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800cabe:	0a5b      	lsrs	r3, r3, #9
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d201      	bcs.n	800cac8 <find_volume+0x3ac>
 800cac4:	230d      	movs	r3, #13
 800cac6:	e06a      	b.n	800cb9e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caca:	f04f 32ff 	mov.w	r2, #4294967295
 800cace:	611a      	str	r2, [r3, #16]
 800cad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad2:	691a      	ldr	r2, [r3, #16]
 800cad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cada:	2280      	movs	r2, #128	@ 0x80
 800cadc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cade:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	d149      	bne.n	800cb7a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae8:	3330      	adds	r3, #48	@ 0x30
 800caea:	3330      	adds	r3, #48	@ 0x30
 800caec:	4618      	mov	r0, r3
 800caee:	f7fe fbf9 	bl	800b2e4 <ld_word>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d140      	bne.n	800cb7a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800caf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cafa:	3301      	adds	r3, #1
 800cafc:	4619      	mov	r1, r3
 800cafe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb00:	f7fe fea2 	bl	800b848 <move_window>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d137      	bne.n	800cb7a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb12:	3330      	adds	r3, #48	@ 0x30
 800cb14:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fe fbe3 	bl	800b2e4 <ld_word>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	461a      	mov	r2, r3
 800cb22:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d127      	bne.n	800cb7a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb2c:	3330      	adds	r3, #48	@ 0x30
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fe fbf1 	bl	800b316 <ld_dword>
 800cb34:	4603      	mov	r3, r0
 800cb36:	4a1c      	ldr	r2, [pc, #112]	@ (800cba8 <find_volume+0x48c>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d11e      	bne.n	800cb7a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3e:	3330      	adds	r3, #48	@ 0x30
 800cb40:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe fbe6 	bl	800b316 <ld_dword>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	4a17      	ldr	r2, [pc, #92]	@ (800cbac <find_volume+0x490>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d113      	bne.n	800cb7a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb54:	3330      	adds	r3, #48	@ 0x30
 800cb56:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fbdb 	bl	800b316 <ld_dword>
 800cb60:	4602      	mov	r2, r0
 800cb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb64:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb68:	3330      	adds	r3, #48	@ 0x30
 800cb6a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fe fbd1 	bl	800b316 <ld_dword>
 800cb74:	4602      	mov	r2, r0
 800cb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb78:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cb80:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cb82:	4b0b      	ldr	r3, [pc, #44]	@ (800cbb0 <find_volume+0x494>)
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	3301      	adds	r3, #1
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	4b09      	ldr	r3, [pc, #36]	@ (800cbb0 <find_volume+0x494>)
 800cb8c:	801a      	strh	r2, [r3, #0]
 800cb8e:	4b08      	ldr	r3, [pc, #32]	@ (800cbb0 <find_volume+0x494>)
 800cb90:	881a      	ldrh	r2, [r3, #0]
 800cb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb94:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cb96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb98:	f7fe fdee 	bl	800b778 <clear_lock>
#endif
	return FR_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3758      	adds	r7, #88	@ 0x58
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	41615252 	.word	0x41615252
 800cbac:	61417272 	.word	0x61417272
 800cbb0:	20000300 	.word	0x20000300

0800cbb4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cbbe:	2309      	movs	r3, #9
 800cbc0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01c      	beq.n	800cc02 <validate+0x4e>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d018      	beq.n	800cc02 <validate+0x4e>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d013      	beq.n	800cc02 <validate+0x4e>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	889a      	ldrh	r2, [r3, #4]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	88db      	ldrh	r3, [r3, #6]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d10c      	bne.n	800cc02 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	785b      	ldrb	r3, [r3, #1]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fe fad8 	bl	800b1a4 <disk_status>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	f003 0301 	and.w	r3, r3, #1
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <validate+0x4e>
			res = FR_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc02:	7bfb      	ldrb	r3, [r7, #15]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <validate+0x5a>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	e000      	b.n	800cc10 <validate+0x5c>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	6013      	str	r3, [r2, #0]
	return res;
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
	...

0800cc20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b088      	sub	sp, #32
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cc32:	f107 0310 	add.w	r3, r7, #16
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff fcd5 	bl	800c5e6 <get_ldnumber>
 800cc3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	da01      	bge.n	800cc48 <f_mount+0x28>
 800cc44:	230b      	movs	r3, #11
 800cc46:	e02b      	b.n	800cca0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cc48:	4a17      	ldr	r2, [pc, #92]	@ (800cca8 <f_mount+0x88>)
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d005      	beq.n	800cc64 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cc58:	69b8      	ldr	r0, [r7, #24]
 800cc5a:	f7fe fd8d 	bl	800b778 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	2200      	movs	r2, #0
 800cc62:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	490d      	ldr	r1, [pc, #52]	@ (800cca8 <f_mount+0x88>)
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <f_mount+0x66>
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d001      	beq.n	800cc8a <f_mount+0x6a>
 800cc86:	2300      	movs	r3, #0
 800cc88:	e00a      	b.n	800cca0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cc8a:	f107 010c 	add.w	r1, r7, #12
 800cc8e:	f107 0308 	add.w	r3, r7, #8
 800cc92:	2200      	movs	r2, #0
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff fd41 	bl	800c71c <find_volume>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3720      	adds	r7, #32
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	200002fc 	.word	0x200002fc

0800ccac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b098      	sub	sp, #96	@ 0x60
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <f_open+0x18>
 800ccc0:	2309      	movs	r3, #9
 800ccc2:	e1a9      	b.n	800d018 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ccc4:	79fb      	ldrb	r3, [r7, #7]
 800ccc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ccca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cccc:	79fa      	ldrb	r2, [r7, #7]
 800ccce:	f107 0110 	add.w	r1, r7, #16
 800ccd2:	f107 0308 	add.w	r3, r7, #8
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff fd20 	bl	800c71c <find_volume>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cce2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f040 818d 	bne.w	800d006 <f_open+0x35a>
		dj.obj.fs = fs;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	f107 0314 	add.w	r3, r7, #20
 800ccf6:	4611      	mov	r1, r2
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff fc03 	bl	800c504 <follow_path>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cd04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d118      	bne.n	800cd3e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cd0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cd10:	b25b      	sxtb	r3, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	da03      	bge.n	800cd1e <f_open+0x72>
				res = FR_INVALID_NAME;
 800cd16:	2306      	movs	r3, #6
 800cd18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cd1c:	e00f      	b.n	800cd3e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd1e:	79fb      	ldrb	r3, [r7, #7]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	bf8c      	ite	hi
 800cd24:	2301      	movhi	r3, #1
 800cd26:	2300      	movls	r3, #0
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	f107 0314 	add.w	r3, r7, #20
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe fbd8 	bl	800b4e8 <chk_lock>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cd3e:	79fb      	ldrb	r3, [r7, #7]
 800cd40:	f003 031c 	and.w	r3, r3, #28
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d07f      	beq.n	800ce48 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cd48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d017      	beq.n	800cd80 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cd50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd54:	2b04      	cmp	r3, #4
 800cd56:	d10e      	bne.n	800cd76 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cd58:	f7fe fc22 	bl	800b5a0 <enq_lock>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d006      	beq.n	800cd70 <f_open+0xc4>
 800cd62:	f107 0314 	add.w	r3, r7, #20
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff fb06 	bl	800c378 <dir_register>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	e000      	b.n	800cd72 <f_open+0xc6>
 800cd70:	2312      	movs	r3, #18
 800cd72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cd76:	79fb      	ldrb	r3, [r7, #7]
 800cd78:	f043 0308 	orr.w	r3, r3, #8
 800cd7c:	71fb      	strb	r3, [r7, #7]
 800cd7e:	e010      	b.n	800cda2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cd80:	7ebb      	ldrb	r3, [r7, #26]
 800cd82:	f003 0311 	and.w	r3, r3, #17
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d003      	beq.n	800cd92 <f_open+0xe6>
					res = FR_DENIED;
 800cd8a:	2307      	movs	r3, #7
 800cd8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cd90:	e007      	b.n	800cda2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cd92:	79fb      	ldrb	r3, [r7, #7]
 800cd94:	f003 0304 	and.w	r3, r3, #4
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <f_open+0xf6>
 800cd9c:	2308      	movs	r3, #8
 800cd9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cda2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d168      	bne.n	800ce7c <f_open+0x1d0>
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	f003 0308 	and.w	r3, r3, #8
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d063      	beq.n	800ce7c <f_open+0x1d0>
				dw = GET_FATTIME();
 800cdb4:	f7fe f83c 	bl	800ae30 <get_fattime>
 800cdb8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cdba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdbc:	330e      	adds	r3, #14
 800cdbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fe fae6 	bl	800b392 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cdc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdc8:	3316      	adds	r3, #22
 800cdca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fe fae0 	bl	800b392 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cdd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdd4:	330b      	adds	r3, #11
 800cdd6:	2220      	movs	r2, #32
 800cdd8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cdde:	4611      	mov	r1, r2
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff fa35 	bl	800c250 <ld_clust>
 800cde6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cdec:	2200      	movs	r2, #0
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff fa4d 	bl	800c28e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf6:	331c      	adds	r3, #28
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fe fac9 	bl	800b392 <st_dword>
					fs->wflag = 1;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	2201      	movs	r2, #1
 800ce04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ce06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d037      	beq.n	800ce7c <f_open+0x1d0>
						dw = fs->winsect;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce10:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ce12:	f107 0314 	add.w	r3, r7, #20
 800ce16:	2200      	movs	r2, #0
 800ce18:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fe ff60 	bl	800bce0 <remove_chain>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ce26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d126      	bne.n	800ce7c <f_open+0x1d0>
							res = move_window(fs, dw);
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fe fd08 	bl	800b848 <move_window>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce42:	3a01      	subs	r2, #1
 800ce44:	60da      	str	r2, [r3, #12]
 800ce46:	e019      	b.n	800ce7c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ce48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d115      	bne.n	800ce7c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ce50:	7ebb      	ldrb	r3, [r7, #26]
 800ce52:	f003 0310 	and.w	r3, r3, #16
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <f_open+0x1b6>
					res = FR_NO_FILE;
 800ce5a:	2304      	movs	r3, #4
 800ce5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce60:	e00c      	b.n	800ce7c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ce62:	79fb      	ldrb	r3, [r7, #7]
 800ce64:	f003 0302 	and.w	r3, r3, #2
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d007      	beq.n	800ce7c <f_open+0x1d0>
 800ce6c:	7ebb      	ldrb	r3, [r7, #26]
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <f_open+0x1d0>
						res = FR_DENIED;
 800ce76:	2307      	movs	r3, #7
 800ce78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ce7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d126      	bne.n	800ced2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	f003 0308 	and.w	r3, r3, #8
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d003      	beq.n	800ce96 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ce9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cea4:	79fb      	ldrb	r3, [r7, #7]
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	bf8c      	ite	hi
 800ceaa:	2301      	movhi	r3, #1
 800ceac:	2300      	movls	r3, #0
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	f107 0314 	add.w	r3, r7, #20
 800ceb6:	4611      	mov	r1, r2
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fe fb93 	bl	800b5e4 <inc_lock>
 800cebe:	4602      	mov	r2, r0
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <f_open+0x226>
 800cecc:	2302      	movs	r3, #2
 800cece:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ced2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f040 8095 	bne.w	800d006 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cee0:	4611      	mov	r1, r2
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff f9b4 	bl	800c250 <ld_clust>
 800cee8:	4602      	mov	r2, r0
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ceee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cef0:	331c      	adds	r3, #28
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe fa0f 	bl	800b316 <ld_dword>
 800cef8:	4602      	mov	r2, r0
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	88da      	ldrh	r2, [r3, #6]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	79fa      	ldrb	r2, [r7, #7]
 800cf16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2200      	movs	r2, #0
 800cf22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3330      	adds	r3, #48	@ 0x30
 800cf2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf32:	2100      	movs	r1, #0
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fe fa79 	bl	800b42c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cf3a:	79fb      	ldrb	r3, [r7, #7]
 800cf3c:	f003 0320 	and.w	r3, r3, #32
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d060      	beq.n	800d006 <f_open+0x35a>
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d05c      	beq.n	800d006 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	68da      	ldr	r2, [r3, #12]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	895b      	ldrh	r3, [r3, #10]
 800cf58:	025b      	lsls	r3, r3, #9
 800cf5a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf68:	e016      	b.n	800cf98 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe fd25 	bl	800b9be <get_fat>
 800cf74:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cf76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d802      	bhi.n	800cf82 <f_open+0x2d6>
 800cf7c:	2302      	movs	r3, #2
 800cf7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cf82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf88:	d102      	bne.n	800cf90 <f_open+0x2e4>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cf92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d103      	bne.n	800cfa8 <f_open+0x2fc>
 800cfa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cfa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d8e0      	bhi.n	800cf6a <f_open+0x2be>
				}
				fp->clust = clst;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cfae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d127      	bne.n	800d006 <f_open+0x35a>
 800cfb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d022      	beq.n	800d006 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7fe fcdb 	bl	800b980 <clust2sect>
 800cfca:	6478      	str	r0, [r7, #68]	@ 0x44
 800cfcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d103      	bne.n	800cfda <f_open+0x32e>
						res = FR_INT_ERR;
 800cfd2:	2302      	movs	r3, #2
 800cfd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cfd8:	e015      	b.n	800d006 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cfda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfdc:	0a5a      	lsrs	r2, r3, #9
 800cfde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfe0:	441a      	add	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	7858      	ldrb	r0, [r3, #1]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6a1a      	ldr	r2, [r3, #32]
 800cff4:	2301      	movs	r3, #1
 800cff6:	f7fe f917 	bl	800b228 <disk_read>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <f_open+0x35a>
 800d000:	2301      	movs	r3, #1
 800d002:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d006:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d002      	beq.n	800d014 <f_open+0x368>
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d014:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3760      	adds	r7, #96	@ 0x60
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b08e      	sub	sp, #56	@ 0x38
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
 800d02c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	2200      	movs	r2, #0
 800d036:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f107 0214 	add.w	r2, r7, #20
 800d03e:	4611      	mov	r1, r2
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff fdb7 	bl	800cbb4 <validate>
 800d046:	4603      	mov	r3, r0
 800d048:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d04c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d050:	2b00      	cmp	r3, #0
 800d052:	d107      	bne.n	800d064 <f_read+0x44>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	7d5b      	ldrb	r3, [r3, #21]
 800d058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d05c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <f_read+0x4a>
 800d064:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d068:	e115      	b.n	800d296 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	7d1b      	ldrb	r3, [r3, #20]
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <f_read+0x5a>
 800d076:	2307      	movs	r3, #7
 800d078:	e10d      	b.n	800d296 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	68da      	ldr	r2, [r3, #12]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	f240 80fe 	bls.w	800d28c <f_read+0x26c>
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d094:	e0fa      	b.n	800d28c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	699b      	ldr	r3, [r3, #24]
 800d09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f040 80c6 	bne.w	800d230 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	699b      	ldr	r3, [r3, #24]
 800d0a8:	0a5b      	lsrs	r3, r3, #9
 800d0aa:	697a      	ldr	r2, [r7, #20]
 800d0ac:	8952      	ldrh	r2, [r2, #10]
 800d0ae:	3a01      	subs	r2, #1
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d12f      	bne.n	800d11a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d103      	bne.n	800d0ca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0c8:	e013      	b.n	800d0f2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d007      	beq.n	800d0e2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	699b      	ldr	r3, [r3, #24]
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f7fe fefe 	bl	800beda <clmt_clust>
 800d0de:	6338      	str	r0, [r7, #48]	@ 0x30
 800d0e0:	e007      	b.n	800d0f2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	69db      	ldr	r3, [r3, #28]
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	f7fe fc67 	bl	800b9be <get_fat>
 800d0f0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d804      	bhi.n	800d102 <f_read+0xe2>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	755a      	strb	r2, [r3, #21]
 800d0fe:	2302      	movs	r3, #2
 800d100:	e0c9      	b.n	800d296 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d108:	d104      	bne.n	800d114 <f_read+0xf4>
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2201      	movs	r2, #1
 800d10e:	755a      	strb	r2, [r3, #21]
 800d110:	2301      	movs	r3, #1
 800d112:	e0c0      	b.n	800d296 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d118:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d11a:	697a      	ldr	r2, [r7, #20]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	69db      	ldr	r3, [r3, #28]
 800d120:	4619      	mov	r1, r3
 800d122:	4610      	mov	r0, r2
 800d124:	f7fe fc2c 	bl	800b980 <clust2sect>
 800d128:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d104      	bne.n	800d13a <f_read+0x11a>
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2202      	movs	r2, #2
 800d134:	755a      	strb	r2, [r3, #21]
 800d136:	2302      	movs	r3, #2
 800d138:	e0ad      	b.n	800d296 <f_read+0x276>
			sect += csect;
 800d13a:	69ba      	ldr	r2, [r7, #24]
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	4413      	add	r3, r2
 800d140:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	0a5b      	lsrs	r3, r3, #9
 800d146:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d039      	beq.n	800d1c2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d14e:	69fa      	ldr	r2, [r7, #28]
 800d150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d152:	4413      	add	r3, r2
 800d154:	697a      	ldr	r2, [r7, #20]
 800d156:	8952      	ldrh	r2, [r2, #10]
 800d158:	4293      	cmp	r3, r2
 800d15a:	d905      	bls.n	800d168 <f_read+0x148>
					cc = fs->csize - csect;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	895b      	ldrh	r3, [r3, #10]
 800d160:	461a      	mov	r2, r3
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	7858      	ldrb	r0, [r3, #1]
 800d16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16e:	69ba      	ldr	r2, [r7, #24]
 800d170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d172:	f7fe f859 	bl	800b228 <disk_read>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d004      	beq.n	800d186 <f_read+0x166>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2201      	movs	r2, #1
 800d180:	755a      	strb	r2, [r3, #21]
 800d182:	2301      	movs	r3, #1
 800d184:	e087      	b.n	800d296 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	7d1b      	ldrb	r3, [r3, #20]
 800d18a:	b25b      	sxtb	r3, r3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	da14      	bge.n	800d1ba <f_read+0x19a>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6a1a      	ldr	r2, [r3, #32]
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	1ad3      	subs	r3, r2, r3
 800d198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d90d      	bls.n	800d1ba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6a1a      	ldr	r2, [r3, #32]
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	025b      	lsls	r3, r3, #9
 800d1a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1aa:	18d0      	adds	r0, r2, r3
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3330      	adds	r3, #48	@ 0x30
 800d1b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	f7fe f918 	bl	800b3ea <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1bc:	025b      	lsls	r3, r3, #9
 800d1be:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d1c0:	e050      	b.n	800d264 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	69ba      	ldr	r2, [r7, #24]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d02e      	beq.n	800d22a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	7d1b      	ldrb	r3, [r3, #20]
 800d1d0:	b25b      	sxtb	r3, r3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	da18      	bge.n	800d208 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	7858      	ldrb	r0, [r3, #1]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6a1a      	ldr	r2, [r3, #32]
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	f7fe f83f 	bl	800b268 <disk_write>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d004      	beq.n	800d1fa <f_read+0x1da>
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	755a      	strb	r2, [r3, #21]
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e04d      	b.n	800d296 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	7d1b      	ldrb	r3, [r3, #20]
 800d1fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d202:	b2da      	uxtb	r2, r3
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	7858      	ldrb	r0, [r3, #1]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d212:	2301      	movs	r3, #1
 800d214:	69ba      	ldr	r2, [r7, #24]
 800d216:	f7fe f807 	bl	800b228 <disk_read>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d004      	beq.n	800d22a <f_read+0x20a>
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2201      	movs	r2, #1
 800d224:	755a      	strb	r2, [r3, #21]
 800d226:	2301      	movs	r3, #1
 800d228:	e035      	b.n	800d296 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	69ba      	ldr	r2, [r7, #24]
 800d22e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d238:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d23c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d23e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	429a      	cmp	r2, r3
 800d244:	d901      	bls.n	800d24a <f_read+0x22a>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d258:	4413      	add	r3, r2
 800d25a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d25c:	4619      	mov	r1, r3
 800d25e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d260:	f7fe f8c3 	bl	800b3ea <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d268:	4413      	add	r3, r2
 800d26a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	699a      	ldr	r2, [r3, #24]
 800d270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d272:	441a      	add	r2, r3
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	619a      	str	r2, [r3, #24]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27e:	441a      	add	r2, r3
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f47f af01 	bne.w	800d096 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3738      	adds	r7, #56	@ 0x38
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b08c      	sub	sp, #48	@ 0x30
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	607a      	str	r2, [r7, #4]
 800d2aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f107 0210 	add.w	r2, r7, #16
 800d2bc:	4611      	mov	r1, r2
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7ff fc78 	bl	800cbb4 <validate>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d2ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d107      	bne.n	800d2e2 <f_write+0x44>
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	7d5b      	ldrb	r3, [r3, #21]
 800d2d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d2da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d002      	beq.n	800d2e8 <f_write+0x4a>
 800d2e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2e6:	e14b      	b.n	800d580 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	7d1b      	ldrb	r3, [r3, #20]
 800d2ec:	f003 0302 	and.w	r3, r3, #2
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d101      	bne.n	800d2f8 <f_write+0x5a>
 800d2f4:	2307      	movs	r3, #7
 800d2f6:	e143      	b.n	800d580 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	699a      	ldr	r2, [r3, #24]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	441a      	add	r2, r3
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	429a      	cmp	r2, r3
 800d306:	f080 812d 	bcs.w	800d564 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	699b      	ldr	r3, [r3, #24]
 800d30e:	43db      	mvns	r3, r3
 800d310:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d312:	e127      	b.n	800d564 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	699b      	ldr	r3, [r3, #24]
 800d318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f040 80e3 	bne.w	800d4e8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	699b      	ldr	r3, [r3, #24]
 800d326:	0a5b      	lsrs	r3, r3, #9
 800d328:	693a      	ldr	r2, [r7, #16]
 800d32a:	8952      	ldrh	r2, [r2, #10]
 800d32c:	3a01      	subs	r2, #1
 800d32e:	4013      	ands	r3, r2
 800d330:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d143      	bne.n	800d3c0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10c      	bne.n	800d35a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d11a      	bne.n	800d382 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2100      	movs	r1, #0
 800d350:	4618      	mov	r0, r3
 800d352:	f7fe fd2a 	bl	800bdaa <create_chain>
 800d356:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d358:	e013      	b.n	800d382 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d007      	beq.n	800d372 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	4619      	mov	r1, r3
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f7fe fdb6 	bl	800beda <clmt_clust>
 800d36e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d370:	e007      	b.n	800d382 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	69db      	ldr	r3, [r3, #28]
 800d378:	4619      	mov	r1, r3
 800d37a:	4610      	mov	r0, r2
 800d37c:	f7fe fd15 	bl	800bdaa <create_chain>
 800d380:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d384:	2b00      	cmp	r3, #0
 800d386:	f000 80f2 	beq.w	800d56e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d104      	bne.n	800d39a <f_write+0xfc>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2202      	movs	r2, #2
 800d394:	755a      	strb	r2, [r3, #21]
 800d396:	2302      	movs	r3, #2
 800d398:	e0f2      	b.n	800d580 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a0:	d104      	bne.n	800d3ac <f_write+0x10e>
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	755a      	strb	r2, [r3, #21]
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e0e9      	b.n	800d580 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d102      	bne.n	800d3c0 <f_write+0x122>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	7d1b      	ldrb	r3, [r3, #20]
 800d3c4:	b25b      	sxtb	r3, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	da18      	bge.n	800d3fc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	7858      	ldrb	r0, [r3, #1]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6a1a      	ldr	r2, [r3, #32]
 800d3d8:	2301      	movs	r3, #1
 800d3da:	f7fd ff45 	bl	800b268 <disk_write>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d004      	beq.n	800d3ee <f_write+0x150>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	755a      	strb	r2, [r3, #21]
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e0c8      	b.n	800d580 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	7d1b      	ldrb	r3, [r3, #20]
 800d3f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	69db      	ldr	r3, [r3, #28]
 800d402:	4619      	mov	r1, r3
 800d404:	4610      	mov	r0, r2
 800d406:	f7fe fabb 	bl	800b980 <clust2sect>
 800d40a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d104      	bne.n	800d41c <f_write+0x17e>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2202      	movs	r2, #2
 800d416:	755a      	strb	r2, [r3, #21]
 800d418:	2302      	movs	r3, #2
 800d41a:	e0b1      	b.n	800d580 <f_write+0x2e2>
			sect += csect;
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	4413      	add	r3, r2
 800d422:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	0a5b      	lsrs	r3, r3, #9
 800d428:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d42a:	6a3b      	ldr	r3, [r7, #32]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d03c      	beq.n	800d4aa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	6a3b      	ldr	r3, [r7, #32]
 800d434:	4413      	add	r3, r2
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	8952      	ldrh	r2, [r2, #10]
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d905      	bls.n	800d44a <f_write+0x1ac>
					cc = fs->csize - csect;
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	895b      	ldrh	r3, [r3, #10]
 800d442:	461a      	mov	r2, r3
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	7858      	ldrb	r0, [r3, #1]
 800d44e:	6a3b      	ldr	r3, [r7, #32]
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	69f9      	ldr	r1, [r7, #28]
 800d454:	f7fd ff08 	bl	800b268 <disk_write>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d004      	beq.n	800d468 <f_write+0x1ca>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2201      	movs	r2, #1
 800d462:	755a      	strb	r2, [r3, #21]
 800d464:	2301      	movs	r3, #1
 800d466:	e08b      	b.n	800d580 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6a1a      	ldr	r2, [r3, #32]
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	6a3a      	ldr	r2, [r7, #32]
 800d472:	429a      	cmp	r2, r3
 800d474:	d915      	bls.n	800d4a2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	6a1a      	ldr	r2, [r3, #32]
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	025b      	lsls	r3, r3, #9
 800d486:	69fa      	ldr	r2, [r7, #28]
 800d488:	4413      	add	r3, r2
 800d48a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d48e:	4619      	mov	r1, r3
 800d490:	f7fd ffab 	bl	800b3ea <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	7d1b      	ldrb	r3, [r3, #20]
 800d498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d4a2:	6a3b      	ldr	r3, [r7, #32]
 800d4a4:	025b      	lsls	r3, r3, #9
 800d4a6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d4a8:	e03f      	b.n	800d52a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6a1b      	ldr	r3, [r3, #32]
 800d4ae:	697a      	ldr	r2, [r7, #20]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d016      	beq.n	800d4e2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	699a      	ldr	r2, [r3, #24]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d210      	bcs.n	800d4e2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	7858      	ldrb	r0, [r3, #1]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	697a      	ldr	r2, [r7, #20]
 800d4ce:	f7fd feab 	bl	800b228 <disk_read>
 800d4d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d004      	beq.n	800d4e2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	755a      	strb	r2, [r3, #21]
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e04e      	b.n	800d580 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	699b      	ldr	r3, [r3, #24]
 800d4ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d4f4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d901      	bls.n	800d502 <f_write+0x264>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	699b      	ldr	r3, [r3, #24]
 800d50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d510:	4413      	add	r3, r2
 800d512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d514:	69f9      	ldr	r1, [r7, #28]
 800d516:	4618      	mov	r0, r3
 800d518:	f7fd ff67 	bl	800b3ea <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
 800d520:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d524:	b2da      	uxtb	r2, r3
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d52a:	69fa      	ldr	r2, [r7, #28]
 800d52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52e:	4413      	add	r3, r2
 800d530:	61fb      	str	r3, [r7, #28]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	699a      	ldr	r2, [r3, #24]
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	441a      	add	r2, r3
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	619a      	str	r2, [r3, #24]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	68da      	ldr	r2, [r3, #12]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	699b      	ldr	r3, [r3, #24]
 800d546:	429a      	cmp	r2, r3
 800d548:	bf38      	it	cc
 800d54a:	461a      	movcc	r2, r3
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	60da      	str	r2, [r3, #12]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d556:	441a      	add	r2, r3
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f47f aed4 	bne.w	800d314 <f_write+0x76>
 800d56c:	e000      	b.n	800d570 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d56e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	7d1b      	ldrb	r3, [r3, #20]
 800d574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3730      	adds	r7, #48	@ 0x30
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b086      	sub	sp, #24
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f107 0208 	add.w	r2, r7, #8
 800d596:	4611      	mov	r1, r2
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fb0b 	bl	800cbb4 <validate>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d5a2:	7dfb      	ldrb	r3, [r7, #23]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d168      	bne.n	800d67a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	7d1b      	ldrb	r3, [r3, #20]
 800d5ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d062      	beq.n	800d67a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	7d1b      	ldrb	r3, [r3, #20]
 800d5b8:	b25b      	sxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	da15      	bge.n	800d5ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	7858      	ldrb	r0, [r3, #1]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a1a      	ldr	r2, [r3, #32]
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	f7fd fe4b 	bl	800b268 <disk_write>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d001      	beq.n	800d5dc <f_sync+0x54>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e04f      	b.n	800d67c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	7d1b      	ldrb	r3, [r3, #20]
 800d5e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d5ea:	f7fd fc21 	bl	800ae30 <get_fattime>
 800d5ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	f7fe f925 	bl	800b848 <move_window>
 800d5fe:	4603      	mov	r3, r0
 800d600:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d602:	7dfb      	ldrb	r3, [r7, #23]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d138      	bne.n	800d67a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d60c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	330b      	adds	r3, #11
 800d612:	781a      	ldrb	r2, [r3, #0]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	330b      	adds	r3, #11
 800d618:	f042 0220 	orr.w	r2, r2, #32
 800d61c:	b2d2      	uxtb	r2, r2
 800d61e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6818      	ldr	r0, [r3, #0]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	461a      	mov	r2, r3
 800d62a:	68f9      	ldr	r1, [r7, #12]
 800d62c:	f7fe fe2f 	bl	800c28e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f103 021c 	add.w	r2, r3, #28
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	4619      	mov	r1, r3
 800d63c:	4610      	mov	r0, r2
 800d63e:	f7fd fea8 	bl	800b392 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3316      	adds	r3, #22
 800d646:	6939      	ldr	r1, [r7, #16]
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fd fea2 	bl	800b392 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3312      	adds	r3, #18
 800d652:	2100      	movs	r1, #0
 800d654:	4618      	mov	r0, r3
 800d656:	f7fd fe81 	bl	800b35c <st_word>
					fs->wflag = 1;
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	2201      	movs	r2, #1
 800d65e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	4618      	mov	r0, r3
 800d664:	f7fe f91e 	bl	800b8a4 <sync_fs>
 800d668:	4603      	mov	r3, r0
 800d66a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	7d1b      	ldrb	r3, [r3, #20]
 800d670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d674:	b2da      	uxtb	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7ff ff7b 	bl	800d588 <f_sync>
 800d692:	4603      	mov	r3, r0
 800d694:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d696:	7bfb      	ldrb	r3, [r7, #15]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d118      	bne.n	800d6ce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f107 0208 	add.w	r2, r7, #8
 800d6a2:	4611      	mov	r1, r2
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff fa85 	bl	800cbb4 <validate>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10c      	bne.n	800d6ce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fe f821 	bl	800b700 <dec_lock>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d6c2:	7bfb      	ldrb	r3, [r7, #15]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d102      	bne.n	800d6ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3710      	adds	r7, #16
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b087      	sub	sp, #28
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6ee:	4b1f      	ldr	r3, [pc, #124]	@ (800d76c <FATFS_LinkDriverEx+0x94>)
 800d6f0:	7a5b      	ldrb	r3, [r3, #9]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d131      	bne.n	800d75c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6f8:	4b1c      	ldr	r3, [pc, #112]	@ (800d76c <FATFS_LinkDriverEx+0x94>)
 800d6fa:	7a5b      	ldrb	r3, [r3, #9]
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	461a      	mov	r2, r3
 800d700:	4b1a      	ldr	r3, [pc, #104]	@ (800d76c <FATFS_LinkDriverEx+0x94>)
 800d702:	2100      	movs	r1, #0
 800d704:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d706:	4b19      	ldr	r3, [pc, #100]	@ (800d76c <FATFS_LinkDriverEx+0x94>)
 800d708:	7a5b      	ldrb	r3, [r3, #9]
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	4a17      	ldr	r2, [pc, #92]	@ (800d76c <FATFS_LinkDriverEx+0x94>)
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	4413      	add	r3, r2
 800d712:	68fa      	ldr	r2, [r7, #12]
 800d714:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d716:	4b15      	ldr	r3, [pc, #84]	@ (800d76c <FATFS_LinkDriverEx+0x94>)
 800d718:	7a5b      	ldrb	r3, [r3, #9]
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	461a      	mov	r2, r3
 800d71e:	4b13      	ldr	r3, [pc, #76]	@ (800d76c <FATFS_LinkDriverEx+0x94>)
 800d720:	4413      	add	r3, r2
 800d722:	79fa      	ldrb	r2, [r7, #7]
 800d724:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d726:	4b11      	ldr	r3, [pc, #68]	@ (800d76c <FATFS_LinkDriverEx+0x94>)
 800d728:	7a5b      	ldrb	r3, [r3, #9]
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	b2d1      	uxtb	r1, r2
 800d730:	4a0e      	ldr	r2, [pc, #56]	@ (800d76c <FATFS_LinkDriverEx+0x94>)
 800d732:	7251      	strb	r1, [r2, #9]
 800d734:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d736:	7dbb      	ldrb	r3, [r7, #22]
 800d738:	3330      	adds	r3, #48	@ 0x30
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	3301      	adds	r3, #1
 800d744:	223a      	movs	r2, #58	@ 0x3a
 800d746:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	3302      	adds	r3, #2
 800d74c:	222f      	movs	r2, #47	@ 0x2f
 800d74e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	3303      	adds	r3, #3
 800d754:	2200      	movs	r2, #0
 800d756:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d758:	2300      	movs	r3, #0
 800d75a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	371c      	adds	r7, #28
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	20000324 	.word	0x20000324

0800d770 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d77a:	2200      	movs	r2, #0
 800d77c:	6839      	ldr	r1, [r7, #0]
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7ff ffaa 	bl	800d6d8 <FATFS_LinkDriverEx>
 800d784:	4603      	mov	r3, r0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
	...

0800d790 <siprintf>:
 800d790:	b40e      	push	{r1, r2, r3}
 800d792:	b510      	push	{r4, lr}
 800d794:	b09d      	sub	sp, #116	@ 0x74
 800d796:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d798:	9002      	str	r0, [sp, #8]
 800d79a:	9006      	str	r0, [sp, #24]
 800d79c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d7a0:	480a      	ldr	r0, [pc, #40]	@ (800d7cc <siprintf+0x3c>)
 800d7a2:	9107      	str	r1, [sp, #28]
 800d7a4:	9104      	str	r1, [sp, #16]
 800d7a6:	490a      	ldr	r1, [pc, #40]	@ (800d7d0 <siprintf+0x40>)
 800d7a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ac:	9105      	str	r1, [sp, #20]
 800d7ae:	2400      	movs	r4, #0
 800d7b0:	a902      	add	r1, sp, #8
 800d7b2:	6800      	ldr	r0, [r0, #0]
 800d7b4:	9301      	str	r3, [sp, #4]
 800d7b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d7b8:	f000 f99c 	bl	800daf4 <_svfiprintf_r>
 800d7bc:	9b02      	ldr	r3, [sp, #8]
 800d7be:	701c      	strb	r4, [r3, #0]
 800d7c0:	b01d      	add	sp, #116	@ 0x74
 800d7c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7c6:	b003      	add	sp, #12
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	20000010 	.word	0x20000010
 800d7d0:	ffff0208 	.word	0xffff0208

0800d7d4 <memset>:
 800d7d4:	4402      	add	r2, r0
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d100      	bne.n	800d7de <memset+0xa>
 800d7dc:	4770      	bx	lr
 800d7de:	f803 1b01 	strb.w	r1, [r3], #1
 800d7e2:	e7f9      	b.n	800d7d8 <memset+0x4>

0800d7e4 <__errno>:
 800d7e4:	4b01      	ldr	r3, [pc, #4]	@ (800d7ec <__errno+0x8>)
 800d7e6:	6818      	ldr	r0, [r3, #0]
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	20000010 	.word	0x20000010

0800d7f0 <__libc_init_array>:
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	4d0d      	ldr	r5, [pc, #52]	@ (800d828 <__libc_init_array+0x38>)
 800d7f4:	4c0d      	ldr	r4, [pc, #52]	@ (800d82c <__libc_init_array+0x3c>)
 800d7f6:	1b64      	subs	r4, r4, r5
 800d7f8:	10a4      	asrs	r4, r4, #2
 800d7fa:	2600      	movs	r6, #0
 800d7fc:	42a6      	cmp	r6, r4
 800d7fe:	d109      	bne.n	800d814 <__libc_init_array+0x24>
 800d800:	4d0b      	ldr	r5, [pc, #44]	@ (800d830 <__libc_init_array+0x40>)
 800d802:	4c0c      	ldr	r4, [pc, #48]	@ (800d834 <__libc_init_array+0x44>)
 800d804:	f000 fc6c 	bl	800e0e0 <_init>
 800d808:	1b64      	subs	r4, r4, r5
 800d80a:	10a4      	asrs	r4, r4, #2
 800d80c:	2600      	movs	r6, #0
 800d80e:	42a6      	cmp	r6, r4
 800d810:	d105      	bne.n	800d81e <__libc_init_array+0x2e>
 800d812:	bd70      	pop	{r4, r5, r6, pc}
 800d814:	f855 3b04 	ldr.w	r3, [r5], #4
 800d818:	4798      	blx	r3
 800d81a:	3601      	adds	r6, #1
 800d81c:	e7ee      	b.n	800d7fc <__libc_init_array+0xc>
 800d81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d822:	4798      	blx	r3
 800d824:	3601      	adds	r6, #1
 800d826:	e7f2      	b.n	800d80e <__libc_init_array+0x1e>
 800d828:	0800e568 	.word	0x0800e568
 800d82c:	0800e568 	.word	0x0800e568
 800d830:	0800e568 	.word	0x0800e568
 800d834:	0800e56c 	.word	0x0800e56c

0800d838 <__retarget_lock_acquire_recursive>:
 800d838:	4770      	bx	lr

0800d83a <__retarget_lock_release_recursive>:
 800d83a:	4770      	bx	lr

0800d83c <strcpy>:
 800d83c:	4603      	mov	r3, r0
 800d83e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d842:	f803 2b01 	strb.w	r2, [r3], #1
 800d846:	2a00      	cmp	r2, #0
 800d848:	d1f9      	bne.n	800d83e <strcpy+0x2>
 800d84a:	4770      	bx	lr

0800d84c <_free_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	4605      	mov	r5, r0
 800d850:	2900      	cmp	r1, #0
 800d852:	d041      	beq.n	800d8d8 <_free_r+0x8c>
 800d854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d858:	1f0c      	subs	r4, r1, #4
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	bfb8      	it	lt
 800d85e:	18e4      	addlt	r4, r4, r3
 800d860:	f000 f8e0 	bl	800da24 <__malloc_lock>
 800d864:	4a1d      	ldr	r2, [pc, #116]	@ (800d8dc <_free_r+0x90>)
 800d866:	6813      	ldr	r3, [r2, #0]
 800d868:	b933      	cbnz	r3, 800d878 <_free_r+0x2c>
 800d86a:	6063      	str	r3, [r4, #4]
 800d86c:	6014      	str	r4, [r2, #0]
 800d86e:	4628      	mov	r0, r5
 800d870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d874:	f000 b8dc 	b.w	800da30 <__malloc_unlock>
 800d878:	42a3      	cmp	r3, r4
 800d87a:	d908      	bls.n	800d88e <_free_r+0x42>
 800d87c:	6820      	ldr	r0, [r4, #0]
 800d87e:	1821      	adds	r1, r4, r0
 800d880:	428b      	cmp	r3, r1
 800d882:	bf01      	itttt	eq
 800d884:	6819      	ldreq	r1, [r3, #0]
 800d886:	685b      	ldreq	r3, [r3, #4]
 800d888:	1809      	addeq	r1, r1, r0
 800d88a:	6021      	streq	r1, [r4, #0]
 800d88c:	e7ed      	b.n	800d86a <_free_r+0x1e>
 800d88e:	461a      	mov	r2, r3
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	b10b      	cbz	r3, 800d898 <_free_r+0x4c>
 800d894:	42a3      	cmp	r3, r4
 800d896:	d9fa      	bls.n	800d88e <_free_r+0x42>
 800d898:	6811      	ldr	r1, [r2, #0]
 800d89a:	1850      	adds	r0, r2, r1
 800d89c:	42a0      	cmp	r0, r4
 800d89e:	d10b      	bne.n	800d8b8 <_free_r+0x6c>
 800d8a0:	6820      	ldr	r0, [r4, #0]
 800d8a2:	4401      	add	r1, r0
 800d8a4:	1850      	adds	r0, r2, r1
 800d8a6:	4283      	cmp	r3, r0
 800d8a8:	6011      	str	r1, [r2, #0]
 800d8aa:	d1e0      	bne.n	800d86e <_free_r+0x22>
 800d8ac:	6818      	ldr	r0, [r3, #0]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	6053      	str	r3, [r2, #4]
 800d8b2:	4408      	add	r0, r1
 800d8b4:	6010      	str	r0, [r2, #0]
 800d8b6:	e7da      	b.n	800d86e <_free_r+0x22>
 800d8b8:	d902      	bls.n	800d8c0 <_free_r+0x74>
 800d8ba:	230c      	movs	r3, #12
 800d8bc:	602b      	str	r3, [r5, #0]
 800d8be:	e7d6      	b.n	800d86e <_free_r+0x22>
 800d8c0:	6820      	ldr	r0, [r4, #0]
 800d8c2:	1821      	adds	r1, r4, r0
 800d8c4:	428b      	cmp	r3, r1
 800d8c6:	bf04      	itt	eq
 800d8c8:	6819      	ldreq	r1, [r3, #0]
 800d8ca:	685b      	ldreq	r3, [r3, #4]
 800d8cc:	6063      	str	r3, [r4, #4]
 800d8ce:	bf04      	itt	eq
 800d8d0:	1809      	addeq	r1, r1, r0
 800d8d2:	6021      	streq	r1, [r4, #0]
 800d8d4:	6054      	str	r4, [r2, #4]
 800d8d6:	e7ca      	b.n	800d86e <_free_r+0x22>
 800d8d8:	bd38      	pop	{r3, r4, r5, pc}
 800d8da:	bf00      	nop
 800d8dc:	20000474 	.word	0x20000474

0800d8e0 <sbrk_aligned>:
 800d8e0:	b570      	push	{r4, r5, r6, lr}
 800d8e2:	4e0f      	ldr	r6, [pc, #60]	@ (800d920 <sbrk_aligned+0x40>)
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	6831      	ldr	r1, [r6, #0]
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	b911      	cbnz	r1, 800d8f2 <sbrk_aligned+0x12>
 800d8ec:	f000 fba4 	bl	800e038 <_sbrk_r>
 800d8f0:	6030      	str	r0, [r6, #0]
 800d8f2:	4621      	mov	r1, r4
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	f000 fb9f 	bl	800e038 <_sbrk_r>
 800d8fa:	1c43      	adds	r3, r0, #1
 800d8fc:	d103      	bne.n	800d906 <sbrk_aligned+0x26>
 800d8fe:	f04f 34ff 	mov.w	r4, #4294967295
 800d902:	4620      	mov	r0, r4
 800d904:	bd70      	pop	{r4, r5, r6, pc}
 800d906:	1cc4      	adds	r4, r0, #3
 800d908:	f024 0403 	bic.w	r4, r4, #3
 800d90c:	42a0      	cmp	r0, r4
 800d90e:	d0f8      	beq.n	800d902 <sbrk_aligned+0x22>
 800d910:	1a21      	subs	r1, r4, r0
 800d912:	4628      	mov	r0, r5
 800d914:	f000 fb90 	bl	800e038 <_sbrk_r>
 800d918:	3001      	adds	r0, #1
 800d91a:	d1f2      	bne.n	800d902 <sbrk_aligned+0x22>
 800d91c:	e7ef      	b.n	800d8fe <sbrk_aligned+0x1e>
 800d91e:	bf00      	nop
 800d920:	20000470 	.word	0x20000470

0800d924 <_malloc_r>:
 800d924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d928:	1ccd      	adds	r5, r1, #3
 800d92a:	f025 0503 	bic.w	r5, r5, #3
 800d92e:	3508      	adds	r5, #8
 800d930:	2d0c      	cmp	r5, #12
 800d932:	bf38      	it	cc
 800d934:	250c      	movcc	r5, #12
 800d936:	2d00      	cmp	r5, #0
 800d938:	4606      	mov	r6, r0
 800d93a:	db01      	blt.n	800d940 <_malloc_r+0x1c>
 800d93c:	42a9      	cmp	r1, r5
 800d93e:	d904      	bls.n	800d94a <_malloc_r+0x26>
 800d940:	230c      	movs	r3, #12
 800d942:	6033      	str	r3, [r6, #0]
 800d944:	2000      	movs	r0, #0
 800d946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d94a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da20 <_malloc_r+0xfc>
 800d94e:	f000 f869 	bl	800da24 <__malloc_lock>
 800d952:	f8d8 3000 	ldr.w	r3, [r8]
 800d956:	461c      	mov	r4, r3
 800d958:	bb44      	cbnz	r4, 800d9ac <_malloc_r+0x88>
 800d95a:	4629      	mov	r1, r5
 800d95c:	4630      	mov	r0, r6
 800d95e:	f7ff ffbf 	bl	800d8e0 <sbrk_aligned>
 800d962:	1c43      	adds	r3, r0, #1
 800d964:	4604      	mov	r4, r0
 800d966:	d158      	bne.n	800da1a <_malloc_r+0xf6>
 800d968:	f8d8 4000 	ldr.w	r4, [r8]
 800d96c:	4627      	mov	r7, r4
 800d96e:	2f00      	cmp	r7, #0
 800d970:	d143      	bne.n	800d9fa <_malloc_r+0xd6>
 800d972:	2c00      	cmp	r4, #0
 800d974:	d04b      	beq.n	800da0e <_malloc_r+0xea>
 800d976:	6823      	ldr	r3, [r4, #0]
 800d978:	4639      	mov	r1, r7
 800d97a:	4630      	mov	r0, r6
 800d97c:	eb04 0903 	add.w	r9, r4, r3
 800d980:	f000 fb5a 	bl	800e038 <_sbrk_r>
 800d984:	4581      	cmp	r9, r0
 800d986:	d142      	bne.n	800da0e <_malloc_r+0xea>
 800d988:	6821      	ldr	r1, [r4, #0]
 800d98a:	1a6d      	subs	r5, r5, r1
 800d98c:	4629      	mov	r1, r5
 800d98e:	4630      	mov	r0, r6
 800d990:	f7ff ffa6 	bl	800d8e0 <sbrk_aligned>
 800d994:	3001      	adds	r0, #1
 800d996:	d03a      	beq.n	800da0e <_malloc_r+0xea>
 800d998:	6823      	ldr	r3, [r4, #0]
 800d99a:	442b      	add	r3, r5
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	f8d8 3000 	ldr.w	r3, [r8]
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	bb62      	cbnz	r2, 800da00 <_malloc_r+0xdc>
 800d9a6:	f8c8 7000 	str.w	r7, [r8]
 800d9aa:	e00f      	b.n	800d9cc <_malloc_r+0xa8>
 800d9ac:	6822      	ldr	r2, [r4, #0]
 800d9ae:	1b52      	subs	r2, r2, r5
 800d9b0:	d420      	bmi.n	800d9f4 <_malloc_r+0xd0>
 800d9b2:	2a0b      	cmp	r2, #11
 800d9b4:	d917      	bls.n	800d9e6 <_malloc_r+0xc2>
 800d9b6:	1961      	adds	r1, r4, r5
 800d9b8:	42a3      	cmp	r3, r4
 800d9ba:	6025      	str	r5, [r4, #0]
 800d9bc:	bf18      	it	ne
 800d9be:	6059      	strne	r1, [r3, #4]
 800d9c0:	6863      	ldr	r3, [r4, #4]
 800d9c2:	bf08      	it	eq
 800d9c4:	f8c8 1000 	streq.w	r1, [r8]
 800d9c8:	5162      	str	r2, [r4, r5]
 800d9ca:	604b      	str	r3, [r1, #4]
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	f000 f82f 	bl	800da30 <__malloc_unlock>
 800d9d2:	f104 000b 	add.w	r0, r4, #11
 800d9d6:	1d23      	adds	r3, r4, #4
 800d9d8:	f020 0007 	bic.w	r0, r0, #7
 800d9dc:	1ac2      	subs	r2, r0, r3
 800d9de:	bf1c      	itt	ne
 800d9e0:	1a1b      	subne	r3, r3, r0
 800d9e2:	50a3      	strne	r3, [r4, r2]
 800d9e4:	e7af      	b.n	800d946 <_malloc_r+0x22>
 800d9e6:	6862      	ldr	r2, [r4, #4]
 800d9e8:	42a3      	cmp	r3, r4
 800d9ea:	bf0c      	ite	eq
 800d9ec:	f8c8 2000 	streq.w	r2, [r8]
 800d9f0:	605a      	strne	r2, [r3, #4]
 800d9f2:	e7eb      	b.n	800d9cc <_malloc_r+0xa8>
 800d9f4:	4623      	mov	r3, r4
 800d9f6:	6864      	ldr	r4, [r4, #4]
 800d9f8:	e7ae      	b.n	800d958 <_malloc_r+0x34>
 800d9fa:	463c      	mov	r4, r7
 800d9fc:	687f      	ldr	r7, [r7, #4]
 800d9fe:	e7b6      	b.n	800d96e <_malloc_r+0x4a>
 800da00:	461a      	mov	r2, r3
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	42a3      	cmp	r3, r4
 800da06:	d1fb      	bne.n	800da00 <_malloc_r+0xdc>
 800da08:	2300      	movs	r3, #0
 800da0a:	6053      	str	r3, [r2, #4]
 800da0c:	e7de      	b.n	800d9cc <_malloc_r+0xa8>
 800da0e:	230c      	movs	r3, #12
 800da10:	6033      	str	r3, [r6, #0]
 800da12:	4630      	mov	r0, r6
 800da14:	f000 f80c 	bl	800da30 <__malloc_unlock>
 800da18:	e794      	b.n	800d944 <_malloc_r+0x20>
 800da1a:	6005      	str	r5, [r0, #0]
 800da1c:	e7d6      	b.n	800d9cc <_malloc_r+0xa8>
 800da1e:	bf00      	nop
 800da20:	20000474 	.word	0x20000474

0800da24 <__malloc_lock>:
 800da24:	4801      	ldr	r0, [pc, #4]	@ (800da2c <__malloc_lock+0x8>)
 800da26:	f7ff bf07 	b.w	800d838 <__retarget_lock_acquire_recursive>
 800da2a:	bf00      	nop
 800da2c:	2000046c 	.word	0x2000046c

0800da30 <__malloc_unlock>:
 800da30:	4801      	ldr	r0, [pc, #4]	@ (800da38 <__malloc_unlock+0x8>)
 800da32:	f7ff bf02 	b.w	800d83a <__retarget_lock_release_recursive>
 800da36:	bf00      	nop
 800da38:	2000046c 	.word	0x2000046c

0800da3c <__ssputs_r>:
 800da3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da40:	688e      	ldr	r6, [r1, #8]
 800da42:	461f      	mov	r7, r3
 800da44:	42be      	cmp	r6, r7
 800da46:	680b      	ldr	r3, [r1, #0]
 800da48:	4682      	mov	sl, r0
 800da4a:	460c      	mov	r4, r1
 800da4c:	4690      	mov	r8, r2
 800da4e:	d82d      	bhi.n	800daac <__ssputs_r+0x70>
 800da50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da58:	d026      	beq.n	800daa8 <__ssputs_r+0x6c>
 800da5a:	6965      	ldr	r5, [r4, #20]
 800da5c:	6909      	ldr	r1, [r1, #16]
 800da5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da62:	eba3 0901 	sub.w	r9, r3, r1
 800da66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da6a:	1c7b      	adds	r3, r7, #1
 800da6c:	444b      	add	r3, r9
 800da6e:	106d      	asrs	r5, r5, #1
 800da70:	429d      	cmp	r5, r3
 800da72:	bf38      	it	cc
 800da74:	461d      	movcc	r5, r3
 800da76:	0553      	lsls	r3, r2, #21
 800da78:	d527      	bpl.n	800daca <__ssputs_r+0x8e>
 800da7a:	4629      	mov	r1, r5
 800da7c:	f7ff ff52 	bl	800d924 <_malloc_r>
 800da80:	4606      	mov	r6, r0
 800da82:	b360      	cbz	r0, 800dade <__ssputs_r+0xa2>
 800da84:	6921      	ldr	r1, [r4, #16]
 800da86:	464a      	mov	r2, r9
 800da88:	f000 fae6 	bl	800e058 <memcpy>
 800da8c:	89a3      	ldrh	r3, [r4, #12]
 800da8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da96:	81a3      	strh	r3, [r4, #12]
 800da98:	6126      	str	r6, [r4, #16]
 800da9a:	6165      	str	r5, [r4, #20]
 800da9c:	444e      	add	r6, r9
 800da9e:	eba5 0509 	sub.w	r5, r5, r9
 800daa2:	6026      	str	r6, [r4, #0]
 800daa4:	60a5      	str	r5, [r4, #8]
 800daa6:	463e      	mov	r6, r7
 800daa8:	42be      	cmp	r6, r7
 800daaa:	d900      	bls.n	800daae <__ssputs_r+0x72>
 800daac:	463e      	mov	r6, r7
 800daae:	6820      	ldr	r0, [r4, #0]
 800dab0:	4632      	mov	r2, r6
 800dab2:	4641      	mov	r1, r8
 800dab4:	f000 faa6 	bl	800e004 <memmove>
 800dab8:	68a3      	ldr	r3, [r4, #8]
 800daba:	1b9b      	subs	r3, r3, r6
 800dabc:	60a3      	str	r3, [r4, #8]
 800dabe:	6823      	ldr	r3, [r4, #0]
 800dac0:	4433      	add	r3, r6
 800dac2:	6023      	str	r3, [r4, #0]
 800dac4:	2000      	movs	r0, #0
 800dac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daca:	462a      	mov	r2, r5
 800dacc:	f000 fad2 	bl	800e074 <_realloc_r>
 800dad0:	4606      	mov	r6, r0
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d1e0      	bne.n	800da98 <__ssputs_r+0x5c>
 800dad6:	6921      	ldr	r1, [r4, #16]
 800dad8:	4650      	mov	r0, sl
 800dada:	f7ff feb7 	bl	800d84c <_free_r>
 800dade:	230c      	movs	r3, #12
 800dae0:	f8ca 3000 	str.w	r3, [sl]
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	f04f 30ff 	mov.w	r0, #4294967295
 800daf0:	e7e9      	b.n	800dac6 <__ssputs_r+0x8a>
	...

0800daf4 <_svfiprintf_r>:
 800daf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf8:	4698      	mov	r8, r3
 800dafa:	898b      	ldrh	r3, [r1, #12]
 800dafc:	061b      	lsls	r3, r3, #24
 800dafe:	b09d      	sub	sp, #116	@ 0x74
 800db00:	4607      	mov	r7, r0
 800db02:	460d      	mov	r5, r1
 800db04:	4614      	mov	r4, r2
 800db06:	d510      	bpl.n	800db2a <_svfiprintf_r+0x36>
 800db08:	690b      	ldr	r3, [r1, #16]
 800db0a:	b973      	cbnz	r3, 800db2a <_svfiprintf_r+0x36>
 800db0c:	2140      	movs	r1, #64	@ 0x40
 800db0e:	f7ff ff09 	bl	800d924 <_malloc_r>
 800db12:	6028      	str	r0, [r5, #0]
 800db14:	6128      	str	r0, [r5, #16]
 800db16:	b930      	cbnz	r0, 800db26 <_svfiprintf_r+0x32>
 800db18:	230c      	movs	r3, #12
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	b01d      	add	sp, #116	@ 0x74
 800db22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db26:	2340      	movs	r3, #64	@ 0x40
 800db28:	616b      	str	r3, [r5, #20]
 800db2a:	2300      	movs	r3, #0
 800db2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db2e:	2320      	movs	r3, #32
 800db30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db34:	f8cd 800c 	str.w	r8, [sp, #12]
 800db38:	2330      	movs	r3, #48	@ 0x30
 800db3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dcd8 <_svfiprintf_r+0x1e4>
 800db3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db42:	f04f 0901 	mov.w	r9, #1
 800db46:	4623      	mov	r3, r4
 800db48:	469a      	mov	sl, r3
 800db4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db4e:	b10a      	cbz	r2, 800db54 <_svfiprintf_r+0x60>
 800db50:	2a25      	cmp	r2, #37	@ 0x25
 800db52:	d1f9      	bne.n	800db48 <_svfiprintf_r+0x54>
 800db54:	ebba 0b04 	subs.w	fp, sl, r4
 800db58:	d00b      	beq.n	800db72 <_svfiprintf_r+0x7e>
 800db5a:	465b      	mov	r3, fp
 800db5c:	4622      	mov	r2, r4
 800db5e:	4629      	mov	r1, r5
 800db60:	4638      	mov	r0, r7
 800db62:	f7ff ff6b 	bl	800da3c <__ssputs_r>
 800db66:	3001      	adds	r0, #1
 800db68:	f000 80a7 	beq.w	800dcba <_svfiprintf_r+0x1c6>
 800db6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db6e:	445a      	add	r2, fp
 800db70:	9209      	str	r2, [sp, #36]	@ 0x24
 800db72:	f89a 3000 	ldrb.w	r3, [sl]
 800db76:	2b00      	cmp	r3, #0
 800db78:	f000 809f 	beq.w	800dcba <_svfiprintf_r+0x1c6>
 800db7c:	2300      	movs	r3, #0
 800db7e:	f04f 32ff 	mov.w	r2, #4294967295
 800db82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db86:	f10a 0a01 	add.w	sl, sl, #1
 800db8a:	9304      	str	r3, [sp, #16]
 800db8c:	9307      	str	r3, [sp, #28]
 800db8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db92:	931a      	str	r3, [sp, #104]	@ 0x68
 800db94:	4654      	mov	r4, sl
 800db96:	2205      	movs	r2, #5
 800db98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9c:	484e      	ldr	r0, [pc, #312]	@ (800dcd8 <_svfiprintf_r+0x1e4>)
 800db9e:	f7f2 fb2f 	bl	8000200 <memchr>
 800dba2:	9a04      	ldr	r2, [sp, #16]
 800dba4:	b9d8      	cbnz	r0, 800dbde <_svfiprintf_r+0xea>
 800dba6:	06d0      	lsls	r0, r2, #27
 800dba8:	bf44      	itt	mi
 800dbaa:	2320      	movmi	r3, #32
 800dbac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbb0:	0711      	lsls	r1, r2, #28
 800dbb2:	bf44      	itt	mi
 800dbb4:	232b      	movmi	r3, #43	@ 0x2b
 800dbb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbba:	f89a 3000 	ldrb.w	r3, [sl]
 800dbbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbc0:	d015      	beq.n	800dbee <_svfiprintf_r+0xfa>
 800dbc2:	9a07      	ldr	r2, [sp, #28]
 800dbc4:	4654      	mov	r4, sl
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	f04f 0c0a 	mov.w	ip, #10
 800dbcc:	4621      	mov	r1, r4
 800dbce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbd2:	3b30      	subs	r3, #48	@ 0x30
 800dbd4:	2b09      	cmp	r3, #9
 800dbd6:	d94b      	bls.n	800dc70 <_svfiprintf_r+0x17c>
 800dbd8:	b1b0      	cbz	r0, 800dc08 <_svfiprintf_r+0x114>
 800dbda:	9207      	str	r2, [sp, #28]
 800dbdc:	e014      	b.n	800dc08 <_svfiprintf_r+0x114>
 800dbde:	eba0 0308 	sub.w	r3, r0, r8
 800dbe2:	fa09 f303 	lsl.w	r3, r9, r3
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	9304      	str	r3, [sp, #16]
 800dbea:	46a2      	mov	sl, r4
 800dbec:	e7d2      	b.n	800db94 <_svfiprintf_r+0xa0>
 800dbee:	9b03      	ldr	r3, [sp, #12]
 800dbf0:	1d19      	adds	r1, r3, #4
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	9103      	str	r1, [sp, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	bfbb      	ittet	lt
 800dbfa:	425b      	neglt	r3, r3
 800dbfc:	f042 0202 	orrlt.w	r2, r2, #2
 800dc00:	9307      	strge	r3, [sp, #28]
 800dc02:	9307      	strlt	r3, [sp, #28]
 800dc04:	bfb8      	it	lt
 800dc06:	9204      	strlt	r2, [sp, #16]
 800dc08:	7823      	ldrb	r3, [r4, #0]
 800dc0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc0c:	d10a      	bne.n	800dc24 <_svfiprintf_r+0x130>
 800dc0e:	7863      	ldrb	r3, [r4, #1]
 800dc10:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc12:	d132      	bne.n	800dc7a <_svfiprintf_r+0x186>
 800dc14:	9b03      	ldr	r3, [sp, #12]
 800dc16:	1d1a      	adds	r2, r3, #4
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	9203      	str	r2, [sp, #12]
 800dc1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc20:	3402      	adds	r4, #2
 800dc22:	9305      	str	r3, [sp, #20]
 800dc24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dce8 <_svfiprintf_r+0x1f4>
 800dc28:	7821      	ldrb	r1, [r4, #0]
 800dc2a:	2203      	movs	r2, #3
 800dc2c:	4650      	mov	r0, sl
 800dc2e:	f7f2 fae7 	bl	8000200 <memchr>
 800dc32:	b138      	cbz	r0, 800dc44 <_svfiprintf_r+0x150>
 800dc34:	9b04      	ldr	r3, [sp, #16]
 800dc36:	eba0 000a 	sub.w	r0, r0, sl
 800dc3a:	2240      	movs	r2, #64	@ 0x40
 800dc3c:	4082      	lsls	r2, r0
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	3401      	adds	r4, #1
 800dc42:	9304      	str	r3, [sp, #16]
 800dc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc48:	4824      	ldr	r0, [pc, #144]	@ (800dcdc <_svfiprintf_r+0x1e8>)
 800dc4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc4e:	2206      	movs	r2, #6
 800dc50:	f7f2 fad6 	bl	8000200 <memchr>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d036      	beq.n	800dcc6 <_svfiprintf_r+0x1d2>
 800dc58:	4b21      	ldr	r3, [pc, #132]	@ (800dce0 <_svfiprintf_r+0x1ec>)
 800dc5a:	bb1b      	cbnz	r3, 800dca4 <_svfiprintf_r+0x1b0>
 800dc5c:	9b03      	ldr	r3, [sp, #12]
 800dc5e:	3307      	adds	r3, #7
 800dc60:	f023 0307 	bic.w	r3, r3, #7
 800dc64:	3308      	adds	r3, #8
 800dc66:	9303      	str	r3, [sp, #12]
 800dc68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc6a:	4433      	add	r3, r6
 800dc6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc6e:	e76a      	b.n	800db46 <_svfiprintf_r+0x52>
 800dc70:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc74:	460c      	mov	r4, r1
 800dc76:	2001      	movs	r0, #1
 800dc78:	e7a8      	b.n	800dbcc <_svfiprintf_r+0xd8>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	3401      	adds	r4, #1
 800dc7e:	9305      	str	r3, [sp, #20]
 800dc80:	4619      	mov	r1, r3
 800dc82:	f04f 0c0a 	mov.w	ip, #10
 800dc86:	4620      	mov	r0, r4
 800dc88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc8c:	3a30      	subs	r2, #48	@ 0x30
 800dc8e:	2a09      	cmp	r2, #9
 800dc90:	d903      	bls.n	800dc9a <_svfiprintf_r+0x1a6>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d0c6      	beq.n	800dc24 <_svfiprintf_r+0x130>
 800dc96:	9105      	str	r1, [sp, #20]
 800dc98:	e7c4      	b.n	800dc24 <_svfiprintf_r+0x130>
 800dc9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc9e:	4604      	mov	r4, r0
 800dca0:	2301      	movs	r3, #1
 800dca2:	e7f0      	b.n	800dc86 <_svfiprintf_r+0x192>
 800dca4:	ab03      	add	r3, sp, #12
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	462a      	mov	r2, r5
 800dcaa:	4b0e      	ldr	r3, [pc, #56]	@ (800dce4 <_svfiprintf_r+0x1f0>)
 800dcac:	a904      	add	r1, sp, #16
 800dcae:	4638      	mov	r0, r7
 800dcb0:	f3af 8000 	nop.w
 800dcb4:	1c42      	adds	r2, r0, #1
 800dcb6:	4606      	mov	r6, r0
 800dcb8:	d1d6      	bne.n	800dc68 <_svfiprintf_r+0x174>
 800dcba:	89ab      	ldrh	r3, [r5, #12]
 800dcbc:	065b      	lsls	r3, r3, #25
 800dcbe:	f53f af2d 	bmi.w	800db1c <_svfiprintf_r+0x28>
 800dcc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcc4:	e72c      	b.n	800db20 <_svfiprintf_r+0x2c>
 800dcc6:	ab03      	add	r3, sp, #12
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	462a      	mov	r2, r5
 800dccc:	4b05      	ldr	r3, [pc, #20]	@ (800dce4 <_svfiprintf_r+0x1f0>)
 800dcce:	a904      	add	r1, sp, #16
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	f000 f879 	bl	800ddc8 <_printf_i>
 800dcd6:	e7ed      	b.n	800dcb4 <_svfiprintf_r+0x1c0>
 800dcd8:	0800e52c 	.word	0x0800e52c
 800dcdc:	0800e536 	.word	0x0800e536
 800dce0:	00000000 	.word	0x00000000
 800dce4:	0800da3d 	.word	0x0800da3d
 800dce8:	0800e532 	.word	0x0800e532

0800dcec <_printf_common>:
 800dcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf0:	4616      	mov	r6, r2
 800dcf2:	4698      	mov	r8, r3
 800dcf4:	688a      	ldr	r2, [r1, #8]
 800dcf6:	690b      	ldr	r3, [r1, #16]
 800dcf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	bfb8      	it	lt
 800dd00:	4613      	movlt	r3, r2
 800dd02:	6033      	str	r3, [r6, #0]
 800dd04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dd08:	4607      	mov	r7, r0
 800dd0a:	460c      	mov	r4, r1
 800dd0c:	b10a      	cbz	r2, 800dd12 <_printf_common+0x26>
 800dd0e:	3301      	adds	r3, #1
 800dd10:	6033      	str	r3, [r6, #0]
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	0699      	lsls	r1, r3, #26
 800dd16:	bf42      	ittt	mi
 800dd18:	6833      	ldrmi	r3, [r6, #0]
 800dd1a:	3302      	addmi	r3, #2
 800dd1c:	6033      	strmi	r3, [r6, #0]
 800dd1e:	6825      	ldr	r5, [r4, #0]
 800dd20:	f015 0506 	ands.w	r5, r5, #6
 800dd24:	d106      	bne.n	800dd34 <_printf_common+0x48>
 800dd26:	f104 0a19 	add.w	sl, r4, #25
 800dd2a:	68e3      	ldr	r3, [r4, #12]
 800dd2c:	6832      	ldr	r2, [r6, #0]
 800dd2e:	1a9b      	subs	r3, r3, r2
 800dd30:	42ab      	cmp	r3, r5
 800dd32:	dc26      	bgt.n	800dd82 <_printf_common+0x96>
 800dd34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dd38:	6822      	ldr	r2, [r4, #0]
 800dd3a:	3b00      	subs	r3, #0
 800dd3c:	bf18      	it	ne
 800dd3e:	2301      	movne	r3, #1
 800dd40:	0692      	lsls	r2, r2, #26
 800dd42:	d42b      	bmi.n	800dd9c <_printf_common+0xb0>
 800dd44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dd48:	4641      	mov	r1, r8
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	47c8      	blx	r9
 800dd4e:	3001      	adds	r0, #1
 800dd50:	d01e      	beq.n	800dd90 <_printf_common+0xa4>
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	6922      	ldr	r2, [r4, #16]
 800dd56:	f003 0306 	and.w	r3, r3, #6
 800dd5a:	2b04      	cmp	r3, #4
 800dd5c:	bf02      	ittt	eq
 800dd5e:	68e5      	ldreq	r5, [r4, #12]
 800dd60:	6833      	ldreq	r3, [r6, #0]
 800dd62:	1aed      	subeq	r5, r5, r3
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	bf0c      	ite	eq
 800dd68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd6c:	2500      	movne	r5, #0
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	bfc4      	itt	gt
 800dd72:	1a9b      	subgt	r3, r3, r2
 800dd74:	18ed      	addgt	r5, r5, r3
 800dd76:	2600      	movs	r6, #0
 800dd78:	341a      	adds	r4, #26
 800dd7a:	42b5      	cmp	r5, r6
 800dd7c:	d11a      	bne.n	800ddb4 <_printf_common+0xc8>
 800dd7e:	2000      	movs	r0, #0
 800dd80:	e008      	b.n	800dd94 <_printf_common+0xa8>
 800dd82:	2301      	movs	r3, #1
 800dd84:	4652      	mov	r2, sl
 800dd86:	4641      	mov	r1, r8
 800dd88:	4638      	mov	r0, r7
 800dd8a:	47c8      	blx	r9
 800dd8c:	3001      	adds	r0, #1
 800dd8e:	d103      	bne.n	800dd98 <_printf_common+0xac>
 800dd90:	f04f 30ff 	mov.w	r0, #4294967295
 800dd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd98:	3501      	adds	r5, #1
 800dd9a:	e7c6      	b.n	800dd2a <_printf_common+0x3e>
 800dd9c:	18e1      	adds	r1, r4, r3
 800dd9e:	1c5a      	adds	r2, r3, #1
 800dda0:	2030      	movs	r0, #48	@ 0x30
 800dda2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dda6:	4422      	add	r2, r4
 800dda8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ddac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ddb0:	3302      	adds	r3, #2
 800ddb2:	e7c7      	b.n	800dd44 <_printf_common+0x58>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	4622      	mov	r2, r4
 800ddb8:	4641      	mov	r1, r8
 800ddba:	4638      	mov	r0, r7
 800ddbc:	47c8      	blx	r9
 800ddbe:	3001      	adds	r0, #1
 800ddc0:	d0e6      	beq.n	800dd90 <_printf_common+0xa4>
 800ddc2:	3601      	adds	r6, #1
 800ddc4:	e7d9      	b.n	800dd7a <_printf_common+0x8e>
	...

0800ddc8 <_printf_i>:
 800ddc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddcc:	7e0f      	ldrb	r7, [r1, #24]
 800ddce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ddd0:	2f78      	cmp	r7, #120	@ 0x78
 800ddd2:	4691      	mov	r9, r2
 800ddd4:	4680      	mov	r8, r0
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	469a      	mov	sl, r3
 800ddda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ddde:	d807      	bhi.n	800ddf0 <_printf_i+0x28>
 800dde0:	2f62      	cmp	r7, #98	@ 0x62
 800dde2:	d80a      	bhi.n	800ddfa <_printf_i+0x32>
 800dde4:	2f00      	cmp	r7, #0
 800dde6:	f000 80d1 	beq.w	800df8c <_printf_i+0x1c4>
 800ddea:	2f58      	cmp	r7, #88	@ 0x58
 800ddec:	f000 80b8 	beq.w	800df60 <_printf_i+0x198>
 800ddf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ddf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ddf8:	e03a      	b.n	800de70 <_printf_i+0xa8>
 800ddfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ddfe:	2b15      	cmp	r3, #21
 800de00:	d8f6      	bhi.n	800ddf0 <_printf_i+0x28>
 800de02:	a101      	add	r1, pc, #4	@ (adr r1, 800de08 <_printf_i+0x40>)
 800de04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de08:	0800de61 	.word	0x0800de61
 800de0c:	0800de75 	.word	0x0800de75
 800de10:	0800ddf1 	.word	0x0800ddf1
 800de14:	0800ddf1 	.word	0x0800ddf1
 800de18:	0800ddf1 	.word	0x0800ddf1
 800de1c:	0800ddf1 	.word	0x0800ddf1
 800de20:	0800de75 	.word	0x0800de75
 800de24:	0800ddf1 	.word	0x0800ddf1
 800de28:	0800ddf1 	.word	0x0800ddf1
 800de2c:	0800ddf1 	.word	0x0800ddf1
 800de30:	0800ddf1 	.word	0x0800ddf1
 800de34:	0800df73 	.word	0x0800df73
 800de38:	0800de9f 	.word	0x0800de9f
 800de3c:	0800df2d 	.word	0x0800df2d
 800de40:	0800ddf1 	.word	0x0800ddf1
 800de44:	0800ddf1 	.word	0x0800ddf1
 800de48:	0800df95 	.word	0x0800df95
 800de4c:	0800ddf1 	.word	0x0800ddf1
 800de50:	0800de9f 	.word	0x0800de9f
 800de54:	0800ddf1 	.word	0x0800ddf1
 800de58:	0800ddf1 	.word	0x0800ddf1
 800de5c:	0800df35 	.word	0x0800df35
 800de60:	6833      	ldr	r3, [r6, #0]
 800de62:	1d1a      	adds	r2, r3, #4
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6032      	str	r2, [r6, #0]
 800de68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de70:	2301      	movs	r3, #1
 800de72:	e09c      	b.n	800dfae <_printf_i+0x1e6>
 800de74:	6833      	ldr	r3, [r6, #0]
 800de76:	6820      	ldr	r0, [r4, #0]
 800de78:	1d19      	adds	r1, r3, #4
 800de7a:	6031      	str	r1, [r6, #0]
 800de7c:	0606      	lsls	r6, r0, #24
 800de7e:	d501      	bpl.n	800de84 <_printf_i+0xbc>
 800de80:	681d      	ldr	r5, [r3, #0]
 800de82:	e003      	b.n	800de8c <_printf_i+0xc4>
 800de84:	0645      	lsls	r5, r0, #25
 800de86:	d5fb      	bpl.n	800de80 <_printf_i+0xb8>
 800de88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800de8c:	2d00      	cmp	r5, #0
 800de8e:	da03      	bge.n	800de98 <_printf_i+0xd0>
 800de90:	232d      	movs	r3, #45	@ 0x2d
 800de92:	426d      	negs	r5, r5
 800de94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de98:	4858      	ldr	r0, [pc, #352]	@ (800dffc <_printf_i+0x234>)
 800de9a:	230a      	movs	r3, #10
 800de9c:	e011      	b.n	800dec2 <_printf_i+0xfa>
 800de9e:	6821      	ldr	r1, [r4, #0]
 800dea0:	6833      	ldr	r3, [r6, #0]
 800dea2:	0608      	lsls	r0, r1, #24
 800dea4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dea8:	d402      	bmi.n	800deb0 <_printf_i+0xe8>
 800deaa:	0649      	lsls	r1, r1, #25
 800deac:	bf48      	it	mi
 800deae:	b2ad      	uxthmi	r5, r5
 800deb0:	2f6f      	cmp	r7, #111	@ 0x6f
 800deb2:	4852      	ldr	r0, [pc, #328]	@ (800dffc <_printf_i+0x234>)
 800deb4:	6033      	str	r3, [r6, #0]
 800deb6:	bf14      	ite	ne
 800deb8:	230a      	movne	r3, #10
 800deba:	2308      	moveq	r3, #8
 800debc:	2100      	movs	r1, #0
 800debe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dec2:	6866      	ldr	r6, [r4, #4]
 800dec4:	60a6      	str	r6, [r4, #8]
 800dec6:	2e00      	cmp	r6, #0
 800dec8:	db05      	blt.n	800ded6 <_printf_i+0x10e>
 800deca:	6821      	ldr	r1, [r4, #0]
 800decc:	432e      	orrs	r6, r5
 800dece:	f021 0104 	bic.w	r1, r1, #4
 800ded2:	6021      	str	r1, [r4, #0]
 800ded4:	d04b      	beq.n	800df6e <_printf_i+0x1a6>
 800ded6:	4616      	mov	r6, r2
 800ded8:	fbb5 f1f3 	udiv	r1, r5, r3
 800dedc:	fb03 5711 	mls	r7, r3, r1, r5
 800dee0:	5dc7      	ldrb	r7, [r0, r7]
 800dee2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dee6:	462f      	mov	r7, r5
 800dee8:	42bb      	cmp	r3, r7
 800deea:	460d      	mov	r5, r1
 800deec:	d9f4      	bls.n	800ded8 <_printf_i+0x110>
 800deee:	2b08      	cmp	r3, #8
 800def0:	d10b      	bne.n	800df0a <_printf_i+0x142>
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	07df      	lsls	r7, r3, #31
 800def6:	d508      	bpl.n	800df0a <_printf_i+0x142>
 800def8:	6923      	ldr	r3, [r4, #16]
 800defa:	6861      	ldr	r1, [r4, #4]
 800defc:	4299      	cmp	r1, r3
 800defe:	bfde      	ittt	le
 800df00:	2330      	movle	r3, #48	@ 0x30
 800df02:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df06:	f106 36ff 	addle.w	r6, r6, #4294967295
 800df0a:	1b92      	subs	r2, r2, r6
 800df0c:	6122      	str	r2, [r4, #16]
 800df0e:	f8cd a000 	str.w	sl, [sp]
 800df12:	464b      	mov	r3, r9
 800df14:	aa03      	add	r2, sp, #12
 800df16:	4621      	mov	r1, r4
 800df18:	4640      	mov	r0, r8
 800df1a:	f7ff fee7 	bl	800dcec <_printf_common>
 800df1e:	3001      	adds	r0, #1
 800df20:	d14a      	bne.n	800dfb8 <_printf_i+0x1f0>
 800df22:	f04f 30ff 	mov.w	r0, #4294967295
 800df26:	b004      	add	sp, #16
 800df28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2c:	6823      	ldr	r3, [r4, #0]
 800df2e:	f043 0320 	orr.w	r3, r3, #32
 800df32:	6023      	str	r3, [r4, #0]
 800df34:	4832      	ldr	r0, [pc, #200]	@ (800e000 <_printf_i+0x238>)
 800df36:	2778      	movs	r7, #120	@ 0x78
 800df38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800df3c:	6823      	ldr	r3, [r4, #0]
 800df3e:	6831      	ldr	r1, [r6, #0]
 800df40:	061f      	lsls	r7, r3, #24
 800df42:	f851 5b04 	ldr.w	r5, [r1], #4
 800df46:	d402      	bmi.n	800df4e <_printf_i+0x186>
 800df48:	065f      	lsls	r7, r3, #25
 800df4a:	bf48      	it	mi
 800df4c:	b2ad      	uxthmi	r5, r5
 800df4e:	6031      	str	r1, [r6, #0]
 800df50:	07d9      	lsls	r1, r3, #31
 800df52:	bf44      	itt	mi
 800df54:	f043 0320 	orrmi.w	r3, r3, #32
 800df58:	6023      	strmi	r3, [r4, #0]
 800df5a:	b11d      	cbz	r5, 800df64 <_printf_i+0x19c>
 800df5c:	2310      	movs	r3, #16
 800df5e:	e7ad      	b.n	800debc <_printf_i+0xf4>
 800df60:	4826      	ldr	r0, [pc, #152]	@ (800dffc <_printf_i+0x234>)
 800df62:	e7e9      	b.n	800df38 <_printf_i+0x170>
 800df64:	6823      	ldr	r3, [r4, #0]
 800df66:	f023 0320 	bic.w	r3, r3, #32
 800df6a:	6023      	str	r3, [r4, #0]
 800df6c:	e7f6      	b.n	800df5c <_printf_i+0x194>
 800df6e:	4616      	mov	r6, r2
 800df70:	e7bd      	b.n	800deee <_printf_i+0x126>
 800df72:	6833      	ldr	r3, [r6, #0]
 800df74:	6825      	ldr	r5, [r4, #0]
 800df76:	6961      	ldr	r1, [r4, #20]
 800df78:	1d18      	adds	r0, r3, #4
 800df7a:	6030      	str	r0, [r6, #0]
 800df7c:	062e      	lsls	r6, r5, #24
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	d501      	bpl.n	800df86 <_printf_i+0x1be>
 800df82:	6019      	str	r1, [r3, #0]
 800df84:	e002      	b.n	800df8c <_printf_i+0x1c4>
 800df86:	0668      	lsls	r0, r5, #25
 800df88:	d5fb      	bpl.n	800df82 <_printf_i+0x1ba>
 800df8a:	8019      	strh	r1, [r3, #0]
 800df8c:	2300      	movs	r3, #0
 800df8e:	6123      	str	r3, [r4, #16]
 800df90:	4616      	mov	r6, r2
 800df92:	e7bc      	b.n	800df0e <_printf_i+0x146>
 800df94:	6833      	ldr	r3, [r6, #0]
 800df96:	1d1a      	adds	r2, r3, #4
 800df98:	6032      	str	r2, [r6, #0]
 800df9a:	681e      	ldr	r6, [r3, #0]
 800df9c:	6862      	ldr	r2, [r4, #4]
 800df9e:	2100      	movs	r1, #0
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f7f2 f92d 	bl	8000200 <memchr>
 800dfa6:	b108      	cbz	r0, 800dfac <_printf_i+0x1e4>
 800dfa8:	1b80      	subs	r0, r0, r6
 800dfaa:	6060      	str	r0, [r4, #4]
 800dfac:	6863      	ldr	r3, [r4, #4]
 800dfae:	6123      	str	r3, [r4, #16]
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfb6:	e7aa      	b.n	800df0e <_printf_i+0x146>
 800dfb8:	6923      	ldr	r3, [r4, #16]
 800dfba:	4632      	mov	r2, r6
 800dfbc:	4649      	mov	r1, r9
 800dfbe:	4640      	mov	r0, r8
 800dfc0:	47d0      	blx	sl
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	d0ad      	beq.n	800df22 <_printf_i+0x15a>
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	079b      	lsls	r3, r3, #30
 800dfca:	d413      	bmi.n	800dff4 <_printf_i+0x22c>
 800dfcc:	68e0      	ldr	r0, [r4, #12]
 800dfce:	9b03      	ldr	r3, [sp, #12]
 800dfd0:	4298      	cmp	r0, r3
 800dfd2:	bfb8      	it	lt
 800dfd4:	4618      	movlt	r0, r3
 800dfd6:	e7a6      	b.n	800df26 <_printf_i+0x15e>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	4632      	mov	r2, r6
 800dfdc:	4649      	mov	r1, r9
 800dfde:	4640      	mov	r0, r8
 800dfe0:	47d0      	blx	sl
 800dfe2:	3001      	adds	r0, #1
 800dfe4:	d09d      	beq.n	800df22 <_printf_i+0x15a>
 800dfe6:	3501      	adds	r5, #1
 800dfe8:	68e3      	ldr	r3, [r4, #12]
 800dfea:	9903      	ldr	r1, [sp, #12]
 800dfec:	1a5b      	subs	r3, r3, r1
 800dfee:	42ab      	cmp	r3, r5
 800dff0:	dcf2      	bgt.n	800dfd8 <_printf_i+0x210>
 800dff2:	e7eb      	b.n	800dfcc <_printf_i+0x204>
 800dff4:	2500      	movs	r5, #0
 800dff6:	f104 0619 	add.w	r6, r4, #25
 800dffa:	e7f5      	b.n	800dfe8 <_printf_i+0x220>
 800dffc:	0800e53d 	.word	0x0800e53d
 800e000:	0800e54e 	.word	0x0800e54e

0800e004 <memmove>:
 800e004:	4288      	cmp	r0, r1
 800e006:	b510      	push	{r4, lr}
 800e008:	eb01 0402 	add.w	r4, r1, r2
 800e00c:	d902      	bls.n	800e014 <memmove+0x10>
 800e00e:	4284      	cmp	r4, r0
 800e010:	4623      	mov	r3, r4
 800e012:	d807      	bhi.n	800e024 <memmove+0x20>
 800e014:	1e43      	subs	r3, r0, #1
 800e016:	42a1      	cmp	r1, r4
 800e018:	d008      	beq.n	800e02c <memmove+0x28>
 800e01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e022:	e7f8      	b.n	800e016 <memmove+0x12>
 800e024:	4402      	add	r2, r0
 800e026:	4601      	mov	r1, r0
 800e028:	428a      	cmp	r2, r1
 800e02a:	d100      	bne.n	800e02e <memmove+0x2a>
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e036:	e7f7      	b.n	800e028 <memmove+0x24>

0800e038 <_sbrk_r>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	4d06      	ldr	r5, [pc, #24]	@ (800e054 <_sbrk_r+0x1c>)
 800e03c:	2300      	movs	r3, #0
 800e03e:	4604      	mov	r4, r0
 800e040:	4608      	mov	r0, r1
 800e042:	602b      	str	r3, [r5, #0]
 800e044:	f7f5 f9d6 	bl	80033f4 <_sbrk>
 800e048:	1c43      	adds	r3, r0, #1
 800e04a:	d102      	bne.n	800e052 <_sbrk_r+0x1a>
 800e04c:	682b      	ldr	r3, [r5, #0]
 800e04e:	b103      	cbz	r3, 800e052 <_sbrk_r+0x1a>
 800e050:	6023      	str	r3, [r4, #0]
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	20000468 	.word	0x20000468

0800e058 <memcpy>:
 800e058:	440a      	add	r2, r1
 800e05a:	4291      	cmp	r1, r2
 800e05c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e060:	d100      	bne.n	800e064 <memcpy+0xc>
 800e062:	4770      	bx	lr
 800e064:	b510      	push	{r4, lr}
 800e066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e06a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e06e:	4291      	cmp	r1, r2
 800e070:	d1f9      	bne.n	800e066 <memcpy+0xe>
 800e072:	bd10      	pop	{r4, pc}

0800e074 <_realloc_r>:
 800e074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e078:	4607      	mov	r7, r0
 800e07a:	4614      	mov	r4, r2
 800e07c:	460d      	mov	r5, r1
 800e07e:	b921      	cbnz	r1, 800e08a <_realloc_r+0x16>
 800e080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e084:	4611      	mov	r1, r2
 800e086:	f7ff bc4d 	b.w	800d924 <_malloc_r>
 800e08a:	b92a      	cbnz	r2, 800e098 <_realloc_r+0x24>
 800e08c:	f7ff fbde 	bl	800d84c <_free_r>
 800e090:	4625      	mov	r5, r4
 800e092:	4628      	mov	r0, r5
 800e094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e098:	f000 f81a 	bl	800e0d0 <_malloc_usable_size_r>
 800e09c:	4284      	cmp	r4, r0
 800e09e:	4606      	mov	r6, r0
 800e0a0:	d802      	bhi.n	800e0a8 <_realloc_r+0x34>
 800e0a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0a6:	d8f4      	bhi.n	800e092 <_realloc_r+0x1e>
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	4638      	mov	r0, r7
 800e0ac:	f7ff fc3a 	bl	800d924 <_malloc_r>
 800e0b0:	4680      	mov	r8, r0
 800e0b2:	b908      	cbnz	r0, 800e0b8 <_realloc_r+0x44>
 800e0b4:	4645      	mov	r5, r8
 800e0b6:	e7ec      	b.n	800e092 <_realloc_r+0x1e>
 800e0b8:	42b4      	cmp	r4, r6
 800e0ba:	4622      	mov	r2, r4
 800e0bc:	4629      	mov	r1, r5
 800e0be:	bf28      	it	cs
 800e0c0:	4632      	movcs	r2, r6
 800e0c2:	f7ff ffc9 	bl	800e058 <memcpy>
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	4638      	mov	r0, r7
 800e0ca:	f7ff fbbf 	bl	800d84c <_free_r>
 800e0ce:	e7f1      	b.n	800e0b4 <_realloc_r+0x40>

0800e0d0 <_malloc_usable_size_r>:
 800e0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d4:	1f18      	subs	r0, r3, #4
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	bfbc      	itt	lt
 800e0da:	580b      	ldrlt	r3, [r1, r0]
 800e0dc:	18c0      	addlt	r0, r0, r3
 800e0de:	4770      	bx	lr

0800e0e0 <_init>:
 800e0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e2:	bf00      	nop
 800e0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0e6:	bc08      	pop	{r3}
 800e0e8:	469e      	mov	lr, r3
 800e0ea:	4770      	bx	lr

0800e0ec <_fini>:
 800e0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ee:	bf00      	nop
 800e0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0f2:	bc08      	pop	{r3}
 800e0f4:	469e      	mov	lr, r3
 800e0f6:	4770      	bx	lr
